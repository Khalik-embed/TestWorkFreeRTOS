
TestWorkFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005dc4  08005dc4  00006dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f60  08005f60  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f60  08005f60  00006f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f68  08005f68  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f68  08005f68  00006f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f6c  08005f6c  00006f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005f70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026d4  2000006c  08005fdc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002740  08005fdc  00007740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001313a  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003552  00000000  00000000  0001a1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0001d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e65  00000000  00000000  0001e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001944a  00000000  00000000  0001f83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016943  00000000  00000000  00038c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000931b5  00000000  00000000  0004f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e277f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  000e27c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e78ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005dac 	.word	0x08005dac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005dac 	.word	0x08005dac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <bsp_get_time_stamp>:

#include "stm32f1xx_hal.h"

#include "time_bsp.h"

uint32_t bsp_get_time_stamp(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000164:	f000 fd4e 	bl	8000c04 <HAL_GetTick>
 8000168:	4603      	mov	r3, r0
}
 800016a:	4618      	mov	r0, r3
 800016c:	bd80      	pop	{r7, pc}
	...

08000170 <bsp_print_log>:
#include "usart.h"

#include "uart_bsp.h"
#include "bsp.h"

status_t bsp_print_log(log_message_t * message){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	result = HAL_UART_Transmit_IT (&huart1, message->message, message->size);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	1d19      	adds	r1, r3, #4
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	b29b      	uxth	r3, r3
 8000182:	461a      	mov	r2, r3
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <bsp_print_log+0x34>)
 8000186:	f001 ff5d 	bl	8002044 <HAL_UART_Transmit_IT>
 800018a:	4603      	mov	r3, r0
 800018c:	73fb      	strb	r3, [r7, #15]
	if (result == HAL_OK) {

	}
	return result == HAL_OK ? BSP_OK : BSP_ERROR;
 800018e:	7bfb      	ldrb	r3, [r7, #15]
 8000190:	2b00      	cmp	r3, #0
 8000192:	bf14      	ite	ne
 8000194:	2301      	movne	r3, #1
 8000196:	2300      	moveq	r3, #0
 8000198:	b2db      	uxtb	r3, r3
}
 800019a:	4618      	mov	r0, r3
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200003d0 	.word	0x200003d0

080001a8 <get_set_mem_log_thread_id>:

osThreadId get_set_mem_log_thread_id(osThreadId thread_id){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	static osThreadId log_osThreadId;
	if (thread_id != NULL) {
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d002      	beq.n	80001bc <get_set_mem_log_thread_id+0x14>
		log_osThreadId = thread_id;
 80001b6:	4a05      	ldr	r2, [pc, #20]	@ (80001cc <get_set_mem_log_thread_id+0x24>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	6013      	str	r3, [r2, #0]
	}
	return log_osThreadId;
 80001bc:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <get_set_mem_log_thread_id+0x24>)
 80001be:	681b      	ldr	r3, [r3, #0]
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000088 	.word	0x20000088

080001d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <HAL_UART_TxCpltCallback+0x2c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d107      	bne.n	80001f4 <HAL_UART_TxCpltCallback+0x24>
		osSignalSet(get_set_mem_log_thread_id(NULL), LOG_SIGNAL);
 80001e4:	2000      	movs	r0, #0
 80001e6:	f7ff ffdf 	bl	80001a8 <get_set_mem_log_thread_id>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2101      	movs	r1, #1
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fcc6 	bl	8002b80 <osSignalSet>
	}
};
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200003d0 	.word	0x200003d0

08000200 <log_print>:

log_message_t message_item;

uint8_t message_buf[MAX_LOG_INFO_WIDTH];

void log_print(LogLevel_t log_level, const char* message){
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af02      	add	r7, sp, #8
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	71fb      	strb	r3, [r7, #7]
	if (log_level >= LOG_LEVEL) {
		uint32_t time_stamp =  bsp_get_time_stamp();
 800020c:	f7ff ffa8 	bl	8000160 <bsp_get_time_stamp>
 8000210:	60f8      	str	r0, [r7, #12]
		sprintf((char *)message_item.message, LOG_MESSAGE_TEMPLATE,
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <log_print+0x48>)
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	4613      	mov	r3, r2
 8000220:	68fa      	ldr	r2, [r7, #12]
 8000222:	490a      	ldr	r1, [pc, #40]	@ (800024c <log_print+0x4c>)
 8000224:	480a      	ldr	r0, [pc, #40]	@ (8000250 <log_print+0x50>)
 8000226:	f005 f911 	bl	800544c <siprintf>
	         (unsigned int)time_stamp,
			 log_level_string[log_level], message);
		message_item.size = strlen((char *)message_item.message);
 800022a:	4809      	ldr	r0, [pc, #36]	@ (8000250 <log_print+0x50>)
 800022c:	f7ff ff90 	bl	8000150 <strlen>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	4b07      	ldr	r3, [pc, #28]	@ (8000254 <log_print+0x54>)
 8000236:	601a      	str	r2, [r3, #0]
		bsp_print_log(&message_item);
 8000238:	4806      	ldr	r0, [pc, #24]	@ (8000254 <log_print+0x54>)
 800023a:	f7ff ff99 	bl	8000170 <bsp_print_log>
	}
}
 800023e:	bf00      	nop
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000
 800024c:	08005de8 	.word	0x08005de8
 8000250:	20000090 	.word	0x20000090
 8000254:	2000008c 	.word	0x2000008c

08000258 <log_print_from_Queue>:

void log_print_from_Queue(log_message_t * log_message){
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	bsp_print_log((log_message_t *)log_message);
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f7ff ff85 	bl	8000170 <bsp_print_log>
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <get_set_log_pool_id>:

osPoolId get_set_log_pool_id(osPoolId pool_id_new){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	static osPoolId pool_id = NULL;
	if (pool_id_new != NULL){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d002      	beq.n	8000284 <get_set_log_pool_id+0x14>
		pool_id = pool_id_new;
 800027e:	4a05      	ldr	r2, [pc, #20]	@ (8000294 <get_set_log_pool_id+0x24>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6013      	str	r3, [r2, #0]
	}
	return pool_id;
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <get_set_log_pool_id+0x24>)
 8000286:	681b      	ldr	r3, [r3, #0]
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000110 	.word	0x20000110

08000298 <get_set_log_queue_id>:

osMessageQId get_set_log_queue_id(osMessageQId queue_id_new){
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	static osPoolId queue_id = NULL;
	if (queue_id_new != NULL){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d002      	beq.n	80002ac <get_set_log_queue_id+0x14>
		queue_id = queue_id_new;
 80002a6:	4a05      	ldr	r2, [pc, #20]	@ (80002bc <get_set_log_queue_id+0x24>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	6013      	str	r3, [r2, #0]
	}
	return queue_id;
 80002ac:	4b03      	ldr	r3, [pc, #12]	@ (80002bc <get_set_log_queue_id+0x24>)
 80002ae:	681b      	ldr	r3, [r3, #0]
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	20000114 	.word	0x20000114

080002c0 <log_Queue_put>:


uint32_t log_Queue_put(LogLevel_t log_level, const uint8_t * message){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af02      	add	r7, sp, #8
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
	uint32_t result;
	if (log_level >= LOG_LEVEL) {
		log_message_t    *message_item_ptr;
		message_item_ptr = osPoolAlloc(get_set_log_pool_id(NULL));
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ffcf 	bl	8000270 <get_set_log_pool_id>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fd3c 	bl	8002d52 <osPoolAlloc>
 80002da:	6178      	str	r0, [r7, #20]
		uint32_t time_stamp =  bsp_get_time_stamp();
 80002dc:	f7ff ff40 	bl	8000160 <bsp_get_time_stamp>
 80002e0:	6138      	str	r0, [r7, #16]
		sprintf((char *)message_item_ptr->message, LOG_MESSAGE_TEMPLATE,
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	1d18      	adds	r0, r3, #4
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4a10      	ldr	r2, [pc, #64]	@ (800032c <log_Queue_put+0x6c>)
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	4613      	mov	r3, r2
 80002f4:	693a      	ldr	r2, [r7, #16]
 80002f6:	490e      	ldr	r1, [pc, #56]	@ (8000330 <log_Queue_put+0x70>)
 80002f8:	f005 f8a8 	bl	800544c <siprintf>
	         (unsigned int)time_stamp,
			 log_level_string[log_level], message);
		message_item_ptr->size = strlen((char *)message_item_ptr->message);
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	3304      	adds	r3, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff25 	bl	8000150 <strlen>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	601a      	str	r2, [r3, #0]
		result = (uint32_t)osMessagePut(get_set_log_queue_id(NULL), (uint32_t)message_item_ptr, osWaitForever);
 800030e:	2000      	movs	r0, #0
 8000310:	f7ff ffc2 	bl	8000298 <get_set_log_queue_id>
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	f04f 32ff 	mov.w	r2, #4294967295
 800031a:	4619      	mov	r1, r3
 800031c:	f002 fde4 	bl	8002ee8 <osMessagePut>
 8000320:	60f8      	str	r0, [r7, #12]
	}
	return result;
 8000322:	68fb      	ldr	r3, [r7, #12]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000000 	.word	0x20000000
 8000330:	08005de8 	.word	0x08005de8

08000334 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	4a06      	ldr	r2, [pc, #24]	@ (800035c <vApplicationGetIdleTaskMemory+0x28>)
 8000344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <vApplicationGetIdleTaskMemory+0x2c>)
 800034a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2280      	movs	r2, #128	@ 0x80
 8000350:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000130 	.word	0x20000130
 8000360:	20000184 	.word	0x20000184

08000364 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000364:	b5b0      	push	{r4, r5, r7, lr}
 8000366:	b0a0      	sub	sp, #128	@ 0x80
 8000368:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LogQueue */
  osMessageQDef(LogQueue, 8, uint32_t);
 800036a:	4b39      	ldr	r3, [pc, #228]	@ (8000450 <MX_FREERTOS_Init+0xec>)
 800036c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000370:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LogQueueHandle = osMessageCreate(osMessageQ(LogQueue), NULL);
 8000376:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f002 fd8a 	bl	8002e96 <osMessageCreate>
 8000382:	4603      	mov	r3, r0
 8000384:	4a33      	ldr	r2, [pc, #204]	@ (8000454 <MX_FREERTOS_Init+0xf0>)
 8000386:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DispatcherTask */
  osThreadDef(DispatcherTask, StartDispacherTask, osPriorityNormal, 0, 256);
 8000388:	4b33      	ldr	r3, [pc, #204]	@ (8000458 <MX_FREERTOS_Init+0xf4>)
 800038a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800038e:	461d      	mov	r5, r3
 8000390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000394:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000398:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DispatcherTaskHandle = osThreadCreate(osThread(DispatcherTask), NULL);
 800039c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fb8b 	bl	8002abe <osThreadCreate>
 80003a8:	4603      	mov	r3, r0
 80003aa:	4a2c      	ldr	r2, [pc, #176]	@ (800045c <MX_FREERTOS_Init+0xf8>)
 80003ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of LogTask */
  osThreadDef(LogTask, StartLogTask, osPriorityLow, 0, 512);
 80003ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000460 <MX_FREERTOS_Init+0xfc>)
 80003b0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80003b4:	461d      	mov	r5, r3
 80003b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LogTaskHandle = osThreadCreate(osThread(LogTask), NULL);
 80003c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f002 fb78 	bl	8002abe <osThreadCreate>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4a24      	ldr	r2, [pc, #144]	@ (8000464 <MX_FREERTOS_Init+0x100>)
 80003d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTLeftTask */
  osThreadDef(UARTLeftTask, StartUARTLeftTask, osPriorityLow, 0, 128);
 80003d4:	4b24      	ldr	r3, [pc, #144]	@ (8000468 <MX_FREERTOS_Init+0x104>)
 80003d6:	f107 041c 	add.w	r4, r7, #28
 80003da:	461d      	mov	r5, r3
 80003dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTLeftTaskHandle = osThreadCreate(osThread(UARTLeftTask), NULL);
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fb65 	bl	8002abe <osThreadCreate>
 80003f4:	4603      	mov	r3, r0
 80003f6:	4a1d      	ldr	r2, [pc, #116]	@ (800046c <MX_FREERTOS_Init+0x108>)
 80003f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTRightTask */
  osThreadDef(UARTRightTask, StartUARTRightTask, osPriorityLow, 0, 128);
 80003fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000470 <MX_FREERTOS_Init+0x10c>)
 80003fc:	463c      	mov	r4, r7
 80003fe:	461d      	mov	r5, r3
 8000400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000408:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTRightTaskHandle = osThreadCreate(osThread(UARTRightTask), NULL);
 800040c:	463b      	mov	r3, r7
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f002 fb54 	bl	8002abe <osThreadCreate>
 8000416:	4603      	mov	r3, r0
 8000418:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <MX_FREERTOS_Init+0x110>)
 800041a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  LogMemHandle = osPoolCreate(osPool(LogMem));
 800041c:	4816      	ldr	r0, [pc, #88]	@ (8000478 <MX_FREERTOS_Init+0x114>)
 800041e:	f002 fc3b 	bl	8002c98 <osPoolCreate>
 8000422:	4603      	mov	r3, r0
 8000424:	4a15      	ldr	r2, [pc, #84]	@ (800047c <MX_FREERTOS_Init+0x118>)
 8000426:	6013      	str	r3, [r2, #0]
  get_set_mem_log_thread_id(LogTaskHandle);
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_FREERTOS_Init+0x100>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff febb 	bl	80001a8 <get_set_mem_log_thread_id>
  get_set_log_pool_id(LogMemHandle);
 8000432:	4b12      	ldr	r3, [pc, #72]	@ (800047c <MX_FREERTOS_Init+0x118>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff1a 	bl	8000270 <get_set_log_pool_id>
  get_set_log_queue_id(LogQueueHandle);
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <MX_FREERTOS_Init+0xf0>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff29 	bl	8000298 <get_set_log_queue_id>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000446:	bf00      	nop
 8000448:	3780      	adds	r7, #128	@ 0x80
 800044a:	46bd      	mov	sp, r7
 800044c:	bdb0      	pop	{r4, r5, r7, pc}
 800044e:	bf00      	nop
 8000450:	08005e14 	.word	0x08005e14
 8000454:	2000012c 	.word	0x2000012c
 8000458:	08005e34 	.word	0x08005e34
 800045c:	2000011c 	.word	0x2000011c
 8000460:	08005e58 	.word	0x08005e58
 8000464:	20000120 	.word	0x20000120
 8000468:	08005e84 	.word	0x08005e84
 800046c:	20000124 	.word	0x20000124
 8000470:	08005eb0 	.word	0x08005eb0
 8000474:	20000128 	.word	0x20000128
 8000478:	08005ef4 	.word	0x08005ef4
 800047c:	20000118 	.word	0x20000118

08000480 <StartDispacherTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDispacherTask */
void StartDispacherTask(void const * argument)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispacherTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 8000488:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800048c:	f002 fb63 	bl	8002b56 <osDelay>
    log_Queue_put(LOG_INFO, (uint8_t *)"It is work");
 8000490:	4902      	ldr	r1, [pc, #8]	@ (800049c <StartDispacherTask+0x1c>)
 8000492:	2000      	movs	r0, #0
 8000494:	f7ff ff14 	bl	80002c0 <log_Queue_put>
    osDelay(2000);
 8000498:	bf00      	nop
 800049a:	e7f5      	b.n	8000488 <StartDispacherTask+0x8>
 800049c:	08005ecc 	.word	0x08005ecc

080004a0 <StartLogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogTask */
void StartLogTask(void const * argument)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	osEvent  evt2;

  /* Infinite loop */
  for(;;)
  {
	evt1 = osMessageGet(LogQueueHandle, osWaitForever);
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <StartLogTask+0x50>)
 80004aa:	6819      	ldr	r1, [r3, #0]
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	f04f 32ff 	mov.w	r2, #4294967295
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 fd57 	bl	8002f68 <osMessageGet>
    if (evt1.status == osEventMessage) {
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	2b10      	cmp	r3, #16
 80004be:	d103      	bne.n	80004c8 <StartLogTask+0x28>
    	log_print_from_Queue(evt1.value.p);
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fec8 	bl	8000258 <log_print_from_Queue>
    }
    evt2 = osSignalWait (LOG_SIGNAL, osWaitForever);
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	f04f 32ff 	mov.w	r2, #4294967295
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fb94 	bl	8002c00 <osSignalWait>
    if(evt2.status == osEventSignal){
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	2b08      	cmp	r3, #8
 80004dc:	d1e4      	bne.n	80004a8 <StartLogTask+0x8>
    	osPoolFree(LogMemHandle, evt1.value.p);
 80004de:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <StartLogTask+0x54>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	69ba      	ldr	r2, [r7, #24]
 80004e4:	4611      	mov	r1, r2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f002 fc95 	bl	8002e16 <osPoolFree>
	evt1 = osMessageGet(LogQueueHandle, osWaitForever);
 80004ec:	e7dc      	b.n	80004a8 <StartLogTask+0x8>
 80004ee:	bf00      	nop
 80004f0:	2000012c 	.word	0x2000012c
 80004f4:	20000118 	.word	0x20000118

080004f8 <StartUARTLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTLeftTask */
void StartUARTLeftTask(void const * argument)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTLeftTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f002 fb28 	bl	8002b56 <osDelay>
 8000506:	e7fb      	b.n	8000500 <StartUARTLeftTask+0x8>

08000508 <StartUARTRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTRightTask */
void StartUARTRightTask(void const * argument)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTRightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f002 fb20 	bl	8002b56 <osDelay>
 8000516:	e7fb      	b.n	8000510 <StartUARTRightTask+0x8>

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_GPIO_Init+0x58>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a13      	ldr	r2, [pc, #76]	@ (8000570 <MX_GPIO_Init+0x58>)
 8000524:	f043 0320 	orr.w	r3, r3, #32
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_GPIO_Init+0x58>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0320 	and.w	r3, r3, #32
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <MX_GPIO_Init+0x58>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <MX_GPIO_Init+0x58>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <MX_GPIO_Init+0x58>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <MX_GPIO_Init+0x58>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a07      	ldr	r2, [pc, #28]	@ (8000570 <MX_GPIO_Init+0x58>)
 8000554:	f043 0308 	orr.w	r3, r3, #8
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <MX_GPIO_Init+0x58>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0308 	and.w	r3, r3, #8
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40021000 	.word	0x40021000

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fb1c 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f814 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f7ff ffca 	bl	8000518 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000584:	f000 f99a 	bl	80008bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f9c2 	bl	8000910 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800058c:	f000 f9ea 	bl	8000964 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  log_print(LOG_INFO, "BSP INIT COMPLETE");
 8000590:	4904      	ldr	r1, [pc, #16]	@ (80005a4 <main+0x30>)
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff fe34 	bl	8000200 <log_print>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000598:	f7ff fee4 	bl	8000364 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800059c:	f002 fa88 	bl	8002ab0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <main+0x2c>
 80005a4:	08005ed8 	.word	0x08005ed8

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	@ 0x40
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2228      	movs	r2, #40	@ 0x28
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 ff68 	bl	800548c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fe31 	bl	8001244 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x44>
  {
    Error_Handler();
 80005e8:	f000 f82c 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f89f 	bl	8001748 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000610:	f000 f818 	bl	8000644 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000614:	f001 f982 	bl	800191c <HAL_RCC_EnableCSS>
}
 8000618:	bf00      	nop
 800061a:	3740      	adds	r7, #64	@ 0x40
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d101      	bne.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000632:	f000 fad5 	bl	8000be0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40000800 	.word	0x40000800

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <Error_Handler+0x8>

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <HAL_MspInit+0x68>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a17      	ldr	r2, [pc, #92]	@ (80006b8 <HAL_MspInit+0x68>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <HAL_MspInit+0x68>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <HAL_MspInit+0x68>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a11      	ldr	r2, [pc, #68]	@ (80006b8 <HAL_MspInit+0x68>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <HAL_MspInit+0x68>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	210f      	movs	r1, #15
 800068a:	f06f 0001 	mvn.w	r0, #1
 800068e:	f000 fb78 	bl	8000d82 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <HAL_MspInit+0x6c>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <HAL_MspInit+0x6c>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000

080006c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	@ 0x38
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006d6:	4b34      	ldr	r3, [pc, #208]	@ (80007a8 <HAL_InitTick+0xe8>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a33      	ldr	r2, [pc, #204]	@ (80007a8 <HAL_InitTick+0xe8>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b31      	ldr	r3, [pc, #196]	@ (80007a8 <HAL_InitTick+0xe8>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006ee:	f107 0210 	add.w	r2, r7, #16
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f9a1 	bl	8001a40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000704:	2b00      	cmp	r3, #0
 8000706:	d103      	bne.n	8000710 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000708:	f001 f972 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 800070c:	6378      	str	r0, [r7, #52]	@ 0x34
 800070e:	e004      	b.n	800071a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000710:	f001 f96e 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 8000714:	4603      	mov	r3, r0
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800071a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800071c:	4a23      	ldr	r2, [pc, #140]	@ (80007ac <HAL_InitTick+0xec>)
 800071e:	fba2 2303 	umull	r2, r3, r2, r3
 8000722:	0c9b      	lsrs	r3, r3, #18
 8000724:	3b01      	subs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <HAL_InitTick+0xf0>)
 800072a:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <HAL_InitTick+0xf4>)
 800072c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <HAL_InitTick+0xf0>)
 8000730:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000734:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000736:	4a1e      	ldr	r2, [pc, #120]	@ (80007b0 <HAL_InitTick+0xf0>)
 8000738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800073a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <HAL_InitTick+0xf0>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <HAL_InitTick+0xf0>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <HAL_InitTick+0xf0>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800074e:	4818      	ldr	r0, [pc, #96]	@ (80007b0 <HAL_InitTick+0xf0>)
 8000750:	f001 f9de 	bl	8001b10 <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800075a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800075e:	2b00      	cmp	r3, #0
 8000760:	d11b      	bne.n	800079a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000762:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <HAL_InitTick+0xf0>)
 8000764:	f001 fa2c 	bl	8001bc0 <HAL_TIM_Base_Start_IT>
 8000768:	4603      	mov	r3, r0
 800076a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800076e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000772:	2b00      	cmp	r3, #0
 8000774:	d111      	bne.n	800079a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000776:	201e      	movs	r0, #30
 8000778:	f000 fb1f 	bl	8000dba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b0f      	cmp	r3, #15
 8000780:	d808      	bhi.n	8000794 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000782:	2200      	movs	r2, #0
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	201e      	movs	r0, #30
 8000788:	f000 fafb 	bl	8000d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800078c:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <HAL_InitTick+0xf8>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e002      	b.n	800079a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800079a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3738      	adds	r7, #56	@ 0x38
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	431bde83 	.word	0x431bde83
 80007b0:	20000384 	.word	0x20000384
 80007b4:	40000800 	.word	0x40000800
 80007b8:	20000010 	.word	0x20000010

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007c0:	f001 f96e 	bl	8001aa0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <NMI_Handler+0x8>

080007c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <MemManage_Handler+0x4>

080007d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007f8:	4802      	ldr	r0, [pc, #8]	@ (8000804 <TIM4_IRQHandler+0x10>)
 80007fa:	f001 fa33 	bl	8001c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000384 	.word	0x20000384

08000808 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800080c:	4802      	ldr	r0, [pc, #8]	@ (8000818 <USART1_IRQHandler+0x10>)
 800080e:	f001 fc4f 	bl	80020b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200003d0 	.word	0x200003d0

0800081c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000820:	4802      	ldr	r0, [pc, #8]	@ (800082c <USART2_IRQHandler+0x10>)
 8000822:	f001 fc45 	bl	80020b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000418 	.word	0x20000418

08000830 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <USART3_IRQHandler+0x10>)
 8000836:	f001 fc3b 	bl	80020b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000460 	.word	0x20000460

08000844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <_sbrk+0x5c>)
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <_sbrk+0x60>)
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <_sbrk+0x64>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <_sbrk+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000874:	f004 fe12 	bl	800549c <__errno>
 8000878:	4603      	mov	r3, r0
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	e009      	b.n	8000898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <_sbrk+0x64>)
 8000894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20005000 	.word	0x20005000
 80008a4:	00000400 	.word	0x00000400
 80008a8:	200003cc 	.word	0x200003cc
 80008ac:	20002740 	.word	0x20002740

080008b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	@ (800090c <MX_USART1_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_USART1_UART_Init+0x4c>)
 80008f4:	f001 fb56 	bl	8001fa4 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f7ff fea1 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200003d0 	.word	0x200003d0
 800090c:	40013800 	.word	0x40013800

08000910 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <MX_USART2_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_USART2_UART_Init+0x4c>)
 8000948:	f001 fb2c 	bl	8001fa4 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f7ff fe77 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000418 	.word	0x20000418
 8000960:	40004400 	.word	0x40004400

08000964 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <MX_USART3_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_USART3_UART_Init+0x4c>)
 800099c:	f001 fb02 	bl	8001fa4 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f7ff fe4d 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000460 	.word	0x20000460
 80009b4:	40004800 	.word	0x40004800

080009b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	@ 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a5f      	ldr	r2, [pc, #380]	@ (8000b50 <HAL_UART_MspInit+0x198>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13a      	bne.n	8000a4e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 80009de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ec:	61fb      	str	r3, [r7, #28]
 80009ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b58      	ldr	r3, [pc, #352]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a57      	ldr	r2, [pc, #348]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b55      	ldr	r3, [pc, #340]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	484e      	ldr	r0, [pc, #312]	@ (8000b58 <HAL_UART_MspInit+0x1a0>)
 8000a1e:	f000 fa8d 	bl	8000f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4619      	mov	r1, r3
 8000a36:	4848      	ldr	r0, [pc, #288]	@ (8000b58 <HAL_UART_MspInit+0x1a0>)
 8000a38:	f000 fa80 	bl	8000f3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2105      	movs	r1, #5
 8000a40:	2025      	movs	r0, #37	@ 0x25
 8000a42:	f000 f99e 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a46:	2025      	movs	r0, #37	@ 0x25
 8000a48:	f000 f9b7 	bl	8000dba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a4c:	e07c      	b.n	8000b48 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a42      	ldr	r2, [pc, #264]	@ (8000b5c <HAL_UART_MspInit+0x1a4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d138      	bne.n	8000aca <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a58:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a62:	61d3      	str	r3, [r2, #28]
 8000a64:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000a66:	69db      	ldr	r3, [r3, #28]
 8000a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b38      	ldr	r3, [pc, #224]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a37      	ldr	r2, [pc, #220]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b35      	ldr	r3, [pc, #212]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482f      	ldr	r0, [pc, #188]	@ (8000b58 <HAL_UART_MspInit+0x1a0>)
 8000a9c:	f000 fa4e 	bl	8000f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4829      	ldr	r0, [pc, #164]	@ (8000b58 <HAL_UART_MspInit+0x1a0>)
 8000ab4:	f000 fa42 	bl	8000f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2105      	movs	r1, #5
 8000abc:	2026      	movs	r0, #38	@ 0x26
 8000abe:	f000 f960 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac2:	2026      	movs	r0, #38	@ 0x26
 8000ac4:	f000 f979 	bl	8000dba <HAL_NVIC_EnableIRQ>
}
 8000ac8:	e03e      	b.n	8000b48 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a24      	ldr	r2, [pc, #144]	@ (8000b60 <HAL_UART_MspInit+0x1a8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d139      	bne.n	8000b48 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000ada:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ade:	61d3      	str	r3, [r2, #28]
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a18      	ldr	r2, [pc, #96]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <HAL_UART_MspInit+0x19c>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0308 	and.w	r3, r3, #8
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4619      	mov	r1, r3
 8000b18:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <HAL_UART_MspInit+0x1ac>)
 8000b1a:	f000 fa0f 	bl	8000f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	4619      	mov	r1, r3
 8000b32:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <HAL_UART_MspInit+0x1ac>)
 8000b34:	f000 fa02 	bl	8000f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2105      	movs	r1, #5
 8000b3c:	2027      	movs	r0, #39	@ 0x27
 8000b3e:	f000 f920 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b42:	2027      	movs	r0, #39	@ 0x27
 8000b44:	f000 f939 	bl	8000dba <HAL_NVIC_EnableIRQ>
}
 8000b48:	bf00      	nop
 8000b4a:	3730      	adds	r7, #48	@ 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40013800 	.word	0x40013800
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40004800 	.word	0x40004800
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b68:	f7ff fea2 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480b      	ldr	r0, [pc, #44]	@ (8000b9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b6e:	490c      	ldr	r1, [pc, #48]	@ (8000ba0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a09      	ldr	r2, [pc, #36]	@ (8000ba8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b84:	4c09      	ldr	r4, [pc, #36]	@ (8000bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f004 fc89 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b96:	f7ff fced 	bl	8000574 <main>
  bx lr
 8000b9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ba4:	08005f70 	.word	0x08005f70
  ldr r2, =_sbss
 8000ba8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bac:	20002740 	.word	0x20002740

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_Init+0x28>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_Init+0x28>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 f8d1 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bca:	200f      	movs	r0, #15
 8000bcc:	f7ff fd78 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff fd3e 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40022000 	.word	0x40022000

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000014 	.word	0x20000014
 8000c00:	200004a8 	.word	0x200004a8

08000c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	@ (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	200004a8 	.word	0x200004a8

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4906      	ldr	r1, [pc, #24]	@ (8000cb0 <__NVIC_EnableIRQ+0x34>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff4f 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff64 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ffb2 	bl	8000d08 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff81 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff57 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d008      	beq.n	8000e00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2204      	movs	r2, #4
 8000df2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e020      	b.n	8000e42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 020e 	bic.w	r2, r2, #14
 8000e0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d005      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2204      	movs	r2, #4
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e051      	b.n	8000f14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 020e 	bic.w	r2, r2, #14
 8000e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a22      	ldr	r2, [pc, #136]	@ (8000f20 <HAL_DMA_Abort_IT+0xd4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d029      	beq.n	8000eee <HAL_DMA_Abort_IT+0xa2>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a21      	ldr	r2, [pc, #132]	@ (8000f24 <HAL_DMA_Abort_IT+0xd8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d022      	beq.n	8000eea <HAL_DMA_Abort_IT+0x9e>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <HAL_DMA_Abort_IT+0xdc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01a      	beq.n	8000ee4 <HAL_DMA_Abort_IT+0x98>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <HAL_DMA_Abort_IT+0xe0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d012      	beq.n	8000ede <HAL_DMA_Abort_IT+0x92>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f30 <HAL_DMA_Abort_IT+0xe4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00a      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0x8c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f34 <HAL_DMA_Abort_IT+0xe8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d102      	bne.n	8000ed2 <HAL_DMA_Abort_IT+0x86>
 8000ecc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ed0:	e00e      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000ed2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ed6:	e00b      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000ed8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000edc:	e008      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee2:	e005      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee8:	e002      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000eea:	2310      	movs	r3, #16
 8000eec:	e000      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <HAL_DMA_Abort_IT+0xec>)
 8000ef2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	4798      	blx	r3
    } 
  }
  return status;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020008 	.word	0x40020008
 8000f24:	4002001c 	.word	0x4002001c
 8000f28:	40020030 	.word	0x40020030
 8000f2c:	40020044 	.word	0x40020044
 8000f30:	40020058 	.word	0x40020058
 8000f34:	4002006c 	.word	0x4002006c
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b08b      	sub	sp, #44	@ 0x2c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e169      	b.n	8001224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f50:	2201      	movs	r2, #1
 8000f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8158 	bne.w	800121e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a9a      	ldr	r2, [pc, #616]	@ (80011dc <HAL_GPIO_Init+0x2a0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d05e      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f78:	4a98      	ldr	r2, [pc, #608]	@ (80011dc <HAL_GPIO_Init+0x2a0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d875      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f7e:	4a98      	ldr	r2, [pc, #608]	@ (80011e0 <HAL_GPIO_Init+0x2a4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d058      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f84:	4a96      	ldr	r2, [pc, #600]	@ (80011e0 <HAL_GPIO_Init+0x2a4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d86f      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f8a:	4a96      	ldr	r2, [pc, #600]	@ (80011e4 <HAL_GPIO_Init+0x2a8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d052      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f90:	4a94      	ldr	r2, [pc, #592]	@ (80011e4 <HAL_GPIO_Init+0x2a8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d869      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f96:	4a94      	ldr	r2, [pc, #592]	@ (80011e8 <HAL_GPIO_Init+0x2ac>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d04c      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f9c:	4a92      	ldr	r2, [pc, #584]	@ (80011e8 <HAL_GPIO_Init+0x2ac>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d863      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fa2:	4a92      	ldr	r2, [pc, #584]	@ (80011ec <HAL_GPIO_Init+0x2b0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d046      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a90      	ldr	r2, [pc, #576]	@ (80011ec <HAL_GPIO_Init+0x2b0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d85d      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d82a      	bhi.n	8001008 <HAL_GPIO_Init+0xcc>
 8000fb2:	2b12      	cmp	r3, #18
 8000fb4:	d859      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fbc <HAL_GPIO_Init+0x80>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08001037 	.word	0x08001037
 8000fc0:	08001011 	.word	0x08001011
 8000fc4:	08001023 	.word	0x08001023
 8000fc8:	08001065 	.word	0x08001065
 8000fcc:	0800106b 	.word	0x0800106b
 8000fd0:	0800106b 	.word	0x0800106b
 8000fd4:	0800106b 	.word	0x0800106b
 8000fd8:	0800106b 	.word	0x0800106b
 8000fdc:	0800106b 	.word	0x0800106b
 8000fe0:	0800106b 	.word	0x0800106b
 8000fe4:	0800106b 	.word	0x0800106b
 8000fe8:	0800106b 	.word	0x0800106b
 8000fec:	0800106b 	.word	0x0800106b
 8000ff0:	0800106b 	.word	0x0800106b
 8000ff4:	0800106b 	.word	0x0800106b
 8000ff8:	0800106b 	.word	0x0800106b
 8000ffc:	0800106b 	.word	0x0800106b
 8001000:	08001019 	.word	0x08001019
 8001004:	0800102d 	.word	0x0800102d
 8001008:	4a79      	ldr	r2, [pc, #484]	@ (80011f0 <HAL_GPIO_Init+0x2b4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100e:	e02c      	b.n	800106a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e029      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	3304      	adds	r3, #4
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e024      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e01f      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	330c      	adds	r3, #12
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e01a      	b.n	800106c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103e:	2304      	movs	r3, #4
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e013      	b.n	800106c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d105      	bne.n	8001058 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	611a      	str	r2, [r3, #16]
          break;
 8001056:	e009      	b.n	800106c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	615a      	str	r2, [r3, #20]
          break;
 8001062:	e003      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x130>
          break;
 800106a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2bff      	cmp	r3, #255	@ 0xff
 8001070:	d801      	bhi.n	8001076 <HAL_GPIO_Init+0x13a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	e001      	b.n	800107a <HAL_GPIO_Init+0x13e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2bff      	cmp	r3, #255	@ 0xff
 8001080:	d802      	bhi.n	8001088 <HAL_GPIO_Init+0x14c>
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x152>
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	3b08      	subs	r3, #8
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	210f      	movs	r1, #15
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	6a39      	ldr	r1, [r7, #32]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	431a      	orrs	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80b1 	beq.w	800121e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010bc:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	@ (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b4a      	ldr	r3, [pc, #296]	@ (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d4:	4a48      	ldr	r2, [pc, #288]	@ (80011f8 <HAL_GPIO_Init+0x2bc>)
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a40      	ldr	r2, [pc, #256]	@ (80011fc <HAL_GPIO_Init+0x2c0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x1ec>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3f      	ldr	r2, [pc, #252]	@ (8001200 <HAL_GPIO_Init+0x2c4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1e8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3e      	ldr	r2, [pc, #248]	@ (8001204 <HAL_GPIO_Init+0x2c8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1e4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <HAL_GPIO_Init+0x2cc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1e0>
 8001118:	2303      	movs	r3, #3
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 800111c:	2304      	movs	r3, #4
 800111e:	e004      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001120:	2302      	movs	r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001128:	2300      	movs	r3, #0
 800112a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800112c:	f002 0203 	and.w	r2, r2, #3
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	4093      	lsls	r3, r2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800113a:	492f      	ldr	r1, [pc, #188]	@ (80011f8 <HAL_GPIO_Init+0x2bc>)
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001154:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	492c      	ldr	r1, [pc, #176]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	608b      	str	r3, [r1, #8]
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001162:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4928      	ldr	r1, [pc, #160]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 800116c:	4013      	ands	r3, r2
 800116e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	4922      	ldr	r1, [pc, #136]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	60cb      	str	r3, [r1, #12]
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800118a:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	491e      	ldr	r1, [pc, #120]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 8001194:	4013      	ands	r3, r2
 8001196:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a4:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4918      	ldr	r1, [pc, #96]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4914      	ldr	r1, [pc, #80]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d021      	beq.n	8001210 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	490e      	ldr	r1, [pc, #56]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
 80011d8:	e021      	b.n	800121e <HAL_GPIO_Init+0x2e2>
 80011da:	bf00      	nop
 80011dc:	10320000 	.word	0x10320000
 80011e0:	10310000 	.word	0x10310000
 80011e4:	10220000 	.word	0x10220000
 80011e8:	10210000 	.word	0x10210000
 80011ec:	10120000 	.word	0x10120000
 80011f0:	10110000 	.word	0x10110000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00
 8001204:	40011000 	.word	0x40011000
 8001208:	40011400 	.word	0x40011400
 800120c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_GPIO_Init+0x304>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	43db      	mvns	r3, r3
 8001218:	4909      	ldr	r1, [pc, #36]	@ (8001240 <HAL_GPIO_Init+0x304>)
 800121a:	4013      	ands	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	f47f ae8e 	bne.w	8000f50 <HAL_GPIO_Init+0x14>
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	372c      	adds	r7, #44	@ 0x2c
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e272      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8087 	beq.w	8001372 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001264:	4b92      	ldr	r3, [pc, #584]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b04      	cmp	r3, #4
 800126e:	d00c      	beq.n	800128a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001270:	4b8f      	ldr	r3, [pc, #572]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d112      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5e>
 800127c:	4b8c      	ldr	r3, [pc, #560]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001288:	d10b      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	4b89      	ldr	r3, [pc, #548]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d06c      	beq.n	8001370 <HAL_RCC_OscConfig+0x12c>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d168      	bne.n	8001370 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e24c      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x76>
 80012ac:	4b80      	ldr	r3, [pc, #512]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a7f      	ldr	r2, [pc, #508]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e02e      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b7b      	ldr	r3, [pc, #492]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7a      	ldr	r2, [pc, #488]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b78      	ldr	r3, [pc, #480]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a77      	ldr	r2, [pc, #476]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e01d      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0xbc>
 80012e6:	4b72      	ldr	r3, [pc, #456]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a71      	ldr	r2, [pc, #452]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b6f      	ldr	r3, [pc, #444]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6e      	ldr	r2, [pc, #440]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 8001300:	4b6b      	ldr	r3, [pc, #428]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a6a      	ldr	r2, [pc, #424]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b68      	ldr	r3, [pc, #416]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a67      	ldr	r2, [pc, #412]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001316:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fc70 	bl	8000c04 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fc6c 	bl	8000c04 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e200      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b5d      	ldr	r3, [pc, #372]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0xe4>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc5c 	bl	8000c04 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc58 	bl	8000c04 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1ec      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x10c>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d063      	beq.n	8001446 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800137e:	4b4c      	ldr	r3, [pc, #304]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800138a:	4b49      	ldr	r3, [pc, #292]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	d11c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x18c>
 8001396:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <HAL_RCC_OscConfig+0x176>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1c0      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4939      	ldr	r1, [pc, #228]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	e03a      	b.n	8001446 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d8:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fc11 	bl	8000c04 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff fc0d 	bl	8000c04 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1a1      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4927      	ldr	r1, [pc, #156]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
 8001418:	e015      	b.n	8001446 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141a:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fbf0 	bl	8000c04 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001428:	f7ff fbec 	bl	8000c04 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e180      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d03a      	beq.n	80014c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d019      	beq.n	800148e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fbd0 	bl	8000c04 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fbcc 	bl	8000c04 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e160      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f000 fb1e 	bl	8001ac8 <RCC_Delay>
 800148c:	e01c      	b.n	80014c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001494:	f7ff fbb6 	bl	8000c04 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149a:	e00f      	b.n	80014bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff fbb2 	bl	8000c04 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d908      	bls.n	80014bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e146      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	42420000 	.word	0x42420000
 80014b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	4b92      	ldr	r3, [pc, #584]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e9      	bne.n	800149c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a6 	beq.w	8001622 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014da:	4b8b      	ldr	r3, [pc, #556]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10d      	bne.n	8001502 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b88      	ldr	r3, [pc, #544]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a87      	ldr	r2, [pc, #540]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b85      	ldr	r3, [pc, #532]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fe:	2301      	movs	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b82      	ldr	r3, [pc, #520]	@ (800170c <HAL_RCC_OscConfig+0x4c8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d118      	bne.n	8001540 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150e:	4b7f      	ldr	r3, [pc, #508]	@ (800170c <HAL_RCC_OscConfig+0x4c8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7e      	ldr	r2, [pc, #504]	@ (800170c <HAL_RCC_OscConfig+0x4c8>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151a:	f7ff fb73 	bl	8000c04 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001522:	f7ff fb6f 	bl	8000c04 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	@ 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e103      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	4b75      	ldr	r3, [pc, #468]	@ (800170c <HAL_RCC_OscConfig+0x4c8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x312>
 8001548:	4b6f      	ldr	r3, [pc, #444]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a6e      	ldr	r2, [pc, #440]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	e02d      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x334>
 800155e:	4b6a      	ldr	r3, [pc, #424]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a69      	ldr	r2, [pc, #420]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	4b67      	ldr	r3, [pc, #412]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a66      	ldr	r2, [pc, #408]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	e01c      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b05      	cmp	r3, #5
 800157e:	d10c      	bne.n	800159a <HAL_RCC_OscConfig+0x356>
 8001580:	4b61      	ldr	r3, [pc, #388]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4a60      	ldr	r2, [pc, #384]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6213      	str	r3, [r2, #32]
 800158c:	4b5e      	ldr	r3, [pc, #376]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a5d      	ldr	r2, [pc, #372]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 800159a:	4b5b      	ldr	r3, [pc, #364]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a5a      	ldr	r2, [pc, #360]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4b58      	ldr	r3, [pc, #352]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a57      	ldr	r2, [pc, #348]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d015      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb23 	bl	8000c04 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fb1f 	bl	8000c04 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0b1      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ee      	beq.n	80015c2 <HAL_RCC_OscConfig+0x37e>
 80015e4:	e014      	b.n	8001610 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fb0d 	bl	8000c04 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fb09 	bl	8000c04 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e09b      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	4b40      	ldr	r3, [pc, #256]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ee      	bne.n	80015ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d105      	bne.n	8001622 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001616:	4b3c      	ldr	r3, [pc, #240]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a3b      	ldr	r2, [pc, #236]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8087 	beq.w	800173a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800162c:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d061      	beq.n	80016fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d146      	bne.n	80016ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b33      	ldr	r3, [pc, #204]	@ (8001710 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fadd 	bl	8000c04 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fad9 	bl	8000c04 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e06d      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001660:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001674:	d108      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001676:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	4921      	ldr	r1, [pc, #132]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a19      	ldr	r1, [r3, #32]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	430b      	orrs	r3, r1
 800169a:	491b      	ldr	r1, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCC_OscConfig+0x4cc>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff faad 	bl	8000c04 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff faa9 	bl	8000c04 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e03d      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x46a>
 80016cc:	e035      	b.n	800173a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_RCC_OscConfig+0x4cc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa96 	bl	8000c04 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fa92 	bl	8000c04 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e026      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x498>
 80016fa:	e01e      	b.n	800173a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e019      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
 8001710:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_OscConfig+0x500>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	429a      	cmp	r2, r3
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0d0      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b6a      	ldr	r3, [pc, #424]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d910      	bls.n	800178c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b67      	ldr	r3, [pc, #412]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 0207 	bic.w	r2, r3, #7
 8001772:	4965      	ldr	r1, [pc, #404]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a58      	ldr	r2, [pc, #352]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a52      	ldr	r2, [pc, #328]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d040      	beq.n	8001868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d115      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001806:	4b41      	ldr	r3, [pc, #260]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e073      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	4b3d      	ldr	r3, [pc, #244]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06b      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001826:	4b39      	ldr	r3, [pc, #228]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f023 0203 	bic.w	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4936      	ldr	r1, [pc, #216]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001838:	f7ff f9e4 	bl	8000c04 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	e00a      	b.n	8001856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001840:	f7ff f9e0 	bl	8000c04 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e053      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 020c 	and.w	r2, r3, #12
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	429a      	cmp	r2, r3
 8001866:	d1eb      	bne.n	8001840 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d210      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4922      	ldr	r1, [pc, #136]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f82d 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	@ (8001910 <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	@ (8001914 <HAL_RCC_ClockConfig+0x1cc>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_RCC_ClockConfig+0x1d0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fee2 	bl	80006c0 <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40022000 	.word	0x40022000
 800190c:	40021000 	.word	0x40021000
 8001910:	08005f00 	.word	0x08005f00
 8001914:	2000000c 	.word	0x2000000c
 8001918:	20000010 	.word	0x20000010

0800191c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_RCC_EnableCSS+0x14>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	4242004c 	.word	0x4242004c

08001934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800194e:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x30>
 800195e:	2b08      	cmp	r3, #8
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x36>
 8001962:	e027      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001966:	613b      	str	r3, [r7, #16]
      break;
 8001968:	e027      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	0c9b      	lsrs	r3, r3, #18
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001982:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	0c5b      	lsrs	r3, r3, #17
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001996:	fb03 f202 	mul.w	r2, r3, r2
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e004      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0c      	ldr	r2, [pc, #48]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	613b      	str	r3, [r7, #16]
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 80019b6:	613b      	str	r3, [r7, #16]
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	693b      	ldr	r3, [r7, #16]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	08005f18 	.word	0x08005f18
 80019d4:	08005f28 	.word	0x08005f28
 80019d8:	003d0900 	.word	0x003d0900

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b02      	ldr	r3, [pc, #8]	@ (80019ec <HAL_RCC_GetHCLKFreq+0x10>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	2000000c 	.word	0x2000000c

080019f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f4:	f7ff fff2 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	@ (8001a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08005f10 	.word	0x08005f10

08001a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0adb      	lsrs	r3, r3, #11
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4903      	ldr	r1, [pc, #12]	@ (8001a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08005f10 	.word	0x08005f10

08001a40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_RCC_GetClockConfig+0x58>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <HAL_RCC_GetClockConfig+0x58>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_RCC_GetClockConfig+0x58>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a74:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <HAL_RCC_GetClockConfig+0x58>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_RCC_GetClockConfig+0x5c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0207 	and.w	r2, r3, #7
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aac:	2b80      	cmp	r3, #128	@ 0x80
 8001aae:	d104      	bne.n	8001aba <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001ab0:	f000 f828 	bl	8001b04 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001ab6:	2280      	movs	r2, #128	@ 0x80
 8001ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	4002100a 	.word	0x4002100a

08001ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <RCC_Delay+0x34>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <RCC_Delay+0x38>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae4:	bf00      	nop
  }
  while (Delay --);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <RCC_Delay+0x1c>
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e041      	b.n	8001ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f839 	bl	8001bae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f000 f9b4 	bl	8001ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d001      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e03a      	b.n	8001c4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <HAL_TIM_Base_Start_IT+0x98>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x58>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c02:	d009      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x58>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <HAL_TIM_Base_Start_IT+0x9c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x58>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d111      	bne.n	8001c3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d010      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3a:	e007      	b.n	8001c4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40012c00 	.word	0x40012c00
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	40000800 	.word	0x40000800

08001c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0202 	mvn.w	r2, #2
 8001c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8ed 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8e0 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f8ef 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0204 	mvn.w	r2, #4
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8c3 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8b6 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8c5 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0208 	mvn.w	r2, #8
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f899 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f88c 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f89b 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0210 	mvn.w	r2, #16
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2208      	movs	r2, #8
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f86f 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f862 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f871 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0201 	mvn.w	r2, #1
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fc1c 	bl	8000620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df2:	2b80      	cmp	r3, #128	@ 0x80
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e00:	2b80      	cmp	r3, #128	@ 0x80
 8001e02:	d107      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8bf 	bl	8001f92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1e:	2b40      	cmp	r3, #64	@ 0x40
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2c:	2b40      	cmp	r3, #64	@ 0x40
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f835 	bl	8001eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0220 	mvn.w	r2, #32
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f88a 	bl	8001f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a29      	ldr	r2, [pc, #164]	@ (8001f74 <TIM_Base_SetConfig+0xb8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00b      	beq.n	8001eec <TIM_Base_SetConfig+0x30>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eda:	d007      	beq.n	8001eec <TIM_Base_SetConfig+0x30>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a26      	ldr	r2, [pc, #152]	@ (8001f78 <TIM_Base_SetConfig+0xbc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <TIM_Base_SetConfig+0x30>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a25      	ldr	r2, [pc, #148]	@ (8001f7c <TIM_Base_SetConfig+0xc0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d108      	bne.n	8001efe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <TIM_Base_SetConfig+0xb8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00b      	beq.n	8001f1e <TIM_Base_SetConfig+0x62>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f0c:	d007      	beq.n	8001f1e <TIM_Base_SetConfig+0x62>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <TIM_Base_SetConfig+0xbc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d003      	beq.n	8001f1e <TIM_Base_SetConfig+0x62>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <TIM_Base_SetConfig+0xc0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a07      	ldr	r2, [pc, #28]	@ (8001f74 <TIM_Base_SetConfig+0xb8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d103      	bne.n	8001f64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	615a      	str	r2, [r3, #20]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40000800 	.word	0x40000800

08001f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e042      	b.n	800203c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fcf4 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	@ 0x24
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fcab 	bl	8002944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800200c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800201c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b20      	cmp	r3, #32
 800205c:	d121      	bne.n	80020a2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_UART_Transmit_IT+0x26>
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e01a      	b.n	80020a4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2221      	movs	r2, #33	@ 0x21
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800209c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0ba      	sub	sp, #232	@ 0xe8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80020ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_UART_IRQHandler+0x66>
 8002102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fb5a 	bl	80027c8 <UART_Receive_IT>
      return;
 8002114:	e25b      	b.n	80025ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80de 	beq.w	80022dc <HAL_UART_IRQHandler+0x22c>
 8002120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d106      	bne.n	800213a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800212c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002130:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80d1 	beq.w	80022dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_UART_IRQHandler+0xae>
 8002146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_UART_IRQHandler+0xd2>
 800216a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_UART_IRQHandler+0xf6>
 800218e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f043 0204 	orr.w	r2, r3, #4
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d011      	beq.n	80021d6 <HAL_UART_IRQHandler+0x126>
 80021b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f043 0208 	orr.w	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 81f2 	beq.w	80025c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_UART_IRQHandler+0x14e>
 80021ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fae5 	bl	80027c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <HAL_UART_IRQHandler+0x17a>
 8002222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d04f      	beq.n	80022ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f9ef 	bl	800260e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d041      	beq.n	80022c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3314      	adds	r3, #20
 8002244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002248:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002254:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800225c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3314      	adds	r3, #20
 8002266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800226a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800226e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800227a:	e841 2300 	strex	r3, r2, [r1]
 800227e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1d9      	bne.n	800223e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d013      	beq.n	80022ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002296:	4a7e      	ldr	r2, [pc, #504]	@ (8002490 <HAL_UART_IRQHandler+0x3e0>)
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fdd4 	bl	8000e4c <HAL_DMA_Abort_IT>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022b4:	4610      	mov	r0, r2
 80022b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b8:	e00e      	b.n	80022d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f993 	bl	80025e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c0:	e00a      	b.n	80022d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f98f 	bl	80025e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c8:	e006      	b.n	80022d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f98b 	bl	80025e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80022d6:	e175      	b.n	80025c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d8:	bf00      	nop
    return;
 80022da:	e173      	b.n	80025c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 814f 	bne.w	8002584 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8148 	beq.w	8002584 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8141 	beq.w	8002584 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80b6 	beq.w	8002494 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8145 	beq.w	80025c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002346:	429a      	cmp	r2, r3
 8002348:	f080 813e 	bcs.w	80025c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002352:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b20      	cmp	r3, #32
 800235c:	f000 8088 	beq.w	8002470 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800236e:	e853 3f00 	ldrex	r3, [r3]
 8002372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002376:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800237a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800237e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	330c      	adds	r3, #12
 8002388:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800238c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002394:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002398:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800239c:	e841 2300 	strex	r3, r2, [r1]
 80023a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80023a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1d9      	bne.n	8002360 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3314      	adds	r3, #20
 80023b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023b6:	e853 3f00 	ldrex	r3, [r3]
 80023ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80023bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3314      	adds	r3, #20
 80023cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80023d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80023d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023dc:	e841 2300 	strex	r3, r2, [r1]
 80023e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80023e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e1      	bne.n	80023ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3314      	adds	r3, #20
 80023ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023f2:	e853 3f00 	ldrex	r3, [r3]
 80023f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800240c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800240e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002410:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002412:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002414:	e841 2300 	strex	r3, r2, [r1]
 8002418:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800241a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e3      	bne.n	80023e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002438:	e853 3f00 	ldrex	r3, [r3]
 800243c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800243e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002440:	f023 0310 	bic.w	r3, r3, #16
 8002444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002452:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002454:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002458:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800245a:	e841 2300 	strex	r3, r2, [r1]
 800245e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e3      	bne.n	800242e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fcb3 	bl	8000dd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800247e:	b29b      	uxth	r3, r3
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	b29b      	uxth	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8b6 	bl	80025f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800248c:	e09c      	b.n	80025c8 <HAL_UART_IRQHandler+0x518>
 800248e:	bf00      	nop
 8002490:	080026d3 	.word	0x080026d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800249c:	b29b      	uxth	r3, r3
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 808e 	beq.w	80025cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80024b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8089 	beq.w	80025cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	330c      	adds	r3, #12
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80024ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80024de:	647a      	str	r2, [r7, #68]	@ 0x44
 80024e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024e6:	e841 2300 	strex	r3, r2, [r1]
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e3      	bne.n	80024ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3314      	adds	r3, #20
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	e853 3f00 	ldrex	r3, [r3]
 8002500:	623b      	str	r3, [r7, #32]
   return(result);
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3314      	adds	r3, #20
 8002512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002516:	633a      	str	r2, [r7, #48]	@ 0x30
 8002518:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800251c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800251e:	e841 2300 	strex	r3, r2, [r1]
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e3      	bne.n	80024f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	330c      	adds	r3, #12
 800253e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	e853 3f00 	ldrex	r3, [r3]
 8002546:	60fb      	str	r3, [r7, #12]
   return(result);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0310 	bic.w	r3, r3, #16
 800254e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800255c:	61fa      	str	r2, [r7, #28]
 800255e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002560:	69b9      	ldr	r1, [r7, #24]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	e841 2300 	strex	r3, r2, [r1]
 8002568:	617b      	str	r3, [r7, #20]
   return(result);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e3      	bne.n	8002538 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f83b 	bl	80025f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002582:	e023      	b.n	80025cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <HAL_UART_IRQHandler+0x4f4>
 8002590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f8ac 	bl	80026fa <UART_Transmit_IT>
    return;
 80025a2:	e014      	b.n	80025ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <HAL_UART_IRQHandler+0x51e>
 80025b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f8eb 	bl	8002798 <UART_EndTransmit_IT>
    return;
 80025c2:	e004      	b.n	80025ce <HAL_UART_IRQHandler+0x51e>
    return;
 80025c4:	bf00      	nop
 80025c6:	e002      	b.n	80025ce <HAL_UART_IRQHandler+0x51e>
      return;
 80025c8:	bf00      	nop
 80025ca:	e000      	b.n	80025ce <HAL_UART_IRQHandler+0x51e>
      return;
 80025cc:	bf00      	nop
  }
}
 80025ce:	37e8      	adds	r7, #232	@ 0xe8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800260e:	b480      	push	{r7}
 8002610:	b095      	sub	sp, #84	@ 0x54
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	330c      	adds	r3, #12
 800261c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002620:	e853 3f00 	ldrex	r3, [r3]
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800262c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	330c      	adds	r3, #12
 8002634:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002636:	643a      	str	r2, [r7, #64]	@ 0x40
 8002638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800263c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800263e:	e841 2300 	strex	r3, r2, [r1]
 8002642:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1e5      	bne.n	8002616 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3314      	adds	r3, #20
 8002650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	61fb      	str	r3, [r7, #28]
   return(result);
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3314      	adds	r3, #20
 8002668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800266a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002672:	e841 2300 	strex	r3, r2, [r1]
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1e5      	bne.n	800264a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	2b01      	cmp	r3, #1
 8002684:	d119      	bne.n	80026ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	60bb      	str	r3, [r7, #8]
   return(result);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f023 0310 	bic.w	r3, r3, #16
 800269c:	647b      	str	r3, [r7, #68]	@ 0x44
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	330c      	adds	r3, #12
 80026a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026a6:	61ba      	str	r2, [r7, #24]
 80026a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	6979      	ldr	r1, [r7, #20]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	e841 2300 	strex	r3, r2, [r1]
 80026b2:	613b      	str	r3, [r7, #16]
   return(result);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e5      	bne.n	8002686 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026c8:	bf00      	nop
 80026ca:	3754      	adds	r7, #84	@ 0x54
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff ff7a 	bl	80025e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b21      	cmp	r3, #33	@ 0x21
 800270c:	d13e      	bne.n	800278c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002716:	d114      	bne.n	8002742 <UART_Transmit_IT+0x48>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d110      	bne.n	8002742 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002734:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	1c9a      	adds	r2, r3, #2
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	621a      	str	r2, [r3, #32]
 8002740:	e008      	b.n	8002754 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	1c59      	adds	r1, r3, #1
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6211      	str	r1, [r2, #32]
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29b      	uxth	r3, r3
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4619      	mov	r1, r3
 8002762:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10f      	bne.n	8002788 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fd fd09 	bl	80001d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	@ 0x30
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b22      	cmp	r3, #34	@ 0x22
 80027da:	f040 80ae 	bne.w	800293a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e6:	d117      	bne.n	8002818 <UART_Receive_IT+0x50>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d113      	bne.n	8002818 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	b29b      	uxth	r3, r3
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	b29a      	uxth	r2, r3
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	1c9a      	adds	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	629a      	str	r2, [r3, #40]	@ 0x28
 8002816:	e026      	b.n	8002866 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282a:	d007      	beq.n	800283c <UART_Receive_IT+0x74>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <UART_Receive_IT+0x82>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e008      	b.n	800285c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002856:	b2da      	uxtb	r2, r3
 8002858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29b      	uxth	r3, r3
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4619      	mov	r1, r3
 8002874:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002876:	2b00      	cmp	r3, #0
 8002878:	d15d      	bne.n	8002936 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0220 	bic.w	r2, r2, #32
 8002888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d135      	bne.n	800292c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
 80028cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	e853 3f00 	ldrex	r3, [r3]
 80028d4:	613b      	str	r3, [r7, #16]
   return(result);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f023 0310 	bic.w	r3, r3, #16
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e6:	623a      	str	r2, [r7, #32]
 80028e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ea:	69f9      	ldr	r1, [r7, #28]
 80028ec:	6a3a      	ldr	r2, [r7, #32]
 80028ee:	e841 2300 	strex	r3, r2, [r1]
 80028f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e5      	bne.n	80028c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b10      	cmp	r3, #16
 8002906:	d10a      	bne.n	800291e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff fe67 	bl	80025f8 <HAL_UARTEx_RxEventCallback>
 800292a:	e002      	b.n	8002932 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fe51 	bl	80025d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e002      	b.n	800293c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e000      	b.n	800293c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
  }
}
 800293c:	4618      	mov	r0, r3
 800293e:	3730      	adds	r7, #48	@ 0x30
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800297e:	f023 030c 	bic.w	r3, r3, #12
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	430b      	orrs	r3, r1
 800298a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a58 <UART_SetConfig+0x114>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029ac:	f7ff f834 	bl	8001a18 <HAL_RCC_GetPCLK2Freq>
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	e002      	b.n	80029ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029b4:	f7ff f81c 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 80029b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	009a      	lsls	r2, r3, #2
 80029c4:	441a      	add	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <UART_SetConfig+0x118>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	0119      	lsls	r1, r3, #4
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009a      	lsls	r2, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <UART_SetConfig+0x118>)
 80029f2:	fba3 0302 	umull	r0, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2064      	movs	r0, #100	@ 0x64
 80029fa:	fb00 f303 	mul.w	r3, r0, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3332      	adds	r3, #50	@ 0x32
 8002a04:	4a15      	ldr	r2, [pc, #84]	@ (8002a5c <UART_SetConfig+0x118>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a10:	4419      	add	r1, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009a      	lsls	r2, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a28:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <UART_SetConfig+0x118>)
 8002a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2064      	movs	r0, #100	@ 0x64
 8002a32:	fb00 f303 	mul.w	r3, r0, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	3332      	adds	r3, #50	@ 0x32
 8002a3c:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <UART_SetConfig+0x118>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40013800 	.word	0x40013800
 8002a5c:	51eb851f 	.word	0x51eb851f

08002a60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a72:	2b84      	cmp	r3, #132	@ 0x84
 8002a74:	d005      	beq.n	8002a82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3303      	adds	r3, #3
 8002a80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a94:	f3ef 8305 	mrs	r3, IPSR
 8002a98:	607b      	str	r3, [r7, #4]
  return(result);
 8002a9a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ab4:	f001 fa58 	bl	8003f68 <vTaskStartScheduler>
  
  return osOK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	bd80      	pop	{r7, pc}

08002abe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac0:	b089      	sub	sp, #36	@ 0x24
 8002ac2:	af04      	add	r7, sp, #16
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <osThreadCreate+0x54>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01c      	beq.n	8002b12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685c      	ldr	r4, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691e      	ldr	r6, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ffb8 	bl	8002a60 <makeFreeRtosPriority>
 8002af0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002afa:	9202      	str	r2, [sp, #8]
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	9100      	str	r1, [sp, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4632      	mov	r2, r6
 8002b04:	4629      	mov	r1, r5
 8002b06:	4620      	mov	r0, r4
 8002b08:	f001 f878 	bl	8003bfc <xTaskCreateStatic>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e01c      	b.n	8002b4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685c      	ldr	r4, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b1e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff9a 	bl	8002a60 <makeFreeRtosPriority>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	9200      	str	r2, [sp, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	4632      	mov	r2, r6
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f001 f8bc 	bl	8003cba <xTaskCreate>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d001      	beq.n	8002b4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <osDelay+0x16>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	e000      	b.n	8002b6e <osDelay+0x18>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 f9c4 	bl	8003efc <vTaskDelay>
  
  return osOK;
 8002b74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8002b92:	f7ff ff7c 	bl	8002a8e <inHandlerMode>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01c      	beq.n	8002bd6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	f107 0208 	add.w	r2, r7, #8
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	2201      	movs	r2, #1
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f001 ff4d 	bl	8004a4c <xTaskGenericNotifyFromISR>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d002      	beq.n	8002bbe <osSignalSet+0x3e>
      return 0x80000000;
 8002bb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002bbc:	e019      	b.n	8002bf2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <osSignalSet+0x70>
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <osSignalSet+0x7c>)
 8002bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	e00c      	b.n	8002bf0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	f107 0308 	add.w	r3, r7, #8
 8002bdc:	2201      	movs	r2, #1
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f001 fe9e 	bl	8004920 <xTaskGenericNotify>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d002      	beq.n	8002bf0 <osSignalSet+0x70>
    return 0x80000000;
 8002bea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002bee:	e000      	b.n	8002bf2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	e000ed04 	.word	0xe000ed04

08002c00 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1a:	d103      	bne.n	8002c24 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e009      	b.n	8002c38 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <osSignalWait+0x38>
      ticks = 1;
 8002c34:	2301      	movs	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8002c38:	f7ff ff29 	bl	8002a8e <inHandlerMode>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8002c42:	2382      	movs	r3, #130	@ 0x82
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	e01b      	b.n	8002c80 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	1d1a      	adds	r2, r3, #4
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2000      	movs	r0, #0
 8002c54:	f001 fe0a 	bl	800486c <xTaskNotifyWait>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d008      	beq.n	8002c70 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <osSignalWait+0x6a>
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e00a      	b.n	8002c80 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8002c6a:	2340      	movs	r3, #64	@ 0x40
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e007      	b.n	8002c80 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	da02      	bge.n	8002c7c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8002c76:	2386      	movs	r3, #134	@ 0x86
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e001      	b.n	8002c80 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	461c      	mov	r4, r3
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	3724      	adds	r7, #36	@ 0x24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd90      	pop	{r4, r7, pc}

08002c98 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	3303      	adds	r3, #3
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8002cac:	2014      	movs	r0, #20
 8002cae:	f002 f9ef 	bl	8005090 <pvPortMalloc>
 8002cb2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d046      	beq.n	8002d48 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 f9dc 	bl	8005090 <pvPortMalloc>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d02b      	beq.n	8002d3e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 f9cd 	bl	8005090 <pvPortMalloc>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d011      	beq.n	8002d28 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	e008      	b.n	8002d1c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3f1      	bcc.n	8002d0a <osPoolCreate+0x72>
 8002d26:	e00f      	b.n	8002d48 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fa77 	bl	8005220 <vPortFree>
        vPortFree(thePool);
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f002 fa74 	bl	8005220 <vPortFree>
        thePool = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e004      	b.n	8002d48 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f002 fa6e 	bl	8005220 <vPortFree>
      thePool = NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8002d48:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b08a      	sub	sp, #40	@ 0x28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002d62:	f7ff fe94 	bl	8002a8e <inHandlerMode>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d6c:	f3ef 8211 	mrs	r2, BASEPRI
 8002d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	617a      	str	r2, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d84:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d88:	e001      	b.n	8002d8e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002d8a:	f002 f87f 	bl	8004e8c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	e029      	b.n	8002de8 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6892      	ldr	r2, [r2, #8]
 8002da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002da4:	fb01 f202 	mul.w	r2, r1, r2
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d113      	bne.n	8002de2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	611a      	str	r2, [r3, #16]
      break;
 8002de0:	e007      	b.n	8002df2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3d0      	bcc.n	8002d94 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8002df2:	f7ff fe4c 	bl	8002a8e <inHandlerMode>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e06:	e001      	b.n	8002e0c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8002e08:	f002 f870 	bl	8004eec <vPortExitCritical>
  }
  
  return p;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3728      	adds	r7, #40	@ 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <osPoolFree+0x14>
    return osErrorParameter;
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	e030      	b.n	8002e8c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <osPoolFree+0x1e>
    return osErrorParameter;
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	e02b      	b.n	8002e8c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d201      	bcs.n	8002e42 <osPoolFree+0x2c>
    return osErrorParameter;
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	e024      	b.n	8002e8c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e56:	fb01 f202 	mul.w	r2, r1, r2
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <osPoolFree+0x4e>
    return osErrorParameter;
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	e013      	b.n	8002e8c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d301      	bcc.n	8002e7e <osPoolFree+0x68>
    return osErrorParameter;
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	e006      	b.n	8002e8c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002e96:	b590      	push	{r4, r7, lr}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af02      	add	r7, sp, #8
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d011      	beq.n	8002ecc <osMessageCreate+0x36>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2400      	movs	r4, #0
 8002ec2:	9400      	str	r4, [sp, #0]
 8002ec4:	f000 f9cf 	bl	8003266 <xQueueGenericCreateStatic>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	e008      	b.n	8002ede <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f000 fa41 	bl	800335e <xQueueGenericCreate>
 8002edc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}
	...

08002ee8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <osMessagePut+0x1e>
    ticks = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002f06:	f7ff fdc2 	bl	8002a8e <inHandlerMode>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d018      	beq.n	8002f42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002f10:	f107 0210 	add.w	r2, r7, #16
 8002f14:	f107 0108 	add.w	r1, r7, #8
 8002f18:	2300      	movs	r3, #0
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fb68 	bl	80035f0 <xQueueGenericSendFromISR>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <osMessagePut+0x42>
      return osErrorOS;
 8002f26:	23ff      	movs	r3, #255	@ 0xff
 8002f28:	e018      	b.n	8002f5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d014      	beq.n	8002f5a <osMessagePut+0x72>
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <osMessagePut+0x7c>)
 8002f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	e00b      	b.n	8002f5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002f42:	f107 0108 	add.w	r1, r7, #8
 8002f46:	2300      	movs	r3, #0
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fa66 	bl	800341c <xQueueGenericSend>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d001      	beq.n	8002f5a <osMessagePut+0x72>
      return osErrorOS;
 8002f56:	23ff      	movs	r3, #255	@ 0xff
 8002f58:	e000      	b.n	8002f5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b08b      	sub	sp, #44	@ 0x2c
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	617b      	str	r3, [r7, #20]
    return event;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	461c      	mov	r4, r3
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f96:	e054      	b.n	8003042 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d103      	bne.n	8002fb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fae:	e009      	b.n	8002fc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <osMessageGet+0x5c>
      ticks = 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002fc4:	f7ff fd63 	bl	8002a8e <inHandlerMode>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01c      	beq.n	8003008 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002fce:	f107 0220 	add.w	r2, r7, #32
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	68b8      	ldr	r0, [r7, #8]
 8002fdc:	f000 fc7c 	bl	80038d8 <xQueueReceiveFromISR>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d102      	bne.n	8002fec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e001      	b.n	8002ff0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01d      	beq.n	8003032 <osMessageGet+0xca>
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <osMessageGet+0xe4>)
 8002ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	e014      	b.n	8003032 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	3304      	adds	r3, #4
 800300e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	68b8      	ldr	r0, [r7, #8]
 8003014:	f000 fb88 	bl	8003728 <xQueueReceive>
 8003018:	4603      	mov	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800301e:	2310      	movs	r3, #16
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	e006      	b.n	8003032 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <osMessageGet+0xc6>
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <osMessageGet+0xc8>
 800302e:	2340      	movs	r3, #64	@ 0x40
 8003030:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	461c      	mov	r4, r3
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800303e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	372c      	adds	r7, #44	@ 0x2c
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f103 0208 	add.w	r2, r3, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f04f 32ff 	mov.w	r2, #4294967295
 8003068:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 0208 	add.w	r2, r3, #8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f103 0208 	add.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d103      	bne.n	800310c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e00c      	b.n	8003126 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3308      	adds	r3, #8
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e002      	b.n	800311a <vListInsert+0x2e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d2f6      	bcs.n	8003114 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6892      	ldr	r2, [r2, #8]
 8003172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6852      	ldr	r2, [r2, #4]
 800317c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	d103      	bne.n	8003190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <xQueueGenericReset+0x2c>
	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	60bb      	str	r3, [r7, #8]
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	e7fd      	b.n	80031d6 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031da:	f001 fe57 	bl	8004e8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	68f9      	ldr	r1, [r7, #12]
 80031e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	441a      	add	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	3b01      	subs	r3, #1
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	441a      	add	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	22ff      	movs	r2, #255	@ 0xff
 800321e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	22ff      	movs	r2, #255	@ 0xff
 8003226:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00f      	beq.n	8003258 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3310      	adds	r3, #16
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f8b1 	bl	80043a4 <xTaskRemoveFromEventList>
 8003242:	e009      	b.n	8003258 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3310      	adds	r3, #16
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff01 	bl	8003050 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3324      	adds	r3, #36	@ 0x24
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fefc 	bl	8003050 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003258:	f001 fe48 	bl	8004eec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800325c:	2301      	movs	r3, #1
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003266:	b580      	push	{r7, lr}
 8003268:	b08e      	sub	sp, #56	@ 0x38
 800326a:	af02      	add	r7, sp, #8
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	e7fd      	b.n	800328e <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032aa:	bf00      	nop
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <xQueueGenericCreateStatic+0x56>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <xQueueGenericCreateStatic+0x5a>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <xQueueGenericCreateStatic+0x5c>
 80032c0:	2300      	movs	r3, #0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	623b      	str	r3, [r7, #32]
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <xQueueGenericCreateStatic+0x84>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <xQueueGenericCreateStatic+0x88>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueGenericCreateStatic+0x8a>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	61fb      	str	r3, [r7, #28]
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800330c:	2348      	movs	r3, #72	@ 0x48
 800330e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b48      	cmp	r3, #72	@ 0x48
 8003314:	d00b      	beq.n	800332e <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	61bb      	str	r3, [r7, #24]
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	e7fd      	b.n	800332a <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003340:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f844 	bl	80033dc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003356:	4618      	mov	r0, r3
 8003358:	3730      	adds	r7, #48	@ 0x30
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800335e:	b580      	push	{r7, lr}
 8003360:	b08a      	sub	sp, #40	@ 0x28
 8003362:	af02      	add	r7, sp, #8
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	4613      	mov	r3, r2
 800336a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	613b      	str	r3, [r7, #16]
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	e7fd      	b.n	8003386 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	e004      	b.n	80033a0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3348      	adds	r3, #72	@ 0x48
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 fe73 	bl	8005090 <pvPortMalloc>
 80033aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00f      	beq.n	80033d2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3348      	adds	r3, #72	@ 0x48
 80033b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033c0:	79fa      	ldrb	r2, [r7, #7]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f805 	bl	80033dc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80033d2:	69bb      	ldr	r3, [r7, #24]
	}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e002      	b.n	80033fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800340a:	2101      	movs	r1, #1
 800340c:	69b8      	ldr	r0, [r7, #24]
 800340e:	f7ff fece 	bl	80031ae <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08e      	sub	sp, #56	@ 0x38
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <xQueueGenericSend+0x34>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <xQueueGenericSend+0x42>
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <xQueueGenericSend+0x46>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <xQueueGenericSend+0x48>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <xQueueGenericSend+0x64>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d103      	bne.n	800348e <xQueueGenericSend+0x72>
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <xQueueGenericSend+0x76>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <xQueueGenericSend+0x78>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <xQueueGenericSend+0x94>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	623b      	str	r3, [r7, #32]
}
 80034aa:	bf00      	nop
 80034ac:	bf00      	nop
 80034ae:	e7fd      	b.n	80034ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034b0:	f001 f936 	bl	8004720 <xTaskGetSchedulerState>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <xQueueGenericSend+0xa4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <xQueueGenericSend+0xa8>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <xQueueGenericSend+0xaa>
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	61fb      	str	r3, [r7, #28]
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	e7fd      	b.n	80034de <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034e2:	f001 fcd3 	bl	8004e8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <xQueueGenericSend+0xdc>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d112      	bne.n	800351e <xQueueGenericSend+0x102>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034fe:	f000 fa6d 	bl	80039dc <prvCopyDataToQueue>
 8003502:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	3324      	adds	r3, #36	@ 0x24
 8003510:	4618      	mov	r0, r3
 8003512:	f000 ff47 	bl	80043a4 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003516:	f001 fce9 	bl	8004eec <vPortExitCritical>
				return pdPASS;
 800351a:	2301      	movs	r3, #1
 800351c:	e062      	b.n	80035e4 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003524:	f001 fce2 	bl	8004eec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003528:	2300      	movs	r3, #0
 800352a:	e05b      	b.n	80035e4 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800352c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	4618      	mov	r0, r3
 8003538:	f000 ff98 	bl	800446c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003540:	f001 fcd4 	bl	8004eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003544:	f000 fd72 	bl	800402c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003548:	f001 fca0 	bl	8004e8c <vPortEnterCritical>
 800354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003552:	b25b      	sxtb	r3, r3
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d103      	bne.n	8003562 <xQueueGenericSend+0x146>
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003568:	b25b      	sxtb	r3, r3
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d103      	bne.n	8003578 <xQueueGenericSend+0x15c>
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003578:	f001 fcb8 	bl	8004eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800357c:	1d3a      	adds	r2, r7, #4
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f000 ff87 	bl	8004498 <xTaskCheckForTimeOut>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d123      	bne.n	80035d8 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003592:	f000 fb1b 	bl	8003bcc <prvIsQueueFull>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d017      	beq.n	80035cc <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	3310      	adds	r3, #16
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fed7 	bl	8004358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ac:	f000 faa6 	bl	8003afc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035b0:	f000 fd4a 	bl	8004048 <xTaskResumeAll>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d193      	bne.n	80034e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <xQueueGenericSend+0x1d0>)
 80035bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	e78a      	b.n	80034e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ce:	f000 fa95 	bl	8003afc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035d2:	f000 fd39 	bl	8004048 <xTaskResumeAll>
 80035d6:	e784      	b.n	80034e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035da:	f000 fa8f 	bl	8003afc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035de:	f000 fd33 	bl	8004048 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035e2:	2300      	movs	r3, #0
		}
	}
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3738      	adds	r7, #56	@ 0x38
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08e      	sub	sp, #56	@ 0x38
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <xQueueGenericSendFromISR+0x3e>
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <xQueueGenericSendFromISR+0x42>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <xQueueGenericSendFromISR+0x44>
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	623b      	str	r3, [r7, #32]
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	e7fd      	b.n	800364c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d103      	bne.n	800365e <xQueueGenericSendFromISR+0x6e>
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <xQueueGenericSendFromISR+0x72>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <xQueueGenericSendFromISR+0x74>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	61fb      	str	r3, [r7, #28]
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003680:	f001 fcc6 	bl	8005010 <vPortValidateInterruptPriority>
	__asm volatile
 8003684:	f3ef 8211 	mrs	r2, BASEPRI
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	61ba      	str	r2, [r7, #24]
 800369a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800369c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <xQueueGenericSendFromISR+0xc2>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d12c      	bne.n	800370c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036c2:	f000 f98b 	bl	80039dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d112      	bne.n	80036f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d016      	beq.n	8003706 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	3324      	adds	r3, #36	@ 0x24
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fe61 	bl	80043a4 <xTaskRemoveFromEventList>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00e      	beq.n	8003706 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e007      	b.n	8003706 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036fa:	3301      	adds	r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	b25a      	sxtb	r2, r3
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003706:	2301      	movs	r3, #1
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800370a:	e001      	b.n	8003710 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800370c:	2300      	movs	r3, #0
 800370e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003712:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f383 8811 	msr	BASEPRI, r3
}
 800371a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800371e:	4618      	mov	r0, r3
 8003720:	3738      	adds	r7, #56	@ 0x38
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	@ 0x30
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <xQueueReceive+0x32>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	623b      	str	r3, [r7, #32]
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	e7fd      	b.n	8003756 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <xQueueReceive+0x40>
 8003760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <xQueueReceive+0x44>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <xQueueReceive+0x46>
 800376c:	2300      	movs	r3, #0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <xQueueReceive+0x62>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	61fb      	str	r3, [r7, #28]
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	e7fd      	b.n	8003786 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800378a:	f000 ffc9 	bl	8004720 <xTaskGetSchedulerState>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <xQueueReceive+0x72>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <xQueueReceive+0x76>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <xQueueReceive+0x78>
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10b      	bne.n	80037bc <xQueueReceive+0x94>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61bb      	str	r3, [r7, #24]
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80037bc:	f001 fb66 	bl	8004e8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d014      	beq.n	80037f6 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037d0:	f000 f96e 	bl	8003ab0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	1e5a      	subs	r2, r3, #1
 80037d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	3310      	adds	r3, #16
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fddb 	bl	80043a4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037ee:	f001 fb7d 	bl	8004eec <vPortExitCritical>
				return pdPASS;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e069      	b.n	80038ca <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037fc:	f001 fb76 	bl	8004eec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003800:	2300      	movs	r3, #0
 8003802:	e062      	b.n	80038ca <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800380a:	f107 0310 	add.w	r3, r7, #16
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fe2c 	bl	800446c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003818:	f001 fb68 	bl	8004eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800381c:	f000 fc06 	bl	800402c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003820:	f001 fb34 	bl	8004e8c <vPortEnterCritical>
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800382a:	b25b      	sxtb	r3, r3
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d103      	bne.n	800383a <xQueueReceive+0x112>
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003840:	b25b      	sxtb	r3, r3
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d103      	bne.n	8003850 <xQueueReceive+0x128>
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003850:	f001 fb4c 	bl	8004eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003854:	1d3a      	adds	r2, r7, #4
 8003856:	f107 0310 	add.w	r3, r7, #16
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fe1b 	bl	8004498 <xTaskCheckForTimeOut>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d123      	bne.n	80038b0 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800386a:	f000 f999 	bl	8003ba0 <prvIsQueueEmpty>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d017      	beq.n	80038a4 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	3324      	adds	r3, #36	@ 0x24
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fd6b 	bl	8004358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003884:	f000 f93a 	bl	8003afc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003888:	f000 fbde 	bl	8004048 <xTaskResumeAll>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d194      	bne.n	80037bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003892:	4b10      	ldr	r3, [pc, #64]	@ (80038d4 <xQueueReceive+0x1ac>)
 8003894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	e78b      	b.n	80037bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a6:	f000 f929 	bl	8003afc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038aa:	f000 fbcd 	bl	8004048 <xTaskResumeAll>
 80038ae:	e785      	b.n	80037bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b2:	f000 f923 	bl	8003afc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038b6:	f000 fbc7 	bl	8004048 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038bc:	f000 f970 	bl	8003ba0 <prvIsQueueEmpty>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f43f af7a 	beq.w	80037bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3730      	adds	r7, #48	@ 0x30
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	@ 0x38
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	623b      	str	r3, [r7, #32]
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	e7fd      	b.n	8003902 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <xQueueReceiveFromISR+0x3c>
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <xQueueReceiveFromISR+0x40>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <xQueueReceiveFromISR+0x42>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	61fb      	str	r3, [r7, #28]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003936:	f001 fb6b 	bl	8005010 <vPortValidateInterruptPriority>
	__asm volatile
 800393a:	f3ef 8211 	mrs	r2, BASEPRI
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	61ba      	str	r2, [r7, #24]
 8003950:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003952:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003954:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02f      	beq.n	80039c2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003970:	f000 f89e 	bl	8003ab0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	1e5a      	subs	r2, r3, #1
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800397c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d112      	bne.n	80039ac <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003990:	3310      	adds	r3, #16
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fd06 	bl	80043a4 <xTaskRemoveFromEventList>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e007      	b.n	80039bc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80039ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039b0:	3301      	adds	r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	b25a      	sxtb	r2, r3
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80039bc:	2301      	movs	r3, #1
 80039be:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c0:	e001      	b.n	80039c6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f383 8811 	msr	BASEPRI, r3
}
 80039d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3738      	adds	r7, #56	@ 0x38
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10d      	bne.n	8003a16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d14d      	bne.n	8003a9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fea8 	bl	800475c <xTaskPriorityDisinherit>
 8003a0c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	e043      	b.n	8003a9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d119      	bne.n	8003a50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6898      	ldr	r0, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	461a      	mov	r2, r3
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	f001 fd64 	bl	80054f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	441a      	add	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d32b      	bcc.n	8003a9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	e026      	b.n	8003a9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68d8      	ldr	r0, [r3, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	f001 fd4a 	bl	80054f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	425b      	negs	r3, r3
 8003a6a:	441a      	add	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d207      	bcs.n	8003a8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	425b      	negs	r3, r3
 8003a86:	441a      	add	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d105      	bne.n	8003a9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003aa6:	697b      	ldr	r3, [r7, #20]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	441a      	add	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d303      	bcc.n	8003ae4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	461a      	mov	r2, r3
 8003aee:	6838      	ldr	r0, [r7, #0]
 8003af0:	f001 fd00 	bl	80054f4 <memcpy>
	}
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b04:	f001 f9c2 	bl	8004e8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b10:	e011      	b.n	8003b36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3324      	adds	r3, #36	@ 0x24
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fc40 	bl	80043a4 <xTaskRemoveFromEventList>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b2a:	f000 fd19 	bl	8004560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	dce9      	bgt.n	8003b12 <prvUnlockQueue+0x16>
 8003b3e:	e000      	b.n	8003b42 <prvUnlockQueue+0x46>
					break;
 8003b40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	22ff      	movs	r2, #255	@ 0xff
 8003b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b4a:	f001 f9cf 	bl	8004eec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b4e:	f001 f99d 	bl	8004e8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b5a:	e011      	b.n	8003b80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3310      	adds	r3, #16
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fc1b 	bl	80043a4 <xTaskRemoveFromEventList>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b74:	f000 fcf4 	bl	8004560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b78:	7bbb      	ldrb	r3, [r7, #14]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dce9      	bgt.n	8003b5c <prvUnlockQueue+0x60>
 8003b88:	e000      	b.n	8003b8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	22ff      	movs	r2, #255	@ 0xff
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b94:	f001 f9aa 	bl	8004eec <vPortExitCritical>
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ba8:	f001 f970 	bl	8004e8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e001      	b.n	8003bbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bbe:	f001 f995 	bl	8004eec <vPortExitCritical>

	return xReturn;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bd4:	f001 f95a 	bl	8004e8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d102      	bne.n	8003bea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e001      	b.n	8003bee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bee:	f001 f97d 	bl	8004eec <vPortExitCritical>

	return xReturn;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08e      	sub	sp, #56	@ 0x38
 8003c00:	af04      	add	r7, sp, #16
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	623b      	str	r3, [r7, #32]
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	e7fd      	b.n	8003c24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	61fb      	str	r3, [r7, #28]
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	e7fd      	b.n	8003c42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c46:	2354      	movs	r3, #84	@ 0x54
 8003c48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b54      	cmp	r3, #84	@ 0x54
 8003c4e:	d00b      	beq.n	8003c68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	61bb      	str	r3, [r7, #24]
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01e      	beq.n	8003cac <xTaskCreateStatic+0xb0>
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c86:	2300      	movs	r3, #0
 8003c88:	9303      	str	r3, [sp, #12]
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	9302      	str	r3, [sp, #8]
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f850 	bl	8003d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ca6:	f000 f8cd 	bl	8003e44 <prvAddNewTaskToReadyList>
 8003caa:	e001      	b.n	8003cb0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cb0:	697b      	ldr	r3, [r7, #20]
	}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3728      	adds	r7, #40	@ 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08c      	sub	sp, #48	@ 0x30
 8003cbe:	af04      	add	r7, sp, #16
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 f9de 	bl	8005090 <pvPortMalloc>
 8003cd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003cdc:	2054      	movs	r0, #84	@ 0x54
 8003cde:	f001 f9d7 	bl	8005090 <pvPortMalloc>
 8003ce2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cf0:	e005      	b.n	8003cfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	f001 fa94 	bl	8005220 <vPortFree>
 8003cf8:	e001      	b.n	8003cfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d017      	beq.n	8003d34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	9302      	str	r3, [sp, #8]
 8003d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f80e 	bl	8003d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d28:	69f8      	ldr	r0, [r7, #28]
 8003d2a:	f000 f88b 	bl	8003e44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e002      	b.n	8003d3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f023 0307 	bic.w	r3, r3, #7
 8003d6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	617b      	str	r3, [r7, #20]
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	e7fd      	b.n	8003d8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	e012      	b.n	8003dba <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	7819      	ldrb	r1, [r3, #0]
 8003d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	4413      	add	r3, r2
 8003da2:	3334      	adds	r3, #52	@ 0x34
 8003da4:	460a      	mov	r2, r1
 8003da6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b0f      	cmp	r3, #15
 8003dbe:	d9e9      	bls.n	8003d94 <prvInitialiseNewTask+0x50>
 8003dc0:	e000      	b.n	8003dc4 <prvInitialiseNewTask+0x80>
		{
			break;
 8003dc2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d901      	bls.n	8003dd6 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dda:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003de0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	2200      	movs	r2, #0
 8003de6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff f94e 	bl	800308e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	3318      	adds	r3, #24
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f949 	bl	800308e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	f1c3 0207 	rsb	r2, r3, #7
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	2200      	movs	r2, #0
 8003e16:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	69b8      	ldr	r0, [r7, #24]
 8003e26:	f000 ff43 	bl	8004cb0 <pxPortInitialiseStack>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e3c:	bf00      	nop
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e4c:	f001 f81e 	bl	8004e8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e50:	4b24      	ldr	r3, [pc, #144]	@ (8003ee4 <prvAddNewTaskToReadyList+0xa0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	4a23      	ldr	r2, [pc, #140]	@ (8003ee4 <prvAddNewTaskToReadyList+0xa0>)
 8003e58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ee8 <prvAddNewTaskToReadyList+0xa4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e62:	4a21      	ldr	r2, [pc, #132]	@ (8003ee8 <prvAddNewTaskToReadyList+0xa4>)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e68:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee4 <prvAddNewTaskToReadyList+0xa0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d110      	bne.n	8003e92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e70:	f000 fb94 	bl	800459c <prvInitialiseTaskLists>
 8003e74:	e00d      	b.n	8003e92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e76:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <prvAddNewTaskToReadyList+0xa8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee8 <prvAddNewTaskToReadyList+0xa4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d802      	bhi.n	8003e92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e8c:	4a16      	ldr	r2, [pc, #88]	@ (8003ee8 <prvAddNewTaskToReadyList+0xa4>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e92:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <prvAddNewTaskToReadyList+0xac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3301      	adds	r3, #1
 8003e98:	4a15      	ldr	r2, [pc, #84]	@ (8003ef0 <prvAddNewTaskToReadyList+0xac>)
 8003e9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <prvAddNewTaskToReadyList+0xb0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	4a12      	ldr	r2, [pc, #72]	@ (8003ef4 <prvAddNewTaskToReadyList+0xb0>)
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4a0f      	ldr	r2, [pc, #60]	@ (8003ef8 <prvAddNewTaskToReadyList+0xb4>)
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7ff f8ee 	bl	80030a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003eca:	f001 f80f 	bl	8004eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ece:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <prvAddNewTaskToReadyList+0xa8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ed6:	4b04      	ldr	r3, [pc, #16]	@ (8003ee8 <prvAddNewTaskToReadyList+0xa4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200005ac 	.word	0x200005ac
 8003ee8:	200004ac 	.word	0x200004ac
 8003eec:	200005b8 	.word	0x200005b8
 8003ef0:	200005c8 	.word	0x200005c8
 8003ef4:	200005b4 	.word	0x200005b4
 8003ef8:	200004b0 	.word	0x200004b0

08003efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d018      	beq.n	8003f40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <vTaskDelay+0x64>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <vTaskDelay+0x32>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60bb      	str	r3, [r7, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	e7fd      	b.n	8003f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f2e:	f000 f87d 	bl	800402c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f32:	2100      	movs	r1, #0
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fe55 	bl	8004be4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f3a:	f000 f885 	bl	8004048 <xTaskResumeAll>
 8003f3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f46:	4b07      	ldr	r3, [pc, #28]	@ (8003f64 <vTaskDelay+0x68>)
 8003f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200005d4 	.word	0x200005d4
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	@ 0x28
 8003f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f76:	463a      	mov	r2, r7
 8003f78:	1d39      	adds	r1, r7, #4
 8003f7a:	f107 0308 	add.w	r3, r7, #8
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc f9d8 	bl	8000334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	9202      	str	r2, [sp, #8]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2300      	movs	r3, #0
 8003f94:	460a      	mov	r2, r1
 8003f96:	491f      	ldr	r1, [pc, #124]	@ (8004014 <vTaskStartScheduler+0xac>)
 8003f98:	481f      	ldr	r0, [pc, #124]	@ (8004018 <vTaskStartScheduler+0xb0>)
 8003f9a:	f7ff fe2f 	bl	8003bfc <xTaskCreateStatic>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800401c <vTaskStartScheduler+0xb4>)
 8003fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <vTaskStartScheduler+0xb4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fac:	2301      	movs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e001      	b.n	8003fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d116      	bne.n	8003fea <vTaskStartScheduler+0x82>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	613b      	str	r3, [r7, #16]
}
 8003fce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fd0:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <vTaskStartScheduler+0xb8>)
 8003fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fd8:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <vTaskStartScheduler+0xbc>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003fde:	4b12      	ldr	r3, [pc, #72]	@ (8004028 <vTaskStartScheduler+0xc0>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fe4:	f000 fee0 	bl	8004da8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fe8:	e00f      	b.n	800400a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d10b      	bne.n	800400a <vTaskStartScheduler+0xa2>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	60fb      	str	r3, [r7, #12]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <vTaskStartScheduler+0x9e>
}
 800400a:	bf00      	nop
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	08005eec 	.word	0x08005eec
 8004018:	08004579 	.word	0x08004579
 800401c:	200005d0 	.word	0x200005d0
 8004020:	200005cc 	.word	0x200005cc
 8004024:	200005b8 	.word	0x200005b8
 8004028:	200005b0 	.word	0x200005b0

0800402c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004030:	4b04      	ldr	r3, [pc, #16]	@ (8004044 <vTaskSuspendAll+0x18>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	4a03      	ldr	r2, [pc, #12]	@ (8004044 <vTaskSuspendAll+0x18>)
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	200005d4 	.word	0x200005d4

08004048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004056:	4b3c      	ldr	r3, [pc, #240]	@ (8004148 <xTaskResumeAll+0x100>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <xTaskResumeAll+0x2e>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	603b      	str	r3, [r7, #0]
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004076:	f000 ff09 	bl	8004e8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800407a:	4b33      	ldr	r3, [pc, #204]	@ (8004148 <xTaskResumeAll+0x100>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3b01      	subs	r3, #1
 8004080:	4a31      	ldr	r2, [pc, #196]	@ (8004148 <xTaskResumeAll+0x100>)
 8004082:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004084:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <xTaskResumeAll+0x100>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d155      	bne.n	8004138 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800408c:	4b2f      	ldr	r3, [pc, #188]	@ (800414c <xTaskResumeAll+0x104>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d051      	beq.n	8004138 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004094:	e02e      	b.n	80040f4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004096:	4b2e      	ldr	r3, [pc, #184]	@ (8004150 <xTaskResumeAll+0x108>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3318      	adds	r3, #24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff f85a 	bl	800315c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff f855 	bl	800315c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	2201      	movs	r2, #1
 80040b8:	409a      	lsls	r2, r3
 80040ba:	4b26      	ldr	r3, [pc, #152]	@ (8004154 <xTaskResumeAll+0x10c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <xTaskResumeAll+0x10c>)
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4a21      	ldr	r2, [pc, #132]	@ (8004158 <xTaskResumeAll+0x110>)
 80040d2:	441a      	add	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f7fe ffe3 	bl	80030a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e4:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <xTaskResumeAll+0x114>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80040ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004160 <xTaskResumeAll+0x118>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f4:	4b16      	ldr	r3, [pc, #88]	@ (8004150 <xTaskResumeAll+0x108>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1cc      	bne.n	8004096 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004102:	f000 fae9 	bl	80046d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004106:	4b17      	ldr	r3, [pc, #92]	@ (8004164 <xTaskResumeAll+0x11c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d010      	beq.n	8004134 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004112:	f000 f829 	bl	8004168 <xTaskIncrementTick>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800411c:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <xTaskResumeAll+0x118>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3b01      	subs	r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f1      	bne.n	8004112 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <xTaskResumeAll+0x11c>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004134:	4b0a      	ldr	r3, [pc, #40]	@ (8004160 <xTaskResumeAll+0x118>)
 8004136:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004138:	f000 fed8 	bl	8004eec <vPortExitCritical>

	return xAlreadyYielded;
 800413c:	687b      	ldr	r3, [r7, #4]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200005d4 	.word	0x200005d4
 800414c:	200005ac 	.word	0x200005ac
 8004150:	2000056c 	.word	0x2000056c
 8004154:	200005b4 	.word	0x200005b4
 8004158:	200004b0 	.word	0x200004b0
 800415c:	200004ac 	.word	0x200004ac
 8004160:	200005c0 	.word	0x200005c0
 8004164:	200005bc 	.word	0x200005bc

08004168 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004172:	4b42      	ldr	r3, [pc, #264]	@ (800427c <xTaskIncrementTick+0x114>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d175      	bne.n	8004266 <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800417a:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <xTaskIncrementTick+0x118>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004182:	4a3f      	ldr	r2, [pc, #252]	@ (8004280 <xTaskIncrementTick+0x118>)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d121      	bne.n	80041d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800418e:	4b3d      	ldr	r3, [pc, #244]	@ (8004284 <xTaskIncrementTick+0x11c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00b      	beq.n	80041b0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	603b      	str	r3, [r7, #0]
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	e7fd      	b.n	80041ac <xTaskIncrementTick+0x44>
 80041b0:	4b34      	ldr	r3, [pc, #208]	@ (8004284 <xTaskIncrementTick+0x11c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	4b34      	ldr	r3, [pc, #208]	@ (8004288 <xTaskIncrementTick+0x120>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a32      	ldr	r2, [pc, #200]	@ (8004284 <xTaskIncrementTick+0x11c>)
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4a32      	ldr	r2, [pc, #200]	@ (8004288 <xTaskIncrementTick+0x120>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4b31      	ldr	r3, [pc, #196]	@ (800428c <xTaskIncrementTick+0x124>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	4a30      	ldr	r2, [pc, #192]	@ (800428c <xTaskIncrementTick+0x124>)
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	f000 fa83 	bl	80046d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <xTaskIncrementTick+0x128>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d349      	bcc.n	8004270 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041dc:	4b29      	ldr	r3, [pc, #164]	@ (8004284 <xTaskIncrementTick+0x11c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <xTaskIncrementTick+0x82>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xTaskIncrementTick+0x84>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f0:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <xTaskIncrementTick+0x128>)
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	601a      	str	r2, [r3, #0]
					break;
 80041f8:	e03a      	b.n	8004270 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041fa:	4b22      	ldr	r3, [pc, #136]	@ (8004284 <xTaskIncrementTick+0x11c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d203      	bcs.n	800421a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004212:	4a1f      	ldr	r2, [pc, #124]	@ (8004290 <xTaskIncrementTick+0x128>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6013      	str	r3, [r2, #0]
						break;
 8004218:	e02a      	b.n	8004270 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	3304      	adds	r3, #4
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe ff9c 	bl	800315c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	3318      	adds	r3, #24
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe ff93 	bl	800315c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <xTaskIncrementTick+0x12c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4313      	orrs	r3, r2
 8004244:	4a13      	ldr	r2, [pc, #76]	@ (8004294 <xTaskIncrementTick+0x12c>)
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4a10      	ldr	r2, [pc, #64]	@ (8004298 <xTaskIncrementTick+0x130>)
 8004256:	441a      	add	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7fe ff21 	bl	80030a6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004264:	e7ba      	b.n	80041dc <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <xTaskIncrementTick+0x134>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3301      	adds	r3, #1
 800426c:	4a0b      	ldr	r2, [pc, #44]	@ (800429c <xTaskIncrementTick+0x134>)
 800426e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004270:	697b      	ldr	r3, [r7, #20]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	200005d4 	.word	0x200005d4
 8004280:	200005b0 	.word	0x200005b0
 8004284:	20000564 	.word	0x20000564
 8004288:	20000568 	.word	0x20000568
 800428c:	200005c4 	.word	0x200005c4
 8004290:	200005cc 	.word	0x200005cc
 8004294:	200005b4 	.word	0x200005b4
 8004298:	200004b0 	.word	0x200004b0
 800429c:	200005bc 	.word	0x200005bc

080042a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042a6:	4b27      	ldr	r3, [pc, #156]	@ (8004344 <vTaskSwitchContext+0xa4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042ae:	4b26      	ldr	r3, [pc, #152]	@ (8004348 <vTaskSwitchContext+0xa8>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042b4:	e040      	b.n	8004338 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80042b6:	4b24      	ldr	r3, [pc, #144]	@ (8004348 <vTaskSwitchContext+0xa8>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80042bc:	4b23      	ldr	r3, [pc, #140]	@ (800434c <vTaskSwitchContext+0xac>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	fab3 f383 	clz	r3, r3
 80042c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	f1c3 031f 	rsb	r3, r3, #31
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	491f      	ldr	r1, [pc, #124]	@ (8004350 <vTaskSwitchContext+0xb0>)
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <vTaskSwitchContext+0x5e>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	607b      	str	r3, [r7, #4]
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <vTaskSwitchContext+0x5a>
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <vTaskSwitchContext+0xb0>)
 800430a:	4413      	add	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	3308      	adds	r3, #8
 8004320:	429a      	cmp	r2, r3
 8004322:	d104      	bne.n	800432e <vTaskSwitchContext+0x8e>
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a07      	ldr	r2, [pc, #28]	@ (8004354 <vTaskSwitchContext+0xb4>)
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	200005d4 	.word	0x200005d4
 8004348:	200005c0 	.word	0x200005c0
 800434c:	200005b4 	.word	0x200005b4
 8004350:	200004b0 	.word	0x200004b0
 8004354:	200004ac 	.word	0x200004ac

08004358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	60fb      	str	r3, [r7, #12]
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004380:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <vTaskPlaceOnEventList+0x48>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3318      	adds	r3, #24
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fe feaf 	bl	80030ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800438e:	2101      	movs	r1, #1
 8004390:	6838      	ldr	r0, [r7, #0]
 8004392:	f000 fc27 	bl	8004be4 <prvAddCurrentTaskToDelayedList>
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200004ac 	.word	0x200004ac

080043a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	60fb      	str	r3, [r7, #12]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3318      	adds	r3, #24
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe fec0 	bl	800315c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <xTaskRemoveFromEventList+0xb0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11c      	bne.n	800441e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe feb7 	bl	800315c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f2:	2201      	movs	r2, #1
 80043f4:	409a      	lsls	r2, r3
 80043f6:	4b18      	ldr	r3, [pc, #96]	@ (8004458 <xTaskRemoveFromEventList+0xb4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	4a16      	ldr	r2, [pc, #88]	@ (8004458 <xTaskRemoveFromEventList+0xb4>)
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4a13      	ldr	r2, [pc, #76]	@ (800445c <xTaskRemoveFromEventList+0xb8>)
 800440e:	441a      	add	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	3304      	adds	r3, #4
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f7fe fe45 	bl	80030a6 <vListInsertEnd>
 800441c:	e005      	b.n	800442a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	3318      	adds	r3, #24
 8004422:	4619      	mov	r1, r3
 8004424:	480e      	ldr	r0, [pc, #56]	@ (8004460 <xTaskRemoveFromEventList+0xbc>)
 8004426:	f7fe fe3e 	bl	80030a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <xTaskRemoveFromEventList+0xc0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	429a      	cmp	r2, r3
 8004436:	d905      	bls.n	8004444 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800443c:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <xTaskRemoveFromEventList+0xc4>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e001      	b.n	8004448 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004448:	697b      	ldr	r3, [r7, #20]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200005d4 	.word	0x200005d4
 8004458:	200005b4 	.word	0x200005b4
 800445c:	200004b0 	.word	0x200004b0
 8004460:	2000056c 	.word	0x2000056c
 8004464:	200004ac 	.word	0x200004ac
 8004468:	200005c0 	.word	0x200005c0

0800446c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <vTaskInternalSetTimeOutState+0x24>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <vTaskInternalSetTimeOutState+0x28>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	605a      	str	r2, [r3, #4]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	200005c4 	.word	0x200005c4
 8004494:	200005b0 	.word	0x200005b0

08004498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	613b      	str	r3, [r7, #16]
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	e7fd      	b.n	80044bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60fb      	str	r3, [r7, #12]
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80044de:	f000 fcd5 	bl	8004e8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <xTaskCheckForTimeOut+0xc0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d102      	bne.n	8004502 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e023      	b.n	800454a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <xTaskCheckForTimeOut+0xc4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d007      	beq.n	800451e <xTaskCheckForTimeOut+0x86>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004518:	2301      	movs	r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e015      	b.n	800454a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	d20b      	bcs.n	8004540 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff99 	bl	800446c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	e004      	b.n	800454a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800454a:	f000 fccf 	bl	8004eec <vPortExitCritical>

	return xReturn;
 800454e:	69fb      	ldr	r3, [r7, #28]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	200005b0 	.word	0x200005b0
 800455c:	200005c4 	.word	0x200005c4

08004560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <vTaskMissedYield+0x14>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	200005c0 	.word	0x200005c0

08004578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004580:	f000 f84c 	bl	800461c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8004584:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <prvIdleTask+0x20>)
 8004586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004594:	bf00      	nop
 8004596:	e7f3      	b.n	8004580 <prvIdleTask+0x8>
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	e00c      	b.n	80045c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <prvInitialiseTaskLists+0x60>)
 80045b4:	4413      	add	r3, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fd4a 	bl	8003050 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3301      	adds	r3, #1
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b06      	cmp	r3, #6
 80045c6:	d9ef      	bls.n	80045a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045c8:	480d      	ldr	r0, [pc, #52]	@ (8004600 <prvInitialiseTaskLists+0x64>)
 80045ca:	f7fe fd41 	bl	8003050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045ce:	480d      	ldr	r0, [pc, #52]	@ (8004604 <prvInitialiseTaskLists+0x68>)
 80045d0:	f7fe fd3e 	bl	8003050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045d4:	480c      	ldr	r0, [pc, #48]	@ (8004608 <prvInitialiseTaskLists+0x6c>)
 80045d6:	f7fe fd3b 	bl	8003050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045da:	480c      	ldr	r0, [pc, #48]	@ (800460c <prvInitialiseTaskLists+0x70>)
 80045dc:	f7fe fd38 	bl	8003050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045e0:	480b      	ldr	r0, [pc, #44]	@ (8004610 <prvInitialiseTaskLists+0x74>)
 80045e2:	f7fe fd35 	bl	8003050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <prvInitialiseTaskLists+0x78>)
 80045e8:	4a05      	ldr	r2, [pc, #20]	@ (8004600 <prvInitialiseTaskLists+0x64>)
 80045ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <prvInitialiseTaskLists+0x7c>)
 80045ee:	4a05      	ldr	r2, [pc, #20]	@ (8004604 <prvInitialiseTaskLists+0x68>)
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	200004b0 	.word	0x200004b0
 8004600:	2000053c 	.word	0x2000053c
 8004604:	20000550 	.word	0x20000550
 8004608:	2000056c 	.word	0x2000056c
 800460c:	20000580 	.word	0x20000580
 8004610:	20000598 	.word	0x20000598
 8004614:	20000564 	.word	0x20000564
 8004618:	20000568 	.word	0x20000568

0800461c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004622:	e019      	b.n	8004658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004624:	f000 fc32 	bl	8004e8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004628:	4b10      	ldr	r3, [pc, #64]	@ (800466c <prvCheckTasksWaitingTermination+0x50>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fd91 	bl	800315c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <prvCheckTasksWaitingTermination+0x54>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3b01      	subs	r3, #1
 8004640:	4a0b      	ldr	r2, [pc, #44]	@ (8004670 <prvCheckTasksWaitingTermination+0x54>)
 8004642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <prvCheckTasksWaitingTermination+0x58>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3b01      	subs	r3, #1
 800464a:	4a0a      	ldr	r2, [pc, #40]	@ (8004674 <prvCheckTasksWaitingTermination+0x58>)
 800464c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800464e:	f000 fc4d 	bl	8004eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f810 	bl	8004678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004658:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <prvCheckTasksWaitingTermination+0x58>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e1      	bne.n	8004624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000580 	.word	0x20000580
 8004670:	200005ac 	.word	0x200005ac
 8004674:	20000594 	.word	0x20000594

08004678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004686:	2b00      	cmp	r3, #0
 8004688:	d108      	bne.n	800469c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fdc6 	bl	8005220 <vPortFree>
				vPortFree( pxTCB );
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fdc3 	bl	8005220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800469a:	e019      	b.n	80046d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d103      	bne.n	80046ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fdba 	bl	8005220 <vPortFree>
	}
 80046ac:	e010      	b.n	80046d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d00b      	beq.n	80046d0 <prvDeleteTCB+0x58>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <prvDeleteTCB+0x54>
	}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046de:	4b0e      	ldr	r3, [pc, #56]	@ (8004718 <prvResetNextTaskUnblockTime+0x40>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <prvResetNextTaskUnblockTime+0x14>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <prvResetNextTaskUnblockTime+0x16>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046f2:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <prvResetNextTaskUnblockTime+0x44>)
 80046f4:	f04f 32ff 	mov.w	r2, #4294967295
 80046f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046fa:	e008      	b.n	800470e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046fc:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <prvResetNextTaskUnblockTime+0x40>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a04      	ldr	r2, [pc, #16]	@ (800471c <prvResetNextTaskUnblockTime+0x44>)
 800470c:	6013      	str	r3, [r2, #0]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	20000564 	.word	0x20000564
 800471c:	200005cc 	.word	0x200005cc

08004720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004726:	4b0b      	ldr	r3, [pc, #44]	@ (8004754 <xTaskGetSchedulerState+0x34>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800472e:	2301      	movs	r3, #1
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	e008      	b.n	8004746 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004734:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <xTaskGetSchedulerState+0x38>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800473c:	2302      	movs	r3, #2
 800473e:	607b      	str	r3, [r7, #4]
 8004740:	e001      	b.n	8004746 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004746:	687b      	ldr	r3, [r7, #4]
	}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	200005b8 	.word	0x200005b8
 8004758:	200005d4 	.word	0x200005d4

0800475c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d070      	beq.n	8004854 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004772:	4b3b      	ldr	r3, [pc, #236]	@ (8004860 <xTaskPriorityDisinherit+0x104>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	429a      	cmp	r2, r3
 800477a:	d00b      	beq.n	8004794 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60fb      	str	r3, [r7, #12]
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	60bb      	str	r3, [r7, #8]
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d044      	beq.n	8004854 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d140      	bne.n	8004854 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe fcc0 	bl	800315c <uxListRemove>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d115      	bne.n	800480e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e6:	491f      	ldr	r1, [pc, #124]	@ (8004864 <xTaskPriorityDisinherit+0x108>)
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <xTaskPriorityDisinherit+0xb2>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	2201      	movs	r2, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43da      	mvns	r2, r3
 8004804:	4b18      	ldr	r3, [pc, #96]	@ (8004868 <xTaskPriorityDisinherit+0x10c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4013      	ands	r3, r2
 800480a:	4a17      	ldr	r2, [pc, #92]	@ (8004868 <xTaskPriorityDisinherit+0x10c>)
 800480c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	f1c3 0207 	rsb	r2, r3, #7
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	2201      	movs	r2, #1
 8004828:	409a      	lsls	r2, r3
 800482a:	4b0f      	ldr	r3, [pc, #60]	@ (8004868 <xTaskPriorityDisinherit+0x10c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	4a0d      	ldr	r2, [pc, #52]	@ (8004868 <xTaskPriorityDisinherit+0x10c>)
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4a08      	ldr	r2, [pc, #32]	@ (8004864 <xTaskPriorityDisinherit+0x108>)
 8004842:	441a      	add	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f7fe fc2b 	bl	80030a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004854:	697b      	ldr	r3, [r7, #20]
	}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	200004ac 	.word	0x200004ac
 8004864:	200004b0 	.word	0x200004b0
 8004868:	200005b4 	.word	0x200005b4

0800486c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800487a:	f000 fb07 	bl	8004e8c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800487e:	4b26      	ldr	r3, [pc, #152]	@ (8004918 <xTaskNotifyWait+0xac>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d01a      	beq.n	80048c2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800488c:	4b22      	ldr	r3, [pc, #136]	@ (8004918 <xTaskNotifyWait+0xac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	43d2      	mvns	r2, r2
 8004896:	400a      	ands	r2, r1
 8004898:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800489a:	4b1f      	ldr	r3, [pc, #124]	@ (8004918 <xTaskNotifyWait+0xac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048aa:	2101      	movs	r1, #1
 80048ac:	6838      	ldr	r0, [r7, #0]
 80048ae:	f000 f999 	bl	8004be4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80048b2:	4b1a      	ldr	r3, [pc, #104]	@ (800491c <xTaskNotifyWait+0xb0>)
 80048b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80048c2:	f000 fb13 	bl	8004eec <vPortExitCritical>

		taskENTER_CRITICAL();
 80048c6:	f000 fae1 	bl	8004e8c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80048d0:	4b11      	ldr	r3, [pc, #68]	@ (8004918 <xTaskNotifyWait+0xac>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80048da:	4b0f      	ldr	r3, [pc, #60]	@ (8004918 <xTaskNotifyWait+0xac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d002      	beq.n	80048ee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e008      	b.n	8004900 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <xTaskNotifyWait+0xac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	43d2      	mvns	r2, r2
 80048f8:	400a      	ands	r2, r1
 80048fa:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <xTaskNotifyWait+0xac>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800490a:	f000 faef 	bl	8004eec <vPortExitCritical>

		return xReturn;
 800490e:	697b      	ldr	r3, [r7, #20]
	}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200004ac 	.word	0x200004ac
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	@ 0x28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004930:	2301      	movs	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <xTaskGenericNotify+0x32>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61bb      	str	r3, [r7, #24]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004956:	f000 fa99 	bl	8004e8c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800496e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d827      	bhi.n	80049ce <xTaskGenericNotify+0xae>
 800497e:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <xTaskGenericNotify+0x64>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049cf 	.word	0x080049cf
 8004988:	08004999 	.word	0x08004999
 800498c:	080049a7 	.word	0x080049a7
 8004990:	080049b3 	.word	0x080049b3
 8004994:	080049bb 	.word	0x080049bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	431a      	orrs	r2, r3
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80049a4:	e013      	b.n	80049ce <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80049b0:	e00d      	b.n	80049ce <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80049b8:	e009      	b.n	80049ce <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80049ba:	7ffb      	ldrb	r3, [r7, #31]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d003      	beq.n	80049c8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80049c6:	e001      	b.n	80049cc <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80049cc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80049ce:	7ffb      	ldrb	r3, [r7, #31]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d12d      	bne.n	8004a30 <xTaskGenericNotify+0x110>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fbbf 	bl	800315c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	2201      	movs	r2, #1
 80049e4:	409a      	lsls	r2, r3
 80049e6:	4b16      	ldr	r3, [pc, #88]	@ (8004a40 <xTaskGenericNotify+0x120>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	4a14      	ldr	r2, [pc, #80]	@ (8004a40 <xTaskGenericNotify+0x120>)
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4a11      	ldr	r2, [pc, #68]	@ (8004a44 <xTaskGenericNotify+0x124>)
 80049fe:	441a      	add	r2, r3
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f7fe fb4d 	bl	80030a6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <xTaskGenericNotify+0x10c>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	617b      	str	r3, [r7, #20]
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a2c:	4b06      	ldr	r3, [pc, #24]	@ (8004a48 <xTaskGenericNotify+0x128>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004a30:	f000 fa5c 	bl	8004eec <vPortExitCritical>

		return xReturn;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3728      	adds	r7, #40	@ 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	200005b4 	.word	0x200005b4
 8004a44:	200004b0 	.word	0x200004b0
 8004a48:	200004ac 	.word	0x200004ac

08004a4c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08e      	sub	sp, #56	@ 0x38
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a7e:	f000 fac7 	bl	8005010 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8004a86:	f3ef 8211 	mrs	r2, BASEPRI
 8004a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	623a      	str	r2, [r7, #32]
 8004a9c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004a9e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	2202      	movs	r2, #2
 8004abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d829      	bhi.n	8004b1c <xTaskGenericNotifyFromISR+0xd0>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <xTaskGenericNotifyFromISR+0x84>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b1d 	.word	0x08004b1d
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004af3 	.word	0x08004af3
 8004adc:	08004aff 	.word	0x08004aff
 8004ae0:	08004b07 	.word	0x08004b07
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004af0:	e014      	b.n	8004b1c <xTaskGenericNotifyFromISR+0xd0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004afc:	e00e      	b.n	8004b1c <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004b04:	e00a      	b.n	8004b1c <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004b06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d003      	beq.n	8004b16 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004b14:	e001      	b.n	8004b1a <xTaskGenericNotifyFromISR+0xce>
						xReturn = pdFAIL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8004b1a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004b1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d147      	bne.n	8004bb4 <xTaskGenericNotifyFromISR+0x168>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <xTaskGenericNotifyFromISR+0xf8>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	61bb      	str	r3, [r7, #24]
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <xTaskGenericNotifyFromISR+0xf4>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b44:	4b21      	ldr	r3, [pc, #132]	@ (8004bcc <xTaskGenericNotifyFromISR+0x180>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d11c      	bne.n	8004b86 <xTaskGenericNotifyFromISR+0x13a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe fb03 	bl	800315c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd0 <xTaskGenericNotifyFromISR+0x184>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd0 <xTaskGenericNotifyFromISR+0x184>)
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4a17      	ldr	r2, [pc, #92]	@ (8004bd4 <xTaskGenericNotifyFromISR+0x188>)
 8004b76:	441a      	add	r2, r3
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7fe fa91 	bl	80030a6 <vListInsertEnd>
 8004b84:	e005      	b.n	8004b92 <xTaskGenericNotifyFromISR+0x146>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b88:	3318      	adds	r3, #24
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4812      	ldr	r0, [pc, #72]	@ (8004bd8 <xTaskGenericNotifyFromISR+0x18c>)
 8004b8e:	f7fe fa8a 	bl	80030a6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b96:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <xTaskGenericNotifyFromISR+0x190>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d909      	bls.n	8004bb4 <xTaskGenericNotifyFromISR+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <xTaskGenericNotifyFromISR+0x162>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e002      	b.n	8004bb4 <xTaskGenericNotifyFromISR+0x168>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8004bae:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <xTaskGenericNotifyFromISR+0x194>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f383 8811 	msr	BASEPRI, r3
}
 8004bbe:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3738      	adds	r7, #56	@ 0x38
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200005d4 	.word	0x200005d4
 8004bd0:	200005b4 	.word	0x200005b4
 8004bd4:	200004b0 	.word	0x200004b0
 8004bd8:	2000056c 	.word	0x2000056c
 8004bdc:	200004ac 	.word	0x200004ac
 8004be0:	200005c0 	.word	0x200005c0

08004be4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bee:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bf4:	4b28      	ldr	r3, [pc, #160]	@ (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe faae 	bl	800315c <uxListRemove>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c06:	4b24      	ldr	r3, [pc, #144]	@ (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43da      	mvns	r2, r3
 8004c14:	4b21      	ldr	r3, [pc, #132]	@ (8004c9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	4a20      	ldr	r2, [pc, #128]	@ (8004c9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d10a      	bne.n	8004c3c <prvAddCurrentTaskToDelayedList+0x58>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	481a      	ldr	r0, [pc, #104]	@ (8004ca0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c36:	f7fe fa36 	bl	80030a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c3a:	e026      	b.n	8004c8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c44:	4b14      	ldr	r3, [pc, #80]	@ (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d209      	bcs.n	8004c68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c54:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b0f      	ldr	r3, [pc, #60]	@ (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fe fa43 	bl	80030ec <vListInsert>
}
 8004c66:	e010      	b.n	8004c8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fe fa39 	bl	80030ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d202      	bcs.n	8004c8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c84:	4a09      	ldr	r2, [pc, #36]	@ (8004cac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6013      	str	r3, [r2, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200005b0 	.word	0x200005b0
 8004c98:	200004ac 	.word	0x200004ac
 8004c9c:	200005b4 	.word	0x200005b4
 8004ca0:	20000598 	.word	0x20000598
 8004ca4:	20000568 	.word	0x20000568
 8004ca8:	20000564 	.word	0x20000564
 8004cac:	200005cc 	.word	0x200005cc

08004cb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3b04      	subs	r3, #4
 8004cc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3b04      	subs	r3, #4
 8004cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f023 0201 	bic.w	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3b04      	subs	r3, #4
 8004cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ce0:	4a08      	ldr	r2, [pc, #32]	@ (8004d04 <pxPortInitialiseStack+0x54>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b14      	subs	r3, #20
 8004cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3b20      	subs	r3, #32
 8004cf6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	08004d09 	.word	0x08004d09

08004d08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <prvTaskExitError+0x54>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d00b      	beq.n	8004d34 <prvTaskExitError+0x2c>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	60fb      	str	r3, [r7, #12]
}
 8004d2e:	bf00      	nop
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <prvTaskExitError+0x28>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60bb      	str	r3, [r7, #8]
}
 8004d46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d48:	bf00      	nop
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0fc      	beq.n	8004d4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	20000018 	.word	0x20000018

08004d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	@ (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d7e:	4770      	bx	lr

08004d80 <pxCurrentTCBConst2>:
 8004d80:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d88:	4806      	ldr	r0, [pc, #24]	@ (8004da4 <prvPortStartFirstTask+0x1c>)
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f380 8808 	msr	MSP, r0
 8004d92:	b662      	cpsie	i
 8004d94:	b661      	cpsie	f
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	df00      	svc	0
 8004da0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004da2:	bf00      	nop
 8004da4:	e000ed08 	.word	0xe000ed08

08004da8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dae:	4b32      	ldr	r3, [pc, #200]	@ (8004e78 <xPortStartScheduler+0xd0>)
 8004db0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	22ff      	movs	r2, #255	@ 0xff
 8004dbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e7c <xPortStartScheduler+0xd4>)
 8004dd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8004e80 <xPortStartScheduler+0xd8>)
 8004dd8:	2207      	movs	r2, #7
 8004dda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ddc:	e009      	b.n	8004df2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004dde:	4b28      	ldr	r3, [pc, #160]	@ (8004e80 <xPortStartScheduler+0xd8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	4a26      	ldr	r2, [pc, #152]	@ (8004e80 <xPortStartScheduler+0xd8>)
 8004de6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfa:	2b80      	cmp	r3, #128	@ 0x80
 8004dfc:	d0ef      	beq.n	8004dde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dfe:	4b20      	ldr	r3, [pc, #128]	@ (8004e80 <xPortStartScheduler+0xd8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f1c3 0307 	rsb	r3, r3, #7
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d00b      	beq.n	8004e22 <xPortStartScheduler+0x7a>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	60bb      	str	r3, [r7, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	e7fd      	b.n	8004e1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e22:	4b17      	ldr	r3, [pc, #92]	@ (8004e80 <xPortStartScheduler+0xd8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <xPortStartScheduler+0xd8>)
 8004e2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e2c:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <xPortStartScheduler+0xd8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e34:	4a12      	ldr	r2, [pc, #72]	@ (8004e80 <xPortStartScheduler+0xd8>)
 8004e36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e40:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <xPortStartScheduler+0xdc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0f      	ldr	r2, [pc, #60]	@ (8004e84 <xPortStartScheduler+0xdc>)
 8004e46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <xPortStartScheduler+0xdc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0c      	ldr	r2, [pc, #48]	@ (8004e84 <xPortStartScheduler+0xdc>)
 8004e52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e58:	f000 f8b8 	bl	8004fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <xPortStartScheduler+0xe0>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e62:	f7ff ff91 	bl	8004d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e66:	f7ff fa1b 	bl	80042a0 <vTaskSwitchContext>
	prvTaskExitError();
 8004e6a:	f7ff ff4d 	bl	8004d08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000e400 	.word	0xe000e400
 8004e7c:	200005d8 	.word	0x200005d8
 8004e80:	200005dc 	.word	0x200005dc
 8004e84:	e000ed20 	.word	0xe000ed20
 8004e88:	20000018 	.word	0x20000018

08004e8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	607b      	str	r3, [r7, #4]
}
 8004ea4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <vPortEnterCritical+0x58>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ee4 <vPortEnterCritical+0x58>)
 8004eae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee4 <vPortEnterCritical+0x58>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d110      	bne.n	8004eda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <vPortEnterCritical+0x5c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <vPortEnterCritical+0x4e>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	603b      	str	r3, [r7, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	e7fd      	b.n	8004ed6 <vPortEnterCritical+0x4a>
	}
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	20000018 	.word	0x20000018
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <vPortExitCritical+0x50>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <vPortExitCritical+0x26>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	607b      	str	r3, [r7, #4]
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	e7fd      	b.n	8004f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f12:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <vPortExitCritical+0x50>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	4a08      	ldr	r2, [pc, #32]	@ (8004f3c <vPortExitCritical+0x50>)
 8004f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f1c:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <vPortExitCritical+0x50>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <vPortExitCritical+0x44>
 8004f24:	2300      	movs	r3, #0
 8004f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f383 8811 	msr	BASEPRI, r3
}
 8004f2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000018 	.word	0x20000018

08004f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f40:	f3ef 8009 	mrs	r0, PSP
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	4b0d      	ldr	r3, [pc, #52]	@ (8004f80 <pxCurrentTCBConst>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f50:	6010      	str	r0, [r2, #0]
 8004f52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f5a:	f380 8811 	msr	BASEPRI, r0
 8004f5e:	f7ff f99f 	bl	80042a0 <vTaskSwitchContext>
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	6808      	ldr	r0, [r1, #0]
 8004f72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f76:	f380 8809 	msr	PSP, r0
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	4770      	bx	lr

08004f80 <pxCurrentTCBConst>:
 8004f80:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fa2:	f7ff f8e1 	bl	8004168 <xTaskIncrementTick>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fac:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <SysTick_Handler+0x40>)
 8004fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f383 8811 	msr	BASEPRI, r3
}
 8004fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <vPortSetupTimerInterrupt+0x30>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005000 <vPortSetupTimerInterrupt+0x34>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fdc:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <vPortSetupTimerInterrupt+0x38>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a09      	ldr	r2, [pc, #36]	@ (8005008 <vPortSetupTimerInterrupt+0x3c>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	4a08      	ldr	r2, [pc, #32]	@ (800500c <vPortSetupTimerInterrupt+0x40>)
 8004fea:	3b01      	subs	r3, #1
 8004fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fee:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <vPortSetupTimerInterrupt+0x30>)
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	601a      	str	r2, [r3, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	e000e010 	.word	0xe000e010
 8005000:	e000e018 	.word	0xe000e018
 8005004:	2000000c 	.word	0x2000000c
 8005008:	10624dd3 	.word	0x10624dd3
 800500c:	e000e014 	.word	0xe000e014

08005010 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005016:	f3ef 8305 	mrs	r3, IPSR
 800501a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b0f      	cmp	r3, #15
 8005020:	d915      	bls.n	800504e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005022:	4a17      	ldr	r2, [pc, #92]	@ (8005080 <vPortValidateInterruptPriority+0x70>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800502c:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <vPortValidateInterruptPriority+0x74>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	7afa      	ldrb	r2, [r7, #11]
 8005032:	429a      	cmp	r2, r3
 8005034:	d20b      	bcs.n	800504e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	607b      	str	r3, [r7, #4]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800504e:	4b0e      	ldr	r3, [pc, #56]	@ (8005088 <vPortValidateInterruptPriority+0x78>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005056:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <vPortValidateInterruptPriority+0x7c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d90b      	bls.n	8005076 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	603b      	str	r3, [r7, #0]
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	e7fd      	b.n	8005072 <vPortValidateInterruptPriority+0x62>
	}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	e000e3f0 	.word	0xe000e3f0
 8005084:	200005d8 	.word	0x200005d8
 8005088:	e000ed0c 	.word	0xe000ed0c
 800508c:	200005dc 	.word	0x200005dc

08005090 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	@ 0x28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800509c:	f7fe ffc6 	bl	800402c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050a0:	4b5a      	ldr	r3, [pc, #360]	@ (800520c <pvPortMalloc+0x17c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050a8:	f000 f916 	bl	80052d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050ac:	4b58      	ldr	r3, [pc, #352]	@ (8005210 <pvPortMalloc+0x180>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f040 8090 	bne.w	80051da <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01e      	beq.n	80050fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80050c0:	2208      	movs	r2, #8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4413      	add	r3, r2
 80050c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d015      	beq.n	80050fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f023 0307 	bic.w	r3, r3, #7
 80050d8:	3308      	adds	r3, #8
 80050da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <pvPortMalloc+0x6e>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	617b      	str	r3, [r7, #20]
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d06a      	beq.n	80051da <pvPortMalloc+0x14a>
 8005104:	4b43      	ldr	r3, [pc, #268]	@ (8005214 <pvPortMalloc+0x184>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d865      	bhi.n	80051da <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800510e:	4b42      	ldr	r3, [pc, #264]	@ (8005218 <pvPortMalloc+0x188>)
 8005110:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005112:	4b41      	ldr	r3, [pc, #260]	@ (8005218 <pvPortMalloc+0x188>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005118:	e004      	b.n	8005124 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d903      	bls.n	8005136 <pvPortMalloc+0xa6>
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f1      	bne.n	800511a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005136:	4b35      	ldr	r3, [pc, #212]	@ (800520c <pvPortMalloc+0x17c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513c:	429a      	cmp	r2, r3
 800513e:	d04c      	beq.n	80051da <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2208      	movs	r2, #8
 8005146:	4413      	add	r3, r2
 8005148:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	1ad2      	subs	r2, r2, r3
 800515a:	2308      	movs	r3, #8
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	429a      	cmp	r2, r3
 8005160:	d920      	bls.n	80051a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <pvPortMalloc+0xfc>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	613b      	str	r3, [r7, #16]
}
 8005186:	bf00      	nop
 8005188:	bf00      	nop
 800518a:	e7fd      	b.n	8005188 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	1ad2      	subs	r2, r2, r3
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800519e:	69b8      	ldr	r0, [r7, #24]
 80051a0:	f000 f8fc 	bl	800539c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005214 <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	4a19      	ldr	r2, [pc, #100]	@ (8005214 <pvPortMalloc+0x184>)
 80051b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051b2:	4b18      	ldr	r3, [pc, #96]	@ (8005214 <pvPortMalloc+0x184>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b19      	ldr	r3, [pc, #100]	@ (800521c <pvPortMalloc+0x18c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d203      	bcs.n	80051c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051be:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <pvPortMalloc+0x184>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a16      	ldr	r2, [pc, #88]	@ (800521c <pvPortMalloc+0x18c>)
 80051c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <pvPortMalloc+0x180>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051da:	f7fe ff35 	bl	8004048 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <pvPortMalloc+0x170>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	60fb      	str	r3, [r7, #12]
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <pvPortMalloc+0x16c>
	return pvReturn;
 8005200:	69fb      	ldr	r3, [r7, #28]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3728      	adds	r7, #40	@ 0x28
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	200025e8 	.word	0x200025e8
 8005210:	200025f4 	.word	0x200025f4
 8005214:	200025ec 	.word	0x200025ec
 8005218:	200025e0 	.word	0x200025e0
 800521c:	200025f0 	.word	0x200025f0

08005220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d04a      	beq.n	80052c8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005232:	2308      	movs	r3, #8
 8005234:	425b      	negs	r3, r3
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	4b22      	ldr	r3, [pc, #136]	@ (80052d0 <vPortFree+0xb0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <vPortFree+0x46>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60fb      	str	r3, [r7, #12]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <vPortFree+0x66>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60bb      	str	r3, [r7, #8]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	4b11      	ldr	r3, [pc, #68]	@ (80052d0 <vPortFree+0xb0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d019      	beq.n	80052c8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d115      	bne.n	80052c8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <vPortFree+0xb0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	401a      	ands	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052ac:	f7fe febe 	bl	800402c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	4b07      	ldr	r3, [pc, #28]	@ (80052d4 <vPortFree+0xb4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4413      	add	r3, r2
 80052ba:	4a06      	ldr	r2, [pc, #24]	@ (80052d4 <vPortFree+0xb4>)
 80052bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052be:	6938      	ldr	r0, [r7, #16]
 80052c0:	f000 f86c 	bl	800539c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052c4:	f7fe fec0 	bl	8004048 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052c8:	bf00      	nop
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	200025f4 	.word	0x200025f4
 80052d4:	200025ec 	.word	0x200025ec

080052d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052e4:	4b27      	ldr	r3, [pc, #156]	@ (8005384 <prvHeapInit+0xac>)
 80052e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00c      	beq.n	800530c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3307      	adds	r3, #7
 80052f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0307 	bic.w	r3, r3, #7
 80052fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	4a1f      	ldr	r2, [pc, #124]	@ (8005384 <prvHeapInit+0xac>)
 8005308:	4413      	add	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005310:	4a1d      	ldr	r2, [pc, #116]	@ (8005388 <prvHeapInit+0xb0>)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005316:	4b1c      	ldr	r3, [pc, #112]	@ (8005388 <prvHeapInit+0xb0>)
 8005318:	2200      	movs	r2, #0
 800531a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4413      	add	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005324:	2208      	movs	r2, #8
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0307 	bic.w	r3, r3, #7
 8005332:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a15      	ldr	r2, [pc, #84]	@ (800538c <prvHeapInit+0xb4>)
 8005338:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800533a:	4b14      	ldr	r3, [pc, #80]	@ (800538c <prvHeapInit+0xb4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2200      	movs	r2, #0
 8005340:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005342:	4b12      	ldr	r3, [pc, #72]	@ (800538c <prvHeapInit+0xb4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	1ad2      	subs	r2, r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005358:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <prvHeapInit+0xb4>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a0a      	ldr	r2, [pc, #40]	@ (8005390 <prvHeapInit+0xb8>)
 8005366:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	4a09      	ldr	r2, [pc, #36]	@ (8005394 <prvHeapInit+0xbc>)
 800536e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005370:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <prvHeapInit+0xc0>)
 8005372:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005376:	601a      	str	r2, [r3, #0]
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	200005e0 	.word	0x200005e0
 8005388:	200025e0 	.word	0x200025e0
 800538c:	200025e8 	.word	0x200025e8
 8005390:	200025f0 	.word	0x200025f0
 8005394:	200025ec 	.word	0x200025ec
 8005398:	200025f4 	.word	0x200025f4

0800539c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053a4:	4b27      	ldr	r3, [pc, #156]	@ (8005444 <prvInsertBlockIntoFreeList+0xa8>)
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e002      	b.n	80053b0 <prvInsertBlockIntoFreeList+0x14>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d8f7      	bhi.n	80053aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4413      	add	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d108      	bne.n	80053de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	441a      	add	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d118      	bne.n	8005424 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b14      	ldr	r3, [pc, #80]	@ (8005448 <prvInsertBlockIntoFreeList+0xac>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d00d      	beq.n	800541a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	e008      	b.n	800542c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <prvInsertBlockIntoFreeList+0xac>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e003      	b.n	800542c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	429a      	cmp	r2, r3
 8005432:	d002      	beq.n	800543a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	200025e0 	.word	0x200025e0
 8005448:	200025e8 	.word	0x200025e8

0800544c <siprintf>:
 800544c:	b40e      	push	{r1, r2, r3}
 800544e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005452:	b500      	push	{lr}
 8005454:	b09c      	sub	sp, #112	@ 0x70
 8005456:	ab1d      	add	r3, sp, #116	@ 0x74
 8005458:	9002      	str	r0, [sp, #8]
 800545a:	9006      	str	r0, [sp, #24]
 800545c:	9107      	str	r1, [sp, #28]
 800545e:	9104      	str	r1, [sp, #16]
 8005460:	4808      	ldr	r0, [pc, #32]	@ (8005484 <siprintf+0x38>)
 8005462:	4909      	ldr	r1, [pc, #36]	@ (8005488 <siprintf+0x3c>)
 8005464:	f853 2b04 	ldr.w	r2, [r3], #4
 8005468:	9105      	str	r1, [sp, #20]
 800546a:	6800      	ldr	r0, [r0, #0]
 800546c:	a902      	add	r1, sp, #8
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	f000 f9a0 	bl	80057b4 <_svfiprintf_r>
 8005474:	2200      	movs	r2, #0
 8005476:	9b02      	ldr	r3, [sp, #8]
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	b01c      	add	sp, #112	@ 0x70
 800547c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005480:	b003      	add	sp, #12
 8005482:	4770      	bx	lr
 8005484:	2000001c 	.word	0x2000001c
 8005488:	ffff0208 	.word	0xffff0208

0800548c <memset>:
 800548c:	4603      	mov	r3, r0
 800548e:	4402      	add	r2, r0
 8005490:	4293      	cmp	r3, r2
 8005492:	d100      	bne.n	8005496 <memset+0xa>
 8005494:	4770      	bx	lr
 8005496:	f803 1b01 	strb.w	r1, [r3], #1
 800549a:	e7f9      	b.n	8005490 <memset+0x4>

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	@ (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000001c 	.word	0x2000001c

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	2600      	movs	r6, #0
 80054ac:	4d0c      	ldr	r5, [pc, #48]	@ (80054e0 <__libc_init_array+0x38>)
 80054ae:	4c0d      	ldr	r4, [pc, #52]	@ (80054e4 <__libc_init_array+0x3c>)
 80054b0:	1b64      	subs	r4, r4, r5
 80054b2:	10a4      	asrs	r4, r4, #2
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	f000 fc78 	bl	8005dac <_init>
 80054bc:	2600      	movs	r6, #0
 80054be:	4d0a      	ldr	r5, [pc, #40]	@ (80054e8 <__libc_init_array+0x40>)
 80054c0:	4c0a      	ldr	r4, [pc, #40]	@ (80054ec <__libc_init_array+0x44>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08005f68 	.word	0x08005f68
 80054e4:	08005f68 	.word	0x08005f68
 80054e8:	08005f68 	.word	0x08005f68
 80054ec:	08005f6c 	.word	0x08005f6c

080054f0 <__retarget_lock_acquire_recursive>:
 80054f0:	4770      	bx	lr

080054f2 <__retarget_lock_release_recursive>:
 80054f2:	4770      	bx	lr

080054f4 <memcpy>:
 80054f4:	440a      	add	r2, r1
 80054f6:	4291      	cmp	r1, r2
 80054f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054fc:	d100      	bne.n	8005500 <memcpy+0xc>
 80054fe:	4770      	bx	lr
 8005500:	b510      	push	{r4, lr}
 8005502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005506:	4291      	cmp	r1, r2
 8005508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800550c:	d1f9      	bne.n	8005502 <memcpy+0xe>
 800550e:	bd10      	pop	{r4, pc}

08005510 <_free_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4605      	mov	r5, r0
 8005514:	2900      	cmp	r1, #0
 8005516:	d040      	beq.n	800559a <_free_r+0x8a>
 8005518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800551c:	1f0c      	subs	r4, r1, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	bfb8      	it	lt
 8005522:	18e4      	addlt	r4, r4, r3
 8005524:	f000 f8de 	bl	80056e4 <__malloc_lock>
 8005528:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <_free_r+0x8c>)
 800552a:	6813      	ldr	r3, [r2, #0]
 800552c:	b933      	cbnz	r3, 800553c <_free_r+0x2c>
 800552e:	6063      	str	r3, [r4, #4]
 8005530:	6014      	str	r4, [r2, #0]
 8005532:	4628      	mov	r0, r5
 8005534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005538:	f000 b8da 	b.w	80056f0 <__malloc_unlock>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d908      	bls.n	8005552 <_free_r+0x42>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	1821      	adds	r1, r4, r0
 8005544:	428b      	cmp	r3, r1
 8005546:	bf01      	itttt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	1809      	addeq	r1, r1, r0
 800554e:	6021      	streq	r1, [r4, #0]
 8005550:	e7ed      	b.n	800552e <_free_r+0x1e>
 8005552:	461a      	mov	r2, r3
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b10b      	cbz	r3, 800555c <_free_r+0x4c>
 8005558:	42a3      	cmp	r3, r4
 800555a:	d9fa      	bls.n	8005552 <_free_r+0x42>
 800555c:	6811      	ldr	r1, [r2, #0]
 800555e:	1850      	adds	r0, r2, r1
 8005560:	42a0      	cmp	r0, r4
 8005562:	d10b      	bne.n	800557c <_free_r+0x6c>
 8005564:	6820      	ldr	r0, [r4, #0]
 8005566:	4401      	add	r1, r0
 8005568:	1850      	adds	r0, r2, r1
 800556a:	4283      	cmp	r3, r0
 800556c:	6011      	str	r1, [r2, #0]
 800556e:	d1e0      	bne.n	8005532 <_free_r+0x22>
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4408      	add	r0, r1
 8005576:	6010      	str	r0, [r2, #0]
 8005578:	6053      	str	r3, [r2, #4]
 800557a:	e7da      	b.n	8005532 <_free_r+0x22>
 800557c:	d902      	bls.n	8005584 <_free_r+0x74>
 800557e:	230c      	movs	r3, #12
 8005580:	602b      	str	r3, [r5, #0]
 8005582:	e7d6      	b.n	8005532 <_free_r+0x22>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	1821      	adds	r1, r4, r0
 8005588:	428b      	cmp	r3, r1
 800558a:	bf01      	itttt	eq
 800558c:	6819      	ldreq	r1, [r3, #0]
 800558e:	685b      	ldreq	r3, [r3, #4]
 8005590:	1809      	addeq	r1, r1, r0
 8005592:	6021      	streq	r1, [r4, #0]
 8005594:	6063      	str	r3, [r4, #4]
 8005596:	6054      	str	r4, [r2, #4]
 8005598:	e7cb      	b.n	8005532 <_free_r+0x22>
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	2000273c 	.word	0x2000273c

080055a0 <sbrk_aligned>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	4e0f      	ldr	r6, [pc, #60]	@ (80055e0 <sbrk_aligned+0x40>)
 80055a4:	460c      	mov	r4, r1
 80055a6:	6831      	ldr	r1, [r6, #0]
 80055a8:	4605      	mov	r5, r0
 80055aa:	b911      	cbnz	r1, 80055b2 <sbrk_aligned+0x12>
 80055ac:	f000 fbaa 	bl	8005d04 <_sbrk_r>
 80055b0:	6030      	str	r0, [r6, #0]
 80055b2:	4621      	mov	r1, r4
 80055b4:	4628      	mov	r0, r5
 80055b6:	f000 fba5 	bl	8005d04 <_sbrk_r>
 80055ba:	1c43      	adds	r3, r0, #1
 80055bc:	d103      	bne.n	80055c6 <sbrk_aligned+0x26>
 80055be:	f04f 34ff 	mov.w	r4, #4294967295
 80055c2:	4620      	mov	r0, r4
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
 80055c6:	1cc4      	adds	r4, r0, #3
 80055c8:	f024 0403 	bic.w	r4, r4, #3
 80055cc:	42a0      	cmp	r0, r4
 80055ce:	d0f8      	beq.n	80055c2 <sbrk_aligned+0x22>
 80055d0:	1a21      	subs	r1, r4, r0
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 fb96 	bl	8005d04 <_sbrk_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	d1f2      	bne.n	80055c2 <sbrk_aligned+0x22>
 80055dc:	e7ef      	b.n	80055be <sbrk_aligned+0x1e>
 80055de:	bf00      	nop
 80055e0:	20002738 	.word	0x20002738

080055e4 <_malloc_r>:
 80055e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e8:	1ccd      	adds	r5, r1, #3
 80055ea:	f025 0503 	bic.w	r5, r5, #3
 80055ee:	3508      	adds	r5, #8
 80055f0:	2d0c      	cmp	r5, #12
 80055f2:	bf38      	it	cc
 80055f4:	250c      	movcc	r5, #12
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	4606      	mov	r6, r0
 80055fa:	db01      	blt.n	8005600 <_malloc_r+0x1c>
 80055fc:	42a9      	cmp	r1, r5
 80055fe:	d904      	bls.n	800560a <_malloc_r+0x26>
 8005600:	230c      	movs	r3, #12
 8005602:	6033      	str	r3, [r6, #0]
 8005604:	2000      	movs	r0, #0
 8005606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056e0 <_malloc_r+0xfc>
 800560e:	f000 f869 	bl	80056e4 <__malloc_lock>
 8005612:	f8d8 3000 	ldr.w	r3, [r8]
 8005616:	461c      	mov	r4, r3
 8005618:	bb44      	cbnz	r4, 800566c <_malloc_r+0x88>
 800561a:	4629      	mov	r1, r5
 800561c:	4630      	mov	r0, r6
 800561e:	f7ff ffbf 	bl	80055a0 <sbrk_aligned>
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	4604      	mov	r4, r0
 8005626:	d158      	bne.n	80056da <_malloc_r+0xf6>
 8005628:	f8d8 4000 	ldr.w	r4, [r8]
 800562c:	4627      	mov	r7, r4
 800562e:	2f00      	cmp	r7, #0
 8005630:	d143      	bne.n	80056ba <_malloc_r+0xd6>
 8005632:	2c00      	cmp	r4, #0
 8005634:	d04b      	beq.n	80056ce <_malloc_r+0xea>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	4639      	mov	r1, r7
 800563a:	4630      	mov	r0, r6
 800563c:	eb04 0903 	add.w	r9, r4, r3
 8005640:	f000 fb60 	bl	8005d04 <_sbrk_r>
 8005644:	4581      	cmp	r9, r0
 8005646:	d142      	bne.n	80056ce <_malloc_r+0xea>
 8005648:	6821      	ldr	r1, [r4, #0]
 800564a:	4630      	mov	r0, r6
 800564c:	1a6d      	subs	r5, r5, r1
 800564e:	4629      	mov	r1, r5
 8005650:	f7ff ffa6 	bl	80055a0 <sbrk_aligned>
 8005654:	3001      	adds	r0, #1
 8005656:	d03a      	beq.n	80056ce <_malloc_r+0xea>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	442b      	add	r3, r5
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	f8d8 3000 	ldr.w	r3, [r8]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	bb62      	cbnz	r2, 80056c0 <_malloc_r+0xdc>
 8005666:	f8c8 7000 	str.w	r7, [r8]
 800566a:	e00f      	b.n	800568c <_malloc_r+0xa8>
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	1b52      	subs	r2, r2, r5
 8005670:	d420      	bmi.n	80056b4 <_malloc_r+0xd0>
 8005672:	2a0b      	cmp	r2, #11
 8005674:	d917      	bls.n	80056a6 <_malloc_r+0xc2>
 8005676:	1961      	adds	r1, r4, r5
 8005678:	42a3      	cmp	r3, r4
 800567a:	6025      	str	r5, [r4, #0]
 800567c:	bf18      	it	ne
 800567e:	6059      	strne	r1, [r3, #4]
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	bf08      	it	eq
 8005684:	f8c8 1000 	streq.w	r1, [r8]
 8005688:	5162      	str	r2, [r4, r5]
 800568a:	604b      	str	r3, [r1, #4]
 800568c:	4630      	mov	r0, r6
 800568e:	f000 f82f 	bl	80056f0 <__malloc_unlock>
 8005692:	f104 000b 	add.w	r0, r4, #11
 8005696:	1d23      	adds	r3, r4, #4
 8005698:	f020 0007 	bic.w	r0, r0, #7
 800569c:	1ac2      	subs	r2, r0, r3
 800569e:	bf1c      	itt	ne
 80056a0:	1a1b      	subne	r3, r3, r0
 80056a2:	50a3      	strne	r3, [r4, r2]
 80056a4:	e7af      	b.n	8005606 <_malloc_r+0x22>
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	bf0c      	ite	eq
 80056ac:	f8c8 2000 	streq.w	r2, [r8]
 80056b0:	605a      	strne	r2, [r3, #4]
 80056b2:	e7eb      	b.n	800568c <_malloc_r+0xa8>
 80056b4:	4623      	mov	r3, r4
 80056b6:	6864      	ldr	r4, [r4, #4]
 80056b8:	e7ae      	b.n	8005618 <_malloc_r+0x34>
 80056ba:	463c      	mov	r4, r7
 80056bc:	687f      	ldr	r7, [r7, #4]
 80056be:	e7b6      	b.n	800562e <_malloc_r+0x4a>
 80056c0:	461a      	mov	r2, r3
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	d1fb      	bne.n	80056c0 <_malloc_r+0xdc>
 80056c8:	2300      	movs	r3, #0
 80056ca:	6053      	str	r3, [r2, #4]
 80056cc:	e7de      	b.n	800568c <_malloc_r+0xa8>
 80056ce:	230c      	movs	r3, #12
 80056d0:	4630      	mov	r0, r6
 80056d2:	6033      	str	r3, [r6, #0]
 80056d4:	f000 f80c 	bl	80056f0 <__malloc_unlock>
 80056d8:	e794      	b.n	8005604 <_malloc_r+0x20>
 80056da:	6005      	str	r5, [r0, #0]
 80056dc:	e7d6      	b.n	800568c <_malloc_r+0xa8>
 80056de:	bf00      	nop
 80056e0:	2000273c 	.word	0x2000273c

080056e4 <__malloc_lock>:
 80056e4:	4801      	ldr	r0, [pc, #4]	@ (80056ec <__malloc_lock+0x8>)
 80056e6:	f7ff bf03 	b.w	80054f0 <__retarget_lock_acquire_recursive>
 80056ea:	bf00      	nop
 80056ec:	20002734 	.word	0x20002734

080056f0 <__malloc_unlock>:
 80056f0:	4801      	ldr	r0, [pc, #4]	@ (80056f8 <__malloc_unlock+0x8>)
 80056f2:	f7ff befe 	b.w	80054f2 <__retarget_lock_release_recursive>
 80056f6:	bf00      	nop
 80056f8:	20002734 	.word	0x20002734

080056fc <__ssputs_r>:
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	461f      	mov	r7, r3
 8005702:	688e      	ldr	r6, [r1, #8]
 8005704:	4682      	mov	sl, r0
 8005706:	42be      	cmp	r6, r7
 8005708:	460c      	mov	r4, r1
 800570a:	4690      	mov	r8, r2
 800570c:	680b      	ldr	r3, [r1, #0]
 800570e:	d82d      	bhi.n	800576c <__ssputs_r+0x70>
 8005710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005714:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005718:	d026      	beq.n	8005768 <__ssputs_r+0x6c>
 800571a:	6965      	ldr	r5, [r4, #20]
 800571c:	6909      	ldr	r1, [r1, #16]
 800571e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005722:	eba3 0901 	sub.w	r9, r3, r1
 8005726:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800572a:	1c7b      	adds	r3, r7, #1
 800572c:	444b      	add	r3, r9
 800572e:	106d      	asrs	r5, r5, #1
 8005730:	429d      	cmp	r5, r3
 8005732:	bf38      	it	cc
 8005734:	461d      	movcc	r5, r3
 8005736:	0553      	lsls	r3, r2, #21
 8005738:	d527      	bpl.n	800578a <__ssputs_r+0x8e>
 800573a:	4629      	mov	r1, r5
 800573c:	f7ff ff52 	bl	80055e4 <_malloc_r>
 8005740:	4606      	mov	r6, r0
 8005742:	b360      	cbz	r0, 800579e <__ssputs_r+0xa2>
 8005744:	464a      	mov	r2, r9
 8005746:	6921      	ldr	r1, [r4, #16]
 8005748:	f7ff fed4 	bl	80054f4 <memcpy>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	6126      	str	r6, [r4, #16]
 800575a:	444e      	add	r6, r9
 800575c:	6026      	str	r6, [r4, #0]
 800575e:	463e      	mov	r6, r7
 8005760:	6165      	str	r5, [r4, #20]
 8005762:	eba5 0509 	sub.w	r5, r5, r9
 8005766:	60a5      	str	r5, [r4, #8]
 8005768:	42be      	cmp	r6, r7
 800576a:	d900      	bls.n	800576e <__ssputs_r+0x72>
 800576c:	463e      	mov	r6, r7
 800576e:	4632      	mov	r2, r6
 8005770:	4641      	mov	r1, r8
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	f000 faac 	bl	8005cd0 <memmove>
 8005778:	2000      	movs	r0, #0
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	1b9b      	subs	r3, r3, r6
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	4433      	add	r3, r6
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	462a      	mov	r2, r5
 800578c:	f000 fad8 	bl	8005d40 <_realloc_r>
 8005790:	4606      	mov	r6, r0
 8005792:	2800      	cmp	r0, #0
 8005794:	d1e0      	bne.n	8005758 <__ssputs_r+0x5c>
 8005796:	4650      	mov	r0, sl
 8005798:	6921      	ldr	r1, [r4, #16]
 800579a:	f7ff feb9 	bl	8005510 <_free_r>
 800579e:	230c      	movs	r3, #12
 80057a0:	f8ca 3000 	str.w	r3, [sl]
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295
 80057aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	e7e9      	b.n	8005786 <__ssputs_r+0x8a>
	...

080057b4 <_svfiprintf_r>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	4698      	mov	r8, r3
 80057ba:	898b      	ldrh	r3, [r1, #12]
 80057bc:	4607      	mov	r7, r0
 80057be:	061b      	lsls	r3, r3, #24
 80057c0:	460d      	mov	r5, r1
 80057c2:	4614      	mov	r4, r2
 80057c4:	b09d      	sub	sp, #116	@ 0x74
 80057c6:	d510      	bpl.n	80057ea <_svfiprintf_r+0x36>
 80057c8:	690b      	ldr	r3, [r1, #16]
 80057ca:	b973      	cbnz	r3, 80057ea <_svfiprintf_r+0x36>
 80057cc:	2140      	movs	r1, #64	@ 0x40
 80057ce:	f7ff ff09 	bl	80055e4 <_malloc_r>
 80057d2:	6028      	str	r0, [r5, #0]
 80057d4:	6128      	str	r0, [r5, #16]
 80057d6:	b930      	cbnz	r0, 80057e6 <_svfiprintf_r+0x32>
 80057d8:	230c      	movs	r3, #12
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	b01d      	add	sp, #116	@ 0x74
 80057e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e6:	2340      	movs	r3, #64	@ 0x40
 80057e8:	616b      	str	r3, [r5, #20]
 80057ea:	2300      	movs	r3, #0
 80057ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ee:	2320      	movs	r3, #32
 80057f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057f4:	2330      	movs	r3, #48	@ 0x30
 80057f6:	f04f 0901 	mov.w	r9, #1
 80057fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80057fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005998 <_svfiprintf_r+0x1e4>
 8005802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005806:	4623      	mov	r3, r4
 8005808:	469a      	mov	sl, r3
 800580a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800580e:	b10a      	cbz	r2, 8005814 <_svfiprintf_r+0x60>
 8005810:	2a25      	cmp	r2, #37	@ 0x25
 8005812:	d1f9      	bne.n	8005808 <_svfiprintf_r+0x54>
 8005814:	ebba 0b04 	subs.w	fp, sl, r4
 8005818:	d00b      	beq.n	8005832 <_svfiprintf_r+0x7e>
 800581a:	465b      	mov	r3, fp
 800581c:	4622      	mov	r2, r4
 800581e:	4629      	mov	r1, r5
 8005820:	4638      	mov	r0, r7
 8005822:	f7ff ff6b 	bl	80056fc <__ssputs_r>
 8005826:	3001      	adds	r0, #1
 8005828:	f000 80a7 	beq.w	800597a <_svfiprintf_r+0x1c6>
 800582c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800582e:	445a      	add	r2, fp
 8005830:	9209      	str	r2, [sp, #36]	@ 0x24
 8005832:	f89a 3000 	ldrb.w	r3, [sl]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 809f 	beq.w	800597a <_svfiprintf_r+0x1c6>
 800583c:	2300      	movs	r3, #0
 800583e:	f04f 32ff 	mov.w	r2, #4294967295
 8005842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005846:	f10a 0a01 	add.w	sl, sl, #1
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	9307      	str	r3, [sp, #28]
 800584e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005852:	931a      	str	r3, [sp, #104]	@ 0x68
 8005854:	4654      	mov	r4, sl
 8005856:	2205      	movs	r2, #5
 8005858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585c:	484e      	ldr	r0, [pc, #312]	@ (8005998 <_svfiprintf_r+0x1e4>)
 800585e:	f000 fa61 	bl	8005d24 <memchr>
 8005862:	9a04      	ldr	r2, [sp, #16]
 8005864:	b9d8      	cbnz	r0, 800589e <_svfiprintf_r+0xea>
 8005866:	06d0      	lsls	r0, r2, #27
 8005868:	bf44      	itt	mi
 800586a:	2320      	movmi	r3, #32
 800586c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005870:	0711      	lsls	r1, r2, #28
 8005872:	bf44      	itt	mi
 8005874:	232b      	movmi	r3, #43	@ 0x2b
 8005876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800587a:	f89a 3000 	ldrb.w	r3, [sl]
 800587e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005880:	d015      	beq.n	80058ae <_svfiprintf_r+0xfa>
 8005882:	4654      	mov	r4, sl
 8005884:	2000      	movs	r0, #0
 8005886:	f04f 0c0a 	mov.w	ip, #10
 800588a:	9a07      	ldr	r2, [sp, #28]
 800588c:	4621      	mov	r1, r4
 800588e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005892:	3b30      	subs	r3, #48	@ 0x30
 8005894:	2b09      	cmp	r3, #9
 8005896:	d94b      	bls.n	8005930 <_svfiprintf_r+0x17c>
 8005898:	b1b0      	cbz	r0, 80058c8 <_svfiprintf_r+0x114>
 800589a:	9207      	str	r2, [sp, #28]
 800589c:	e014      	b.n	80058c8 <_svfiprintf_r+0x114>
 800589e:	eba0 0308 	sub.w	r3, r0, r8
 80058a2:	fa09 f303 	lsl.w	r3, r9, r3
 80058a6:	4313      	orrs	r3, r2
 80058a8:	46a2      	mov	sl, r4
 80058aa:	9304      	str	r3, [sp, #16]
 80058ac:	e7d2      	b.n	8005854 <_svfiprintf_r+0xa0>
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	1d19      	adds	r1, r3, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	9103      	str	r1, [sp, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bfbb      	ittet	lt
 80058ba:	425b      	neglt	r3, r3
 80058bc:	f042 0202 	orrlt.w	r2, r2, #2
 80058c0:	9307      	strge	r3, [sp, #28]
 80058c2:	9307      	strlt	r3, [sp, #28]
 80058c4:	bfb8      	it	lt
 80058c6:	9204      	strlt	r2, [sp, #16]
 80058c8:	7823      	ldrb	r3, [r4, #0]
 80058ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80058cc:	d10a      	bne.n	80058e4 <_svfiprintf_r+0x130>
 80058ce:	7863      	ldrb	r3, [r4, #1]
 80058d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80058d2:	d132      	bne.n	800593a <_svfiprintf_r+0x186>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	3402      	adds	r4, #2
 80058d8:	1d1a      	adds	r2, r3, #4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	9203      	str	r2, [sp, #12]
 80058de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058e2:	9305      	str	r3, [sp, #20]
 80058e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800599c <_svfiprintf_r+0x1e8>
 80058e8:	2203      	movs	r2, #3
 80058ea:	4650      	mov	r0, sl
 80058ec:	7821      	ldrb	r1, [r4, #0]
 80058ee:	f000 fa19 	bl	8005d24 <memchr>
 80058f2:	b138      	cbz	r0, 8005904 <_svfiprintf_r+0x150>
 80058f4:	2240      	movs	r2, #64	@ 0x40
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	eba0 000a 	sub.w	r0, r0, sl
 80058fc:	4082      	lsls	r2, r0
 80058fe:	4313      	orrs	r3, r2
 8005900:	3401      	adds	r4, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005908:	2206      	movs	r2, #6
 800590a:	4825      	ldr	r0, [pc, #148]	@ (80059a0 <_svfiprintf_r+0x1ec>)
 800590c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005910:	f000 fa08 	bl	8005d24 <memchr>
 8005914:	2800      	cmp	r0, #0
 8005916:	d036      	beq.n	8005986 <_svfiprintf_r+0x1d2>
 8005918:	4b22      	ldr	r3, [pc, #136]	@ (80059a4 <_svfiprintf_r+0x1f0>)
 800591a:	bb1b      	cbnz	r3, 8005964 <_svfiprintf_r+0x1b0>
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	3307      	adds	r3, #7
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	3308      	adds	r3, #8
 8005926:	9303      	str	r3, [sp, #12]
 8005928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592a:	4433      	add	r3, r6
 800592c:	9309      	str	r3, [sp, #36]	@ 0x24
 800592e:	e76a      	b.n	8005806 <_svfiprintf_r+0x52>
 8005930:	460c      	mov	r4, r1
 8005932:	2001      	movs	r0, #1
 8005934:	fb0c 3202 	mla	r2, ip, r2, r3
 8005938:	e7a8      	b.n	800588c <_svfiprintf_r+0xd8>
 800593a:	2300      	movs	r3, #0
 800593c:	f04f 0c0a 	mov.w	ip, #10
 8005940:	4619      	mov	r1, r3
 8005942:	3401      	adds	r4, #1
 8005944:	9305      	str	r3, [sp, #20]
 8005946:	4620      	mov	r0, r4
 8005948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800594c:	3a30      	subs	r2, #48	@ 0x30
 800594e:	2a09      	cmp	r2, #9
 8005950:	d903      	bls.n	800595a <_svfiprintf_r+0x1a6>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0c6      	beq.n	80058e4 <_svfiprintf_r+0x130>
 8005956:	9105      	str	r1, [sp, #20]
 8005958:	e7c4      	b.n	80058e4 <_svfiprintf_r+0x130>
 800595a:	4604      	mov	r4, r0
 800595c:	2301      	movs	r3, #1
 800595e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005962:	e7f0      	b.n	8005946 <_svfiprintf_r+0x192>
 8005964:	ab03      	add	r3, sp, #12
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	462a      	mov	r2, r5
 800596a:	4638      	mov	r0, r7
 800596c:	4b0e      	ldr	r3, [pc, #56]	@ (80059a8 <_svfiprintf_r+0x1f4>)
 800596e:	a904      	add	r1, sp, #16
 8005970:	f3af 8000 	nop.w
 8005974:	1c42      	adds	r2, r0, #1
 8005976:	4606      	mov	r6, r0
 8005978:	d1d6      	bne.n	8005928 <_svfiprintf_r+0x174>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	065b      	lsls	r3, r3, #25
 800597e:	f53f af2d 	bmi.w	80057dc <_svfiprintf_r+0x28>
 8005982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005984:	e72c      	b.n	80057e0 <_svfiprintf_r+0x2c>
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4638      	mov	r0, r7
 800598e:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <_svfiprintf_r+0x1f4>)
 8005990:	a904      	add	r1, sp, #16
 8005992:	f000 f87d 	bl	8005a90 <_printf_i>
 8005996:	e7ed      	b.n	8005974 <_svfiprintf_r+0x1c0>
 8005998:	08005f2a 	.word	0x08005f2a
 800599c:	08005f30 	.word	0x08005f30
 80059a0:	08005f34 	.word	0x08005f34
 80059a4:	00000000 	.word	0x00000000
 80059a8:	080056fd 	.word	0x080056fd

080059ac <_printf_common>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	4616      	mov	r6, r2
 80059b2:	4698      	mov	r8, r3
 80059b4:	688a      	ldr	r2, [r1, #8]
 80059b6:	690b      	ldr	r3, [r1, #16]
 80059b8:	4607      	mov	r7, r0
 80059ba:	4293      	cmp	r3, r2
 80059bc:	bfb8      	it	lt
 80059be:	4613      	movlt	r3, r2
 80059c0:	6033      	str	r3, [r6, #0]
 80059c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059c6:	460c      	mov	r4, r1
 80059c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059cc:	b10a      	cbz	r2, 80059d2 <_printf_common+0x26>
 80059ce:	3301      	adds	r3, #1
 80059d0:	6033      	str	r3, [r6, #0]
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	0699      	lsls	r1, r3, #26
 80059d6:	bf42      	ittt	mi
 80059d8:	6833      	ldrmi	r3, [r6, #0]
 80059da:	3302      	addmi	r3, #2
 80059dc:	6033      	strmi	r3, [r6, #0]
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	f015 0506 	ands.w	r5, r5, #6
 80059e4:	d106      	bne.n	80059f4 <_printf_common+0x48>
 80059e6:	f104 0a19 	add.w	sl, r4, #25
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	6832      	ldr	r2, [r6, #0]
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	42ab      	cmp	r3, r5
 80059f2:	dc2b      	bgt.n	8005a4c <_printf_common+0xa0>
 80059f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	3b00      	subs	r3, #0
 80059fc:	bf18      	it	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	0692      	lsls	r2, r2, #26
 8005a02:	d430      	bmi.n	8005a66 <_printf_common+0xba>
 8005a04:	4641      	mov	r1, r8
 8005a06:	4638      	mov	r0, r7
 8005a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a0c:	47c8      	blx	r9
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d023      	beq.n	8005a5a <_printf_common+0xae>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	f003 0306 	and.w	r3, r3, #6
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	bf14      	ite	ne
 8005a1e:	2500      	movne	r5, #0
 8005a20:	6833      	ldreq	r3, [r6, #0]
 8005a22:	f04f 0600 	mov.w	r6, #0
 8005a26:	bf08      	it	eq
 8005a28:	68e5      	ldreq	r5, [r4, #12]
 8005a2a:	f104 041a 	add.w	r4, r4, #26
 8005a2e:	bf08      	it	eq
 8005a30:	1aed      	subeq	r5, r5, r3
 8005a32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a36:	bf08      	it	eq
 8005a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	bfc4      	itt	gt
 8005a40:	1a9b      	subgt	r3, r3, r2
 8005a42:	18ed      	addgt	r5, r5, r3
 8005a44:	42b5      	cmp	r5, r6
 8005a46:	d11a      	bne.n	8005a7e <_printf_common+0xd2>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e008      	b.n	8005a5e <_printf_common+0xb2>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4652      	mov	r2, sl
 8005a50:	4641      	mov	r1, r8
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c8      	blx	r9
 8005a56:	3001      	adds	r0, #1
 8005a58:	d103      	bne.n	8005a62 <_printf_common+0xb6>
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	3501      	adds	r5, #1
 8005a64:	e7c1      	b.n	80059ea <_printf_common+0x3e>
 8005a66:	2030      	movs	r0, #48	@ 0x30
 8005a68:	18e1      	adds	r1, r4, r3
 8005a6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a74:	4422      	add	r2, r4
 8005a76:	3302      	adds	r3, #2
 8005a78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a7c:	e7c2      	b.n	8005a04 <_printf_common+0x58>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4622      	mov	r2, r4
 8005a82:	4641      	mov	r1, r8
 8005a84:	4638      	mov	r0, r7
 8005a86:	47c8      	blx	r9
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d0e6      	beq.n	8005a5a <_printf_common+0xae>
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7d9      	b.n	8005a44 <_printf_common+0x98>

08005a90 <_printf_i>:
 8005a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	7e0f      	ldrb	r7, [r1, #24]
 8005a96:	4691      	mov	r9, r2
 8005a98:	2f78      	cmp	r7, #120	@ 0x78
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	469a      	mov	sl, r3
 8005aa0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005aa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aa6:	d807      	bhi.n	8005ab8 <_printf_i+0x28>
 8005aa8:	2f62      	cmp	r7, #98	@ 0x62
 8005aaa:	d80a      	bhi.n	8005ac2 <_printf_i+0x32>
 8005aac:	2f00      	cmp	r7, #0
 8005aae:	f000 80d3 	beq.w	8005c58 <_printf_i+0x1c8>
 8005ab2:	2f58      	cmp	r7, #88	@ 0x58
 8005ab4:	f000 80ba 	beq.w	8005c2c <_printf_i+0x19c>
 8005ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005abc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ac0:	e03a      	b.n	8005b38 <_printf_i+0xa8>
 8005ac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ac6:	2b15      	cmp	r3, #21
 8005ac8:	d8f6      	bhi.n	8005ab8 <_printf_i+0x28>
 8005aca:	a101      	add	r1, pc, #4	@ (adr r1, 8005ad0 <_printf_i+0x40>)
 8005acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ad0:	08005b29 	.word	0x08005b29
 8005ad4:	08005b3d 	.word	0x08005b3d
 8005ad8:	08005ab9 	.word	0x08005ab9
 8005adc:	08005ab9 	.word	0x08005ab9
 8005ae0:	08005ab9 	.word	0x08005ab9
 8005ae4:	08005ab9 	.word	0x08005ab9
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005ab9 	.word	0x08005ab9
 8005af0:	08005ab9 	.word	0x08005ab9
 8005af4:	08005ab9 	.word	0x08005ab9
 8005af8:	08005ab9 	.word	0x08005ab9
 8005afc:	08005c3f 	.word	0x08005c3f
 8005b00:	08005b67 	.word	0x08005b67
 8005b04:	08005bf9 	.word	0x08005bf9
 8005b08:	08005ab9 	.word	0x08005ab9
 8005b0c:	08005ab9 	.word	0x08005ab9
 8005b10:	08005c61 	.word	0x08005c61
 8005b14:	08005ab9 	.word	0x08005ab9
 8005b18:	08005b67 	.word	0x08005b67
 8005b1c:	08005ab9 	.word	0x08005ab9
 8005b20:	08005ab9 	.word	0x08005ab9
 8005b24:	08005c01 	.word	0x08005c01
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	1d1a      	adds	r2, r3, #4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6032      	str	r2, [r6, #0]
 8005b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e09e      	b.n	8005c7a <_printf_i+0x1ea>
 8005b3c:	6833      	ldr	r3, [r6, #0]
 8005b3e:	6820      	ldr	r0, [r4, #0]
 8005b40:	1d19      	adds	r1, r3, #4
 8005b42:	6031      	str	r1, [r6, #0]
 8005b44:	0606      	lsls	r6, r0, #24
 8005b46:	d501      	bpl.n	8005b4c <_printf_i+0xbc>
 8005b48:	681d      	ldr	r5, [r3, #0]
 8005b4a:	e003      	b.n	8005b54 <_printf_i+0xc4>
 8005b4c:	0645      	lsls	r5, r0, #25
 8005b4e:	d5fb      	bpl.n	8005b48 <_printf_i+0xb8>
 8005b50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	da03      	bge.n	8005b60 <_printf_i+0xd0>
 8005b58:	232d      	movs	r3, #45	@ 0x2d
 8005b5a:	426d      	negs	r5, r5
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b60:	230a      	movs	r3, #10
 8005b62:	4859      	ldr	r0, [pc, #356]	@ (8005cc8 <_printf_i+0x238>)
 8005b64:	e011      	b.n	8005b8a <_printf_i+0xfa>
 8005b66:	6821      	ldr	r1, [r4, #0]
 8005b68:	6833      	ldr	r3, [r6, #0]
 8005b6a:	0608      	lsls	r0, r1, #24
 8005b6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b70:	d402      	bmi.n	8005b78 <_printf_i+0xe8>
 8005b72:	0649      	lsls	r1, r1, #25
 8005b74:	bf48      	it	mi
 8005b76:	b2ad      	uxthmi	r5, r5
 8005b78:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b7a:	6033      	str	r3, [r6, #0]
 8005b7c:	bf14      	ite	ne
 8005b7e:	230a      	movne	r3, #10
 8005b80:	2308      	moveq	r3, #8
 8005b82:	4851      	ldr	r0, [pc, #324]	@ (8005cc8 <_printf_i+0x238>)
 8005b84:	2100      	movs	r1, #0
 8005b86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b8a:	6866      	ldr	r6, [r4, #4]
 8005b8c:	2e00      	cmp	r6, #0
 8005b8e:	bfa8      	it	ge
 8005b90:	6821      	ldrge	r1, [r4, #0]
 8005b92:	60a6      	str	r6, [r4, #8]
 8005b94:	bfa4      	itt	ge
 8005b96:	f021 0104 	bicge.w	r1, r1, #4
 8005b9a:	6021      	strge	r1, [r4, #0]
 8005b9c:	b90d      	cbnz	r5, 8005ba2 <_printf_i+0x112>
 8005b9e:	2e00      	cmp	r6, #0
 8005ba0:	d04b      	beq.n	8005c3a <_printf_i+0x1aa>
 8005ba2:	4616      	mov	r6, r2
 8005ba4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ba8:	fb03 5711 	mls	r7, r3, r1, r5
 8005bac:	5dc7      	ldrb	r7, [r0, r7]
 8005bae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bb2:	462f      	mov	r7, r5
 8005bb4:	42bb      	cmp	r3, r7
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	d9f4      	bls.n	8005ba4 <_printf_i+0x114>
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d10b      	bne.n	8005bd6 <_printf_i+0x146>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	07df      	lsls	r7, r3, #31
 8005bc2:	d508      	bpl.n	8005bd6 <_printf_i+0x146>
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	6861      	ldr	r1, [r4, #4]
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	bfde      	ittt	le
 8005bcc:	2330      	movle	r3, #48	@ 0x30
 8005bce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bd6:	1b92      	subs	r2, r2, r6
 8005bd8:	6122      	str	r2, [r4, #16]
 8005bda:	464b      	mov	r3, r9
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4640      	mov	r0, r8
 8005be0:	f8cd a000 	str.w	sl, [sp]
 8005be4:	aa03      	add	r2, sp, #12
 8005be6:	f7ff fee1 	bl	80059ac <_printf_common>
 8005bea:	3001      	adds	r0, #1
 8005bec:	d14a      	bne.n	8005c84 <_printf_i+0x1f4>
 8005bee:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf2:	b004      	add	sp, #16
 8005bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	f043 0320 	orr.w	r3, r3, #32
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	2778      	movs	r7, #120	@ 0x78
 8005c02:	4832      	ldr	r0, [pc, #200]	@ (8005ccc <_printf_i+0x23c>)
 8005c04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	6831      	ldr	r1, [r6, #0]
 8005c0c:	061f      	lsls	r7, r3, #24
 8005c0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c12:	d402      	bmi.n	8005c1a <_printf_i+0x18a>
 8005c14:	065f      	lsls	r7, r3, #25
 8005c16:	bf48      	it	mi
 8005c18:	b2ad      	uxthmi	r5, r5
 8005c1a:	6031      	str	r1, [r6, #0]
 8005c1c:	07d9      	lsls	r1, r3, #31
 8005c1e:	bf44      	itt	mi
 8005c20:	f043 0320 	orrmi.w	r3, r3, #32
 8005c24:	6023      	strmi	r3, [r4, #0]
 8005c26:	b11d      	cbz	r5, 8005c30 <_printf_i+0x1a0>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	e7ab      	b.n	8005b84 <_printf_i+0xf4>
 8005c2c:	4826      	ldr	r0, [pc, #152]	@ (8005cc8 <_printf_i+0x238>)
 8005c2e:	e7e9      	b.n	8005c04 <_printf_i+0x174>
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	f023 0320 	bic.w	r3, r3, #32
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	e7f6      	b.n	8005c28 <_printf_i+0x198>
 8005c3a:	4616      	mov	r6, r2
 8005c3c:	e7bd      	b.n	8005bba <_printf_i+0x12a>
 8005c3e:	6833      	ldr	r3, [r6, #0]
 8005c40:	6825      	ldr	r5, [r4, #0]
 8005c42:	1d18      	adds	r0, r3, #4
 8005c44:	6961      	ldr	r1, [r4, #20]
 8005c46:	6030      	str	r0, [r6, #0]
 8005c48:	062e      	lsls	r6, r5, #24
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	d501      	bpl.n	8005c52 <_printf_i+0x1c2>
 8005c4e:	6019      	str	r1, [r3, #0]
 8005c50:	e002      	b.n	8005c58 <_printf_i+0x1c8>
 8005c52:	0668      	lsls	r0, r5, #25
 8005c54:	d5fb      	bpl.n	8005c4e <_printf_i+0x1be>
 8005c56:	8019      	strh	r1, [r3, #0]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4616      	mov	r6, r2
 8005c5c:	6123      	str	r3, [r4, #16]
 8005c5e:	e7bc      	b.n	8005bda <_printf_i+0x14a>
 8005c60:	6833      	ldr	r3, [r6, #0]
 8005c62:	2100      	movs	r1, #0
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	6032      	str	r2, [r6, #0]
 8005c68:	681e      	ldr	r6, [r3, #0]
 8005c6a:	6862      	ldr	r2, [r4, #4]
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f000 f859 	bl	8005d24 <memchr>
 8005c72:	b108      	cbz	r0, 8005c78 <_printf_i+0x1e8>
 8005c74:	1b80      	subs	r0, r0, r6
 8005c76:	6060      	str	r0, [r4, #4]
 8005c78:	6863      	ldr	r3, [r4, #4]
 8005c7a:	6123      	str	r3, [r4, #16]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c82:	e7aa      	b.n	8005bda <_printf_i+0x14a>
 8005c84:	4632      	mov	r2, r6
 8005c86:	4649      	mov	r1, r9
 8005c88:	4640      	mov	r0, r8
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	47d0      	blx	sl
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d0ad      	beq.n	8005bee <_printf_i+0x15e>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	079b      	lsls	r3, r3, #30
 8005c96:	d413      	bmi.n	8005cc0 <_printf_i+0x230>
 8005c98:	68e0      	ldr	r0, [r4, #12]
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	4298      	cmp	r0, r3
 8005c9e:	bfb8      	it	lt
 8005ca0:	4618      	movlt	r0, r3
 8005ca2:	e7a6      	b.n	8005bf2 <_printf_i+0x162>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4632      	mov	r2, r6
 8005ca8:	4649      	mov	r1, r9
 8005caa:	4640      	mov	r0, r8
 8005cac:	47d0      	blx	sl
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d09d      	beq.n	8005bee <_printf_i+0x15e>
 8005cb2:	3501      	adds	r5, #1
 8005cb4:	68e3      	ldr	r3, [r4, #12]
 8005cb6:	9903      	ldr	r1, [sp, #12]
 8005cb8:	1a5b      	subs	r3, r3, r1
 8005cba:	42ab      	cmp	r3, r5
 8005cbc:	dcf2      	bgt.n	8005ca4 <_printf_i+0x214>
 8005cbe:	e7eb      	b.n	8005c98 <_printf_i+0x208>
 8005cc0:	2500      	movs	r5, #0
 8005cc2:	f104 0619 	add.w	r6, r4, #25
 8005cc6:	e7f5      	b.n	8005cb4 <_printf_i+0x224>
 8005cc8:	08005f3b 	.word	0x08005f3b
 8005ccc:	08005f4c 	.word	0x08005f4c

08005cd0 <memmove>:
 8005cd0:	4288      	cmp	r0, r1
 8005cd2:	b510      	push	{r4, lr}
 8005cd4:	eb01 0402 	add.w	r4, r1, r2
 8005cd8:	d902      	bls.n	8005ce0 <memmove+0x10>
 8005cda:	4284      	cmp	r4, r0
 8005cdc:	4623      	mov	r3, r4
 8005cde:	d807      	bhi.n	8005cf0 <memmove+0x20>
 8005ce0:	1e43      	subs	r3, r0, #1
 8005ce2:	42a1      	cmp	r1, r4
 8005ce4:	d008      	beq.n	8005cf8 <memmove+0x28>
 8005ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cee:	e7f8      	b.n	8005ce2 <memmove+0x12>
 8005cf0:	4601      	mov	r1, r0
 8005cf2:	4402      	add	r2, r0
 8005cf4:	428a      	cmp	r2, r1
 8005cf6:	d100      	bne.n	8005cfa <memmove+0x2a>
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d02:	e7f7      	b.n	8005cf4 <memmove+0x24>

08005d04 <_sbrk_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	2300      	movs	r3, #0
 8005d08:	4d05      	ldr	r5, [pc, #20]	@ (8005d20 <_sbrk_r+0x1c>)
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fa fd98 	bl	8000844 <_sbrk>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_sbrk_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_sbrk_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20002730 	.word	0x20002730

08005d24 <memchr>:
 8005d24:	4603      	mov	r3, r0
 8005d26:	b510      	push	{r4, lr}
 8005d28:	b2c9      	uxtb	r1, r1
 8005d2a:	4402      	add	r2, r0
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	d101      	bne.n	8005d36 <memchr+0x12>
 8005d32:	2000      	movs	r0, #0
 8005d34:	e003      	b.n	8005d3e <memchr+0x1a>
 8005d36:	7804      	ldrb	r4, [r0, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	428c      	cmp	r4, r1
 8005d3c:	d1f6      	bne.n	8005d2c <memchr+0x8>
 8005d3e:	bd10      	pop	{r4, pc}

08005d40 <_realloc_r>:
 8005d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d44:	4680      	mov	r8, r0
 8005d46:	4615      	mov	r5, r2
 8005d48:	460c      	mov	r4, r1
 8005d4a:	b921      	cbnz	r1, 8005d56 <_realloc_r+0x16>
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	f7ff bc47 	b.w	80055e4 <_malloc_r>
 8005d56:	b92a      	cbnz	r2, 8005d64 <_realloc_r+0x24>
 8005d58:	f7ff fbda 	bl	8005510 <_free_r>
 8005d5c:	2400      	movs	r4, #0
 8005d5e:	4620      	mov	r0, r4
 8005d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d64:	f000 f81a 	bl	8005d9c <_malloc_usable_size_r>
 8005d68:	4285      	cmp	r5, r0
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	d802      	bhi.n	8005d74 <_realloc_r+0x34>
 8005d6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d72:	d8f4      	bhi.n	8005d5e <_realloc_r+0x1e>
 8005d74:	4629      	mov	r1, r5
 8005d76:	4640      	mov	r0, r8
 8005d78:	f7ff fc34 	bl	80055e4 <_malloc_r>
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d0ec      	beq.n	8005d5c <_realloc_r+0x1c>
 8005d82:	42b5      	cmp	r5, r6
 8005d84:	462a      	mov	r2, r5
 8005d86:	4621      	mov	r1, r4
 8005d88:	bf28      	it	cs
 8005d8a:	4632      	movcs	r2, r6
 8005d8c:	f7ff fbb2 	bl	80054f4 <memcpy>
 8005d90:	4621      	mov	r1, r4
 8005d92:	4640      	mov	r0, r8
 8005d94:	f7ff fbbc 	bl	8005510 <_free_r>
 8005d98:	463c      	mov	r4, r7
 8005d9a:	e7e0      	b.n	8005d5e <_realloc_r+0x1e>

08005d9c <_malloc_usable_size_r>:
 8005d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da0:	1f18      	subs	r0, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	bfbc      	itt	lt
 8005da6:	580b      	ldrlt	r3, [r1, r0]
 8005da8:	18c0      	addlt	r0, r0, r3
 8005daa:	4770      	bx	lr

08005dac <_init>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr

08005db8 <_fini>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr
