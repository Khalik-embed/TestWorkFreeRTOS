
TestWorkFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005594  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080056a4  080056a4  000066a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005854  08005854  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005854  08005854  00006854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800585c  0800585c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800585c  0800585c  0000685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005860  08005860  00006860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005864  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026cc  2000006c  080058d0  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002738  080058d0  00007738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fc8  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f6  00000000  00000000  0001a05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e54  00000000  00000000  0001e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019444  00000000  00000000  0001f644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168eb  00000000  00000000  00038a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009313e  00000000  00000000  0004f373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e24b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005074  00000000  00000000  000e24f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e7568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800568c 	.word	0x0800568c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	0800568c 	.word	0x0800568c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <bsp_get_time_stamp>:

#include "stm32f1xx_hal.h"

#include "time_bsp.h"

uint32_t bsp_get_time_stamp(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000164:	f000 fcf0 	bl	8000b48 <HAL_GetTick>
 8000168:	4603      	mov	r3, r0
}
 800016a:	4618      	mov	r0, r3
 800016c:	bd80      	pop	{r7, pc}
	...

08000170 <bsp_print_log>:
#include "usart.h"

#include "uart_bsp.h"
#include "bsp.h"

status_t bsp_print_log(log_message_t * message){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	result = HAL_UART_Transmit_IT (&huart1, message->message, message->size);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	6859      	ldr	r1, [r3, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	b29b      	uxth	r3, r3
 8000182:	461a      	mov	r2, r3
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <bsp_print_log+0x34>)
 8000186:	f001 feff 	bl	8001f88 <HAL_UART_Transmit_IT>
 800018a:	4603      	mov	r3, r0
 800018c:	73fb      	strb	r3, [r7, #15]
	if (result == HAL_OK) {

	}
	return result == HAL_OK ? BSP_OK : BSP_ERROR;
 800018e:	7bfb      	ldrb	r3, [r7, #15]
 8000190:	2b00      	cmp	r3, #0
 8000192:	bf14      	ite	ne
 8000194:	2301      	movne	r3, #1
 8000196:	2300      	moveq	r3, #0
 8000198:	b2db      	uxtb	r3, r3
}
 800019a:	4618      	mov	r0, r3
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200003c8 	.word	0x200003c8

080001a8 <mem_log_thread_id>:

osThreadId mem_log_thread_id(osThreadId thread_id){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	static osThreadId log_osThreadId;
	if (thread_id != NULL) {
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d002      	beq.n	80001bc <mem_log_thread_id+0x14>
		log_osThreadId = thread_id;
 80001b6:	4a05      	ldr	r2, [pc, #20]	@ (80001cc <mem_log_thread_id+0x24>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	6013      	str	r3, [r2, #0]
	}
	return log_osThreadId;
 80001bc:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <mem_log_thread_id+0x24>)
 80001be:	681b      	ldr	r3, [r3, #0]
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000088 	.word	0x20000088

080001d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <HAL_UART_TxCpltCallback+0x2c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d107      	bne.n	80001f4 <HAL_UART_TxCpltCallback+0x24>
		osSignalSet(mem_log_thread_id(NULL), 0x00000001);
 80001e4:	2000      	movs	r0, #0
 80001e6:	f7ff ffdf 	bl	80001a8 <mem_log_thread_id>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2101      	movs	r1, #1
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fc68 	bl	8002ac4 <osSignalSet>
	}
};
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200003c8 	.word	0x200003c8

08000200 <log_print>:
	"LOG_ERROR"
	};

uint8_t message_buf[MAX_LOG_INFO_WIDTH];

void log_print(LogLevel_t log_level, const char* message){
 8000200:	b580      	push	{r7, lr}
 8000202:	b088      	sub	sp, #32
 8000204:	af02      	add	r7, sp, #8
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	71fb      	strb	r3, [r7, #7]
	if (log_level >= LOG_LEVEL) {
		uint32_t time_stamp =  bsp_get_time_stamp();
 800020c:	f7ff ffa8 	bl	8000160 <bsp_get_time_stamp>
 8000210:	6178      	str	r0, [r7, #20]
		sprintf((char *)message_buf, LOG_MESSAGE_TEMPLATE,
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	4a0d      	ldr	r2, [pc, #52]	@ (800024c <log_print+0x4c>)
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	4613      	mov	r3, r2
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	490b      	ldr	r1, [pc, #44]	@ (8000250 <log_print+0x50>)
 8000224:	480b      	ldr	r0, [pc, #44]	@ (8000254 <log_print+0x54>)
 8000226:	f004 fd81 	bl	8004d2c <siprintf>
	         (unsigned int)time_stamp,
			 log_level_string[log_level], message);
		log_message_t message_item = {strlen((char *)message_buf), message_buf};
 800022a:	480a      	ldr	r0, [pc, #40]	@ (8000254 <log_print+0x54>)
 800022c:	f7ff ff90 	bl	8000150 <strlen>
 8000230:	4603      	mov	r3, r0
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	4b07      	ldr	r3, [pc, #28]	@ (8000254 <log_print+0x54>)
 8000236:	613b      	str	r3, [r7, #16]
		bsp_print_log(&message_item);
 8000238:	f107 030c 	add.w	r3, r7, #12
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff97 	bl	8000170 <bsp_print_log>
	}
}
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000000 	.word	0x20000000
 8000250:	080056c8 	.word	0x080056c8
 8000254:	2000008c 	.word	0x2000008c

08000258 <log_print_from_Queue>:

void log_print_from_Queue(osPoolId log_pool, log_message_t * log_message){
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	6039      	str	r1, [r7, #0]
	bsp_print_log(log_message);
 8000262:	6838      	ldr	r0, [r7, #0]
 8000264:	f7ff ff84 	bl	8000170 <bsp_print_log>
	osPoolFree(log_pool, log_message);
 8000268:	6839      	ldr	r1, [r7, #0]
 800026a:	6878      	ldr	r0, [r7, #4]
 800026c:	f002 fd13 	bl	8002c96 <osPoolFree>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	4a06      	ldr	r2, [pc, #24]	@ (80002a0 <vApplicationGetIdleTaskMemory+0x28>)
 8000288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	4a05      	ldr	r2, [pc, #20]	@ (80002a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800028e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2280      	movs	r2, #128	@ 0x80
 8000294:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	20000128 	.word	0x20000128
 80002a4:	2000017c 	.word	0x2000017c

080002a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002a8:	b5b0      	push	{r4, r5, r7, lr}
 80002aa:	b09c      	sub	sp, #112	@ 0x70
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LogQueue */

  LogQueueHandle = osMessageCreate(osMessageQ(LogQueue), NULL);
 80002ae:	2100      	movs	r1, #0
 80002b0:	482c      	ldr	r0, [pc, #176]	@ (8000364 <MX_FREERTOS_Init+0xbc>)
 80002b2:	f002 fd30 	bl	8002d16 <osMessageCreate>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000368 <MX_FREERTOS_Init+0xc0>)
 80002ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DispatcherTask */
  osThreadDef(DispatcherTask, StartDispacherTask, osPriorityNormal, 0, 256);
 80002bc:	4b2b      	ldr	r3, [pc, #172]	@ (800036c <MX_FREERTOS_Init+0xc4>)
 80002be:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80002c2:	461d      	mov	r5, r3
 80002c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DispatcherTaskHandle = osThreadCreate(osThread(DispatcherTask), NULL);
 80002d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fb93 	bl	8002a02 <osThreadCreate>
 80002dc:	4603      	mov	r3, r0
 80002de:	4a24      	ldr	r2, [pc, #144]	@ (8000370 <MX_FREERTOS_Init+0xc8>)
 80002e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of LogTask */
  osThreadDef(LogTask, StartLogTask, osPriorityLow, 0, 512);
 80002e2:	4b24      	ldr	r3, [pc, #144]	@ (8000374 <MX_FREERTOS_Init+0xcc>)
 80002e4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80002e8:	461d      	mov	r5, r3
 80002ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LogTaskHandle = osThreadCreate(osThread(LogTask), NULL);
 80002f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fb80 	bl	8002a02 <osThreadCreate>
 8000302:	4603      	mov	r3, r0
 8000304:	4a1c      	ldr	r2, [pc, #112]	@ (8000378 <MX_FREERTOS_Init+0xd0>)
 8000306:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTLeftTask */
  osThreadDef(UARTLeftTask, StartUARTLeftTask, osPriorityLow, 0, 128);
 8000308:	4b1c      	ldr	r3, [pc, #112]	@ (800037c <MX_FREERTOS_Init+0xd4>)
 800030a:	f107 041c 	add.w	r4, r7, #28
 800030e:	461d      	mov	r5, r3
 8000310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTLeftTaskHandle = osThreadCreate(osThread(UARTLeftTask), NULL);
 800031c:	f107 031c 	add.w	r3, r7, #28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fb6d 	bl	8002a02 <osThreadCreate>
 8000328:	4603      	mov	r3, r0
 800032a:	4a15      	ldr	r2, [pc, #84]	@ (8000380 <MX_FREERTOS_Init+0xd8>)
 800032c:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTRightTask */
  osThreadDef(UARTRightTask, StartUARTRightTask, osPriorityLow, 0, 128);
 800032e:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <MX_FREERTOS_Init+0xdc>)
 8000330:	463c      	mov	r4, r7
 8000332:	461d      	mov	r5, r3
 8000334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000338:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800033c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTRightTaskHandle = osThreadCreate(osThread(UARTRightTask), NULL);
 8000340:	463b      	mov	r3, r7
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f002 fb5c 	bl	8002a02 <osThreadCreate>
 800034a:	4603      	mov	r3, r0
 800034c:	4a0e      	ldr	r2, [pc, #56]	@ (8000388 <MX_FREERTOS_Init+0xe0>)
 800034e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  mem_log_thread_id(LogTaskHandle);
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_FREERTOS_Init+0xd0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff27 	bl	80001a8 <mem_log_thread_id>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800035a:	bf00      	nop
 800035c:	3770      	adds	r7, #112	@ 0x70
 800035e:	46bd      	mov	sp, r7
 8000360:	bdb0      	pop	{r4, r5, r7, pc}
 8000362:	bf00      	nop
 8000364:	080057e4 	.word	0x080057e4
 8000368:	20000124 	.word	0x20000124
 800036c:	08005704 	.word	0x08005704
 8000370:	20000114 	.word	0x20000114
 8000374:	08005728 	.word	0x08005728
 8000378:	20000118 	.word	0x20000118
 800037c:	08005754 	.word	0x08005754
 8000380:	2000011c 	.word	0x2000011c
 8000384:	08005780 	.word	0x08005780
 8000388:	20000120 	.word	0x20000120

0800038c <StartDispacherTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDispacherTask */
void StartDispacherTask(void const * argument)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispacherTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000394:	2001      	movs	r0, #1
 8000396:	f002 fb80 	bl	8002a9a <osDelay>
 800039a:	e7fb      	b.n	8000394 <StartDispacherTask+0x8>

0800039c <StartLogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogTask */
void StartLogTask(void const * argument)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08c      	sub	sp, #48	@ 0x30
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartLogTask */
	osEvent  evt1;
	osEvent  evt2;
	LogMem = osPoolCreate(osPool(LogMem));
 80003a4:	4820      	ldr	r0, [pc, #128]	@ (8000428 <StartLogTask+0x8c>)
 80003a6:	f002 fc19 	bl	8002bdc <osPoolCreate>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a1f      	ldr	r2, [pc, #124]	@ (800042c <StartLogTask+0x90>)
 80003ae:	6013      	str	r3, [r2, #0]
//	if (mem_log_thread_id(NULL) != NULL){
//		log_print(LOG_INFO, "GET THREAD ID");
//	} else {
//		log_print(LOG_ERROR, "NO GET THREAD ID");
//	}
	evt2 = osSignalWait (0x00000001, 0x00000FFF);
 80003b0:	f107 0318 	add.w	r3, r7, #24
 80003b4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 fbc2 	bl	8002b44 <osSignalWait>
	if ((LogMem != NULL) && (evt2.status == osEventSignal)){
 80003c0:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <StartLogTask+0x90>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d007      	beq.n	80003d8 <StartLogTask+0x3c>
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	2b08      	cmp	r3, #8
 80003cc:	d104      	bne.n	80003d8 <StartLogTask+0x3c>
		log_print(LOG_INFO, "POOL INIT");
 80003ce:	4918      	ldr	r1, [pc, #96]	@ (8000430 <StartLogTask+0x94>)
 80003d0:	2000      	movs	r0, #0
 80003d2:	f7ff ff15 	bl	8000200 <log_print>
 80003d6:	e003      	b.n	80003e0 <StartLogTask+0x44>
	} else {
		log_print(LOG_ERROR, "POOL DOES NOT INIT");
 80003d8:	4916      	ldr	r1, [pc, #88]	@ (8000434 <StartLogTask+0x98>)
 80003da:	2002      	movs	r0, #2
 80003dc:	f7ff ff10 	bl	8000200 <log_print>
//	AlocMemoryPoolBlockLog();

  /* Infinite loop */
  for(;;)
  {
	evt1 = osMessageGet(LogQueue, osWaitForever);
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <StartLogTask+0x9c>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ec:	4618      	mov	r0, r3
 80003ee:	f002 fcbb 	bl	8002d68 <osMessageGet>
	evt2 = osSignalWait (0x00000001, 0x00000FFF);
 80003f2:	463b      	mov	r3, r7
 80003f4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80003f8:	2101      	movs	r1, #1
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 fba2 	bl	8002b44 <osSignalWait>
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	463a      	mov	r2, r7
 8000406:	ca07      	ldmia	r2, {r0, r1, r2}
 8000408:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if ((evt1.status == osEventMessage) && (evt2.status == osEventSignal) ) {
 800040c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800040e:	2b10      	cmp	r3, #16
 8000410:	d1e6      	bne.n	80003e0 <StartLogTask+0x44>
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	2b08      	cmp	r3, #8
 8000416:	d1e3      	bne.n	80003e0 <StartLogTask+0x44>
    	log_print_from_Queue(LogMem, evt1.value.p);
 8000418:	4b04      	ldr	r3, [pc, #16]	@ (800042c <StartLogTask+0x90>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800041e:	4611      	mov	r1, r2
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff19 	bl	8000258 <log_print_from_Queue>
	evt1 = osMessageGet(LogQueue, osWaitForever);
 8000426:	e7db      	b.n	80003e0 <StartLogTask+0x44>
 8000428:	080057d8 	.word	0x080057d8
 800042c:	2000010c 	.word	0x2000010c
 8000430:	0800579c 	.word	0x0800579c
 8000434:	080057a8 	.word	0x080057a8
 8000438:	20000110 	.word	0x20000110

0800043c <StartUARTLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTLeftTask */
void StartUARTLeftTask(void const * argument)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTLeftTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000444:	2001      	movs	r0, #1
 8000446:	f002 fb28 	bl	8002a9a <osDelay>
 800044a:	e7fb      	b.n	8000444 <StartUARTLeftTask+0x8>

0800044c <StartUARTRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTRightTask */
void StartUARTRightTask(void const * argument)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTRightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f002 fb20 	bl	8002a9a <osDelay>
 800045a:	e7fb      	b.n	8000454 <StartUARTRightTask+0x8>

0800045c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000462:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <MX_GPIO_Init+0x58>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a13      	ldr	r2, [pc, #76]	@ (80004b4 <MX_GPIO_Init+0x58>)
 8000468:	f043 0320 	orr.w	r3, r3, #32
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <MX_GPIO_Init+0x58>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0320 	and.w	r3, r3, #32
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <MX_GPIO_Init+0x58>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <MX_GPIO_Init+0x58>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <MX_GPIO_Init+0x58>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <MX_GPIO_Init+0x58>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a07      	ldr	r2, [pc, #28]	@ (80004b4 <MX_GPIO_Init+0x58>)
 8000498:	f043 0308 	orr.w	r3, r3, #8
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <MX_GPIO_Init+0x58>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0308 	and.w	r3, r3, #8
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fb1c 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f814 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f7ff ffca 	bl	800045c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004c8:	f000 f99a 	bl	8000800 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f9c2 	bl	8000854 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004d0:	f000 f9ea 	bl	80008a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  log_print(LOG_INFO, "BSP INIT COMPLETE");
 80004d4:	4904      	ldr	r1, [pc, #16]	@ (80004e8 <main+0x30>)
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff fe92 	bl	8000200 <log_print>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80004dc:	f7ff fee4 	bl	80002a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004e0:	f002 fa88 	bl	80029f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <main+0x2c>
 80004e8:	080057bc 	.word	0x080057bc

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b090      	sub	sp, #64	@ 0x40
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0318 	add.w	r3, r7, #24
 80004f6:	2228      	movs	r2, #40	@ 0x28
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f004 fc36 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050e:	2301      	movs	r3, #1
 8000510:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000512:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000516:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000518:	2300      	movs	r3, #0
 800051a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fe31 	bl	8001188 <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800052c:	f000 f82c 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	230f      	movs	r3, #15
 8000532:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f001 f89f 	bl	800168c <HAL_RCC_ClockConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000554:	f000 f818 	bl	8000588 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000558:	f001 f982 	bl	8001860 <HAL_RCC_EnableCSS>
}
 800055c:	bf00      	nop
 800055e:	3740      	adds	r7, #64	@ 0x40
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d101      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000576:	f000 fad5 	bl	8000b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40000800 	.word	0x40000800

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <Error_Handler+0x8>

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_MspInit+0x68>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <HAL_MspInit+0x68>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_MspInit+0x68>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <HAL_MspInit+0x68>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a11      	ldr	r2, [pc, #68]	@ (80005fc <HAL_MspInit+0x68>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <HAL_MspInit+0x68>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	210f      	movs	r1, #15
 80005ce:	f06f 0001 	mvn.w	r0, #1
 80005d2:	f000 fb78 	bl	8000cc6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <HAL_MspInit+0x6c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <HAL_MspInit+0x6c>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010000 	.word	0x40010000

08000604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08e      	sub	sp, #56	@ 0x38
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800060c:	2300      	movs	r3, #0
 800060e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000614:	2300      	movs	r3, #0
 8000616:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <HAL_InitTick+0xe8>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <HAL_InitTick+0xe8>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <HAL_InitTick+0xe8>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000632:	f107 0210 	add.w	r2, r7, #16
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f9a1 	bl	8001984 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000648:	2b00      	cmp	r3, #0
 800064a:	d103      	bne.n	8000654 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800064c:	f001 f972 	bl	8001934 <HAL_RCC_GetPCLK1Freq>
 8000650:	6378      	str	r0, [r7, #52]	@ 0x34
 8000652:	e004      	b.n	800065e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000654:	f001 f96e 	bl	8001934 <HAL_RCC_GetPCLK1Freq>
 8000658:	4603      	mov	r3, r0
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800065e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000660:	4a23      	ldr	r2, [pc, #140]	@ (80006f0 <HAL_InitTick+0xec>)
 8000662:	fba2 2303 	umull	r2, r3, r2, r3
 8000666:	0c9b      	lsrs	r3, r3, #18
 8000668:	3b01      	subs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800066c:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <HAL_InitTick+0xf0>)
 800066e:	4a22      	ldr	r2, [pc, #136]	@ (80006f8 <HAL_InitTick+0xf4>)
 8000670:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <HAL_InitTick+0xf0>)
 8000674:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000678:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800067a:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <HAL_InitTick+0xf0>)
 800067c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800067e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <HAL_InitTick+0xf0>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <HAL_InitTick+0xf0>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <HAL_InitTick+0xf0>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000692:	4818      	ldr	r0, [pc, #96]	@ (80006f4 <HAL_InitTick+0xf0>)
 8000694:	f001 f9de 	bl	8001a54 <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800069e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d11b      	bne.n	80006de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80006a6:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <HAL_InitTick+0xf0>)
 80006a8:	f001 fa2c 	bl	8001b04 <HAL_TIM_Base_Start_IT>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80006b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d111      	bne.n	80006de <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006ba:	201e      	movs	r0, #30
 80006bc:	f000 fb1f 	bl	8000cfe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b0f      	cmp	r3, #15
 80006c4:	d808      	bhi.n	80006d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006c6:	2200      	movs	r2, #0
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	201e      	movs	r0, #30
 80006cc:	f000 fafb 	bl	8000cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d0:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <HAL_InitTick+0xf8>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e002      	b.n	80006de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006d8:	2301      	movs	r3, #1
 80006da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3738      	adds	r7, #56	@ 0x38
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	431bde83 	.word	0x431bde83
 80006f4:	2000037c 	.word	0x2000037c
 80006f8:	40000800 	.word	0x40000800
 80006fc:	20000010 	.word	0x20000010

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000704:	f001 f96e 	bl	80019e4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <NMI_Handler+0x8>

0800070c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <MemManage_Handler+0x4>

0800071c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <UsageFault_Handler+0x4>

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <TIM4_IRQHandler+0x10>)
 800073e:	f001 fa33 	bl	8001ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000037c 	.word	0x2000037c

0800074c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000750:	4802      	ldr	r0, [pc, #8]	@ (800075c <USART1_IRQHandler+0x10>)
 8000752:	f001 fc4f 	bl	8001ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200003c8 	.word	0x200003c8

08000760 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000764:	4802      	ldr	r0, [pc, #8]	@ (8000770 <USART2_IRQHandler+0x10>)
 8000766:	f001 fc45 	bl	8001ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000410 	.word	0x20000410

08000774 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000778:	4802      	ldr	r0, [pc, #8]	@ (8000784 <USART3_IRQHandler+0x10>)
 800077a:	f001 fc3b 	bl	8001ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000458 	.word	0x20000458

08000788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000790:	4a14      	ldr	r2, [pc, #80]	@ (80007e4 <_sbrk+0x5c>)
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <_sbrk+0x60>)
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <_sbrk+0x64>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <_sbrk+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d207      	bcs.n	80007c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b8:	f004 fae0 	bl	8004d7c <__errno>
 80007bc:	4603      	mov	r3, r0
 80007be:	220c      	movs	r2, #12
 80007c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	e009      	b.n	80007dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ce:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <_sbrk+0x64>)
 80007d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20005000 	.word	0x20005000
 80007e8:	00000400 	.word	0x00000400
 80007ec:	200003c4 	.word	0x200003c4
 80007f0:	20002738 	.word	0x20002738

080007f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <MX_USART1_UART_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000838:	f001 fb56 	bl	8001ee8 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000842:	f7ff fea1 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200003c8 	.word	0x200003c8
 8000850:	40013800 	.word	0x40013800

08000854 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_USART2_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800088c:	f001 fb2c 	bl	8001ee8 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f7ff fe77 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000410 	.word	0x20000410
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <MX_USART3_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_USART3_UART_Init+0x4c>)
 80008e0:	f001 fb02 	bl	8001ee8 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f7ff fe4d 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000458 	.word	0x20000458
 80008f8:	40004800 	.word	0x40004800

080008fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	@ 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a5f      	ldr	r2, [pc, #380]	@ (8000a94 <HAL_UART_MspInit+0x198>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d13a      	bne.n	8000992 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091c:	4b5e      	ldr	r3, [pc, #376]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a5d      	ldr	r2, [pc, #372]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b5b      	ldr	r3, [pc, #364]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b58      	ldr	r3, [pc, #352]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a57      	ldr	r2, [pc, #348]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b55      	ldr	r3, [pc, #340]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800094c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	4619      	mov	r1, r3
 8000960:	484e      	ldr	r0, [pc, #312]	@ (8000a9c <HAL_UART_MspInit+0x1a0>)
 8000962:	f000 fa8d 	bl	8000e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4619      	mov	r1, r3
 800097a:	4848      	ldr	r0, [pc, #288]	@ (8000a9c <HAL_UART_MspInit+0x1a0>)
 800097c:	f000 fa80 	bl	8000e80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2105      	movs	r1, #5
 8000984:	2025      	movs	r0, #37	@ 0x25
 8000986:	f000 f99e 	bl	8000cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800098a:	2025      	movs	r0, #37	@ 0x25
 800098c:	f000 f9b7 	bl	8000cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000990:	e07c      	b.n	8000a8c <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a42      	ldr	r2, [pc, #264]	@ (8000aa0 <HAL_UART_MspInit+0x1a4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d138      	bne.n	8000a0e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800099c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	4a3d      	ldr	r2, [pc, #244]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 80009a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a6:	61d3      	str	r3, [r2, #28]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b38      	ldr	r3, [pc, #224]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a37      	ldr	r2, [pc, #220]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b35      	ldr	r3, [pc, #212]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009cc:	2304      	movs	r3, #4
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4619      	mov	r1, r3
 80009de:	482f      	ldr	r0, [pc, #188]	@ (8000a9c <HAL_UART_MspInit+0x1a0>)
 80009e0:	f000 fa4e 	bl	8000e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e4:	2308      	movs	r3, #8
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4619      	mov	r1, r3
 80009f6:	4829      	ldr	r0, [pc, #164]	@ (8000a9c <HAL_UART_MspInit+0x1a0>)
 80009f8:	f000 fa42 	bl	8000e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2105      	movs	r1, #5
 8000a00:	2026      	movs	r0, #38	@ 0x26
 8000a02:	f000 f960 	bl	8000cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a06:	2026      	movs	r0, #38	@ 0x26
 8000a08:	f000 f979 	bl	8000cfe <HAL_NVIC_EnableIRQ>
}
 8000a0c:	e03e      	b.n	8000a8c <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a24      	ldr	r2, [pc, #144]	@ (8000aa4 <HAL_UART_MspInit+0x1a8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d139      	bne.n	8000a8c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000a1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a22:	61d3      	str	r3, [r2, #28]
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a18      	ldr	r2, [pc, #96]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <HAL_UART_MspInit+0x19c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4812      	ldr	r0, [pc, #72]	@ (8000aa8 <HAL_UART_MspInit+0x1ac>)
 8000a5e:	f000 fa0f 	bl	8000e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <HAL_UART_MspInit+0x1ac>)
 8000a78:	f000 fa02 	bl	8000e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2105      	movs	r1, #5
 8000a80:	2027      	movs	r0, #39	@ 0x27
 8000a82:	f000 f920 	bl	8000cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a86:	2027      	movs	r0, #39	@ 0x27
 8000a88:	f000 f939 	bl	8000cfe <HAL_NVIC_EnableIRQ>
}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	@ 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40004800 	.word	0x40004800
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aac:	f7ff fea2 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ab2:	490c      	ldr	r1, [pc, #48]	@ (8000ae4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ac8:	4c09      	ldr	r4, [pc, #36]	@ (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f004 f957 	bl	8004d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff fced 	bl	80004b8 <main>
  bx lr
 8000ade:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ae8:	08005864 	.word	0x08005864
  ldr r2, =_sbss
 8000aec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000af0:	20002738 	.word	0x20002738

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_Init+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <HAL_Init+0x28>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f8d1 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f7ff fd78 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fd3e 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <HAL_IncTick+0x1c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_IncTick+0x20>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a03      	ldr	r2, [pc, #12]	@ (8000b44 <HAL_IncTick+0x20>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	20000014 	.word	0x20000014
 8000b44:	200004a0 	.word	0x200004a0

08000b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	@ (8000b58 <HAL_GetTick+0x10>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	200004a0 	.word	0x200004a0

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4906      	ldr	r1, [pc, #24]	@ (8000bf4 <__NVIC_EnableIRQ+0x34>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	@ 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff4f 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff64 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ffb2 	bl	8000c4c <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff81 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff57 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d008      	beq.n	8000d44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2204      	movs	r2, #4
 8000d36:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e020      	b.n	8000d86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 020e 	bic.w	r2, r2, #14
 8000d52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d005      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e051      	b.n	8000e58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 020e 	bic.w	r2, r2, #14
 8000dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0201 	bic.w	r2, r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a22      	ldr	r2, [pc, #136]	@ (8000e64 <HAL_DMA_Abort_IT+0xd4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d029      	beq.n	8000e32 <HAL_DMA_Abort_IT+0xa2>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <HAL_DMA_Abort_IT+0xd8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d022      	beq.n	8000e2e <HAL_DMA_Abort_IT+0x9e>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1f      	ldr	r2, [pc, #124]	@ (8000e6c <HAL_DMA_Abort_IT+0xdc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01a      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x98>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e70 <HAL_DMA_Abort_IT+0xe0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d012      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x92>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <HAL_DMA_Abort_IT+0xe4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00a      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x8c>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e78 <HAL_DMA_Abort_IT+0xe8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d102      	bne.n	8000e16 <HAL_DMA_Abort_IT+0x86>
 8000e10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e14:	e00e      	b.n	8000e34 <HAL_DMA_Abort_IT+0xa4>
 8000e16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e1a:	e00b      	b.n	8000e34 <HAL_DMA_Abort_IT+0xa4>
 8000e1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e20:	e008      	b.n	8000e34 <HAL_DMA_Abort_IT+0xa4>
 8000e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e26:	e005      	b.n	8000e34 <HAL_DMA_Abort_IT+0xa4>
 8000e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e2c:	e002      	b.n	8000e34 <HAL_DMA_Abort_IT+0xa4>
 8000e2e:	2310      	movs	r3, #16
 8000e30:	e000      	b.n	8000e34 <HAL_DMA_Abort_IT+0xa4>
 8000e32:	2301      	movs	r3, #1
 8000e34:	4a11      	ldr	r2, [pc, #68]	@ (8000e7c <HAL_DMA_Abort_IT+0xec>)
 8000e36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	4798      	blx	r3
    } 
  }
  return status;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40020008 	.word	0x40020008
 8000e68:	4002001c 	.word	0x4002001c
 8000e6c:	40020030 	.word	0x40020030
 8000e70:	40020044 	.word	0x40020044
 8000e74:	40020058 	.word	0x40020058
 8000e78:	4002006c 	.word	0x4002006c
 8000e7c:	40020000 	.word	0x40020000

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b08b      	sub	sp, #44	@ 0x2c
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e169      	b.n	8001168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e94:	2201      	movs	r2, #1
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8158 	bne.w	8001162 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4a9a      	ldr	r2, [pc, #616]	@ (8001120 <HAL_GPIO_Init+0x2a0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d05e      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ebc:	4a98      	ldr	r2, [pc, #608]	@ (8001120 <HAL_GPIO_Init+0x2a0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d875      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ec2:	4a98      	ldr	r2, [pc, #608]	@ (8001124 <HAL_GPIO_Init+0x2a4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d058      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ec8:	4a96      	ldr	r2, [pc, #600]	@ (8001124 <HAL_GPIO_Init+0x2a4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d86f      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ece:	4a96      	ldr	r2, [pc, #600]	@ (8001128 <HAL_GPIO_Init+0x2a8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d052      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ed4:	4a94      	ldr	r2, [pc, #592]	@ (8001128 <HAL_GPIO_Init+0x2a8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d869      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000eda:	4a94      	ldr	r2, [pc, #592]	@ (800112c <HAL_GPIO_Init+0x2ac>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d04c      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ee0:	4a92      	ldr	r2, [pc, #584]	@ (800112c <HAL_GPIO_Init+0x2ac>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d863      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ee6:	4a92      	ldr	r2, [pc, #584]	@ (8001130 <HAL_GPIO_Init+0x2b0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d046      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000eec:	4a90      	ldr	r2, [pc, #576]	@ (8001130 <HAL_GPIO_Init+0x2b0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d85d      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d82a      	bhi.n	8000f4c <HAL_GPIO_Init+0xcc>
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d859      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000efa:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <HAL_GPIO_Init+0x80>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f55 	.word	0x08000f55
 8000f08:	08000f67 	.word	0x08000f67
 8000f0c:	08000fa9 	.word	0x08000fa9
 8000f10:	08000faf 	.word	0x08000faf
 8000f14:	08000faf 	.word	0x08000faf
 8000f18:	08000faf 	.word	0x08000faf
 8000f1c:	08000faf 	.word	0x08000faf
 8000f20:	08000faf 	.word	0x08000faf
 8000f24:	08000faf 	.word	0x08000faf
 8000f28:	08000faf 	.word	0x08000faf
 8000f2c:	08000faf 	.word	0x08000faf
 8000f30:	08000faf 	.word	0x08000faf
 8000f34:	08000faf 	.word	0x08000faf
 8000f38:	08000faf 	.word	0x08000faf
 8000f3c:	08000faf 	.word	0x08000faf
 8000f40:	08000faf 	.word	0x08000faf
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000f71 	.word	0x08000f71
 8000f4c:	4a79      	ldr	r2, [pc, #484]	@ (8001134 <HAL_GPIO_Init+0x2b4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f52:	e02c      	b.n	8000fae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e029      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	3304      	adds	r3, #4
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e024      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e01f      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	330c      	adds	r3, #12
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e01a      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f82:	2304      	movs	r3, #4
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e013      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f90:	2308      	movs	r3, #8
 8000f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	611a      	str	r2, [r3, #16]
          break;
 8000f9a:	e009      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	615a      	str	r2, [r3, #20]
          break;
 8000fa6:	e003      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          break;
 8000fae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d801      	bhi.n	8000fba <HAL_GPIO_Init+0x13a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	e001      	b.n	8000fbe <HAL_GPIO_Init+0x13e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	@ 0xff
 8000fc4:	d802      	bhi.n	8000fcc <HAL_GPIO_Init+0x14c>
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x152>
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	3b08      	subs	r3, #8
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	210f      	movs	r1, #15
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	6a39      	ldr	r1, [r7, #32]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	431a      	orrs	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80b1 	beq.w	8001162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001000:	4b4d      	ldr	r3, [pc, #308]	@ (8001138 <HAL_GPIO_Init+0x2b8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a4c      	ldr	r2, [pc, #304]	@ (8001138 <HAL_GPIO_Init+0x2b8>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b4a      	ldr	r3, [pc, #296]	@ (8001138 <HAL_GPIO_Init+0x2b8>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001018:	4a48      	ldr	r2, [pc, #288]	@ (800113c <HAL_GPIO_Init+0x2bc>)
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a40      	ldr	r2, [pc, #256]	@ (8001140 <HAL_GPIO_Init+0x2c0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d013      	beq.n	800106c <HAL_GPIO_Init+0x1ec>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a3f      	ldr	r2, [pc, #252]	@ (8001144 <HAL_GPIO_Init+0x2c4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d00d      	beq.n	8001068 <HAL_GPIO_Init+0x1e8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <HAL_GPIO_Init+0x2c8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x1e4>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3d      	ldr	r2, [pc, #244]	@ (800114c <HAL_GPIO_Init+0x2cc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d101      	bne.n	8001060 <HAL_GPIO_Init+0x1e0>
 800105c:	2303      	movs	r3, #3
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001060:	2304      	movs	r3, #4
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 800106c:	2300      	movs	r3, #0
 800106e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800107e:	492f      	ldr	r1, [pc, #188]	@ (800113c <HAL_GPIO_Init+0x2bc>)
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001098:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	492c      	ldr	r1, [pc, #176]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4928      	ldr	r1, [pc, #160]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4922      	ldr	r1, [pc, #136]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60cb      	str	r3, [r1, #12]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ce:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	491e      	ldr	r1, [pc, #120]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4918      	ldr	r1, [pc, #96]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	4914      	ldr	r1, [pc, #80]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 8001100:	4013      	ands	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d021      	beq.n	8001154 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	490e      	ldr	r1, [pc, #56]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
 800111c:	e021      	b.n	8001162 <HAL_GPIO_Init+0x2e2>
 800111e:	bf00      	nop
 8001120:	10320000 	.word	0x10320000
 8001124:	10310000 	.word	0x10310000
 8001128:	10220000 	.word	0x10220000
 800112c:	10210000 	.word	0x10210000
 8001130:	10120000 	.word	0x10120000
 8001134:	10110000 	.word	0x10110000
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	40010800 	.word	0x40010800
 8001144:	40010c00 	.word	0x40010c00
 8001148:	40011000 	.word	0x40011000
 800114c:	40011400 	.word	0x40011400
 8001150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <HAL_GPIO_Init+0x304>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	43db      	mvns	r3, r3
 800115c:	4909      	ldr	r1, [pc, #36]	@ (8001184 <HAL_GPIO_Init+0x304>)
 800115e:	4013      	ands	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	3301      	adds	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	fa22 f303 	lsr.w	r3, r2, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	f47f ae8e 	bne.w	8000e94 <HAL_GPIO_Init+0x14>
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	372c      	adds	r7, #44	@ 0x2c
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e272      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8087 	beq.w	80012b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a8:	4b92      	ldr	r3, [pc, #584]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d00c      	beq.n	80011ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011b4:	4b8f      	ldr	r3, [pc, #572]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d112      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5e>
 80011c0:	4b8c      	ldr	r3, [pc, #560]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011cc:	d10b      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ce:	4b89      	ldr	r3, [pc, #548]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d06c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x12c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d168      	bne.n	80012b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e24c      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x76>
 80011f0:	4b80      	ldr	r3, [pc, #512]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a7f      	ldr	r2, [pc, #508]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e02e      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x98>
 8001206:	4b7b      	ldr	r3, [pc, #492]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a7a      	ldr	r2, [pc, #488]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b78      	ldr	r3, [pc, #480]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a77      	ldr	r2, [pc, #476]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e01d      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0xbc>
 800122a:	4b72      	ldr	r3, [pc, #456]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a71      	ldr	r2, [pc, #452]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b6f      	ldr	r3, [pc, #444]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6e      	ldr	r2, [pc, #440]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 8001244:	4b6b      	ldr	r3, [pc, #428]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6a      	ldr	r2, [pc, #424]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b68      	ldr	r3, [pc, #416]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a67      	ldr	r2, [pc, #412]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fc70 	bl	8000b48 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fc6c 	bl	8000b48 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	@ 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e200      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0xe4>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc5c 	bl	8000b48 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fc58 	bl	8000b48 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	@ 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e1ec      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	4b53      	ldr	r3, [pc, #332]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x10c>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d063      	beq.n	800138a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c2:	4b4c      	ldr	r3, [pc, #304]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ce:	4b49      	ldr	r3, [pc, #292]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d11c      	bne.n	8001314 <HAL_RCC_OscConfig+0x18c>
 80012da:	4b46      	ldr	r3, [pc, #280]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d116      	bne.n	8001314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x176>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e1c0      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b3d      	ldr	r3, [pc, #244]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4939      	ldr	r1, [pc, #228]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	e03a      	b.n	800138a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131c:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <HAL_RCC_OscConfig+0x270>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fc11 	bl	8000b48 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fc0d 	bl	8000b48 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1a1      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4927      	ldr	r1, [pc, #156]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135e:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <HAL_RCC_OscConfig+0x270>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fbf0 	bl	8000b48 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff fbec 	bl	8000b48 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e180      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d03a      	beq.n	800140c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d019      	beq.n	80013d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <HAL_RCC_OscConfig+0x274>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff fbd0 	bl	8000b48 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff fbcc 	bl	8000b48 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e160      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 fb1e 	bl	8001a0c <RCC_Delay>
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_RCC_OscConfig+0x274>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fbb6 	bl	8000b48 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013de:	e00f      	b.n	8001400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fbb2 	bl	8000b48 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d908      	bls.n	8001400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e146      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	42420000 	.word	0x42420000
 80013fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	4b92      	ldr	r3, [pc, #584]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1e9      	bne.n	80013e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80a6 	beq.w	8001566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b8b      	ldr	r3, [pc, #556]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b88      	ldr	r3, [pc, #544]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a87      	ldr	r2, [pc, #540]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b85      	ldr	r3, [pc, #532]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b82      	ldr	r3, [pc, #520]	@ (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001452:	4b7f      	ldr	r3, [pc, #508]	@ (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a7e      	ldr	r2, [pc, #504]	@ (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fb73 	bl	8000b48 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001466:	f7ff fb6f 	bl	8000b48 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	@ 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e103      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b75      	ldr	r3, [pc, #468]	@ (8001650 <HAL_RCC_OscConfig+0x4c8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x312>
 800148c:	4b6f      	ldr	r3, [pc, #444]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a6e      	ldr	r2, [pc, #440]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	e02d      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x334>
 80014a2:	4b6a      	ldr	r3, [pc, #424]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a69      	ldr	r2, [pc, #420]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	4b67      	ldr	r3, [pc, #412]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a66      	ldr	r2, [pc, #408]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	e01c      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x356>
 80014c4:	4b61      	ldr	r3, [pc, #388]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a60      	ldr	r2, [pc, #384]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	4b5e      	ldr	r3, [pc, #376]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a5d      	ldr	r2, [pc, #372]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e00b      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 80014de:	4b5b      	ldr	r3, [pc, #364]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4a5a      	ldr	r2, [pc, #360]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	4b58      	ldr	r3, [pc, #352]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a57      	ldr	r2, [pc, #348]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d015      	beq.n	800152a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb23 	bl	8000b48 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fb1f 	bl	8000b48 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0b1      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ee      	beq.n	8001506 <HAL_RCC_OscConfig+0x37e>
 8001528:	e014      	b.n	8001554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fb0d 	bl	8000b48 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fb09 	bl	8000b48 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e09b      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	4b40      	ldr	r3, [pc, #256]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1ee      	bne.n	8001532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d105      	bne.n	8001566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155a:	4b3c      	ldr	r3, [pc, #240]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a3b      	ldr	r2, [pc, #236]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8087 	beq.w	800167e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001570:	4b36      	ldr	r3, [pc, #216]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b08      	cmp	r3, #8
 800157a:	d061      	beq.n	8001640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d146      	bne.n	8001612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001584:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <HAL_RCC_OscConfig+0x4cc>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fadd 	bl	8000b48 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fad9 	bl	8000b48 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e06d      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	4b29      	ldr	r3, [pc, #164]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015b8:	d108      	bne.n	80015cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ba:	4b24      	ldr	r3, [pc, #144]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4921      	ldr	r1, [pc, #132]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a19      	ldr	r1, [r3, #32]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	430b      	orrs	r3, r1
 80015de:	491b      	ldr	r1, [pc, #108]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff faad 	bl	8000b48 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff faa9 	bl	8000b48 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e03d      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46a>
 8001610:	e035      	b.n	800167e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <HAL_RCC_OscConfig+0x4cc>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fa96 	bl	8000b48 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fa92 	bl	8000b48 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e026      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x498>
 800163e:	e01e      	b.n	800167e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e019      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
 800164c:	40021000 	.word	0x40021000
 8001650:	40007000 	.word	0x40007000
 8001654:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_RCC_OscConfig+0x500>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	429a      	cmp	r2, r3
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0d0      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b6a      	ldr	r3, [pc, #424]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d910      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b67      	ldr	r3, [pc, #412]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 0207 	bic.w	r2, r3, #7
 80016b6:	4965      	ldr	r1, [pc, #404]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b63      	ldr	r3, [pc, #396]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0b8      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e8:	4b59      	ldr	r3, [pc, #356]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a58      	ldr	r2, [pc, #352]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001700:	4b53      	ldr	r3, [pc, #332]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a52      	ldr	r2, [pc, #328]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800170a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4b50      	ldr	r3, [pc, #320]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	494d      	ldr	r1, [pc, #308]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d040      	beq.n	80017ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b47      	ldr	r3, [pc, #284]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d115      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e07f      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e073      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	4b3d      	ldr	r3, [pc, #244]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06b      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176a:	4b39      	ldr	r3, [pc, #228]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f023 0203 	bic.w	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4936      	ldr	r1, [pc, #216]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177c:	f7ff f9e4 	bl	8000b48 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	e00a      	b.n	800179a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7ff f9e0 	bl	8000b48 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e053      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	4b2d      	ldr	r3, [pc, #180]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 020c 	and.w	r2, r3, #12
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d1eb      	bne.n	8001784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ac:	4b27      	ldr	r3, [pc, #156]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d210      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0207 	bic.w	r2, r3, #7
 80017c2:	4922      	ldr	r1, [pc, #136]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e032      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e8:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4916      	ldr	r1, [pc, #88]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	490e      	ldr	r1, [pc, #56]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800181a:	f000 f82d 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 800181e:	4602      	mov	r2, r0
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	490a      	ldr	r1, [pc, #40]	@ (8001854 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	5ccb      	ldrb	r3, [r1, r3]
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	4a09      	ldr	r2, [pc, #36]	@ (8001858 <HAL_RCC_ClockConfig+0x1cc>)
 8001834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_RCC_ClockConfig+0x1d0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fee2 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000
 8001850:	40021000 	.word	0x40021000
 8001854:	080057f4 	.word	0x080057f4
 8001858:	2000000c 	.word	0x2000000c
 800185c:	20000010 	.word	0x20000010

08001860 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <HAL_RCC_EnableCSS+0x14>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	4242004c 	.word	0x4242004c

08001878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_RCC_GetSysClockFreq+0x94>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x30>
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x36>
 80018a6:	e027      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x98>)
 80018aa:	613b      	str	r3, [r7, #16]
      break;
 80018ac:	e027      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0c9b      	lsrs	r3, r3, #18
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018b8:	5cd3      	ldrb	r3, [r2, r3]
 80018ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_RCC_GetSysClockFreq+0x94>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	0c5b      	lsrs	r3, r3, #17
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x98>)
 80018da:	fb03 f202 	mul.w	r2, r3, r2
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e004      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0c      	ldr	r2, [pc, #48]	@ (800191c <HAL_RCC_GetSysClockFreq+0xa4>)
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	613b      	str	r3, [r7, #16]
      break;
 80018f6:	e002      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x98>)
 80018fa:	613b      	str	r3, [r7, #16]
      break;
 80018fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fe:	693b      	ldr	r3, [r7, #16]
}
 8001900:	4618      	mov	r0, r3
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	007a1200 	.word	0x007a1200
 8001914:	0800580c 	.word	0x0800580c
 8001918:	0800581c 	.word	0x0800581c
 800191c:	003d0900 	.word	0x003d0900

08001920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001924:	4b02      	ldr	r3, [pc, #8]	@ (8001930 <HAL_RCC_GetHCLKFreq+0x10>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	2000000c 	.word	0x2000000c

08001934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001938:	f7ff fff2 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	@ (8001958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	08005804 	.word	0x08005804

0800195c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001960:	f7ff ffde 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	0adb      	lsrs	r3, r3, #11
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4903      	ldr	r1, [pc, #12]	@ (8001980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	08005804 	.word	0x08005804

08001984 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	220f      	movs	r2, #15
 8001992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_RCC_GetClockConfig+0x58>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_RCC_GetClockConfig+0x58>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019ac:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <HAL_RCC_GetClockConfig+0x58>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <HAL_RCC_GetClockConfig+0x58>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0207 	and.w	r2, r3, #7
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_NMI_IRQHandler+0x20>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f0:	2b80      	cmp	r3, #128	@ 0x80
 80019f2:	d104      	bne.n	80019fe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80019f4:	f000 f828 	bl	8001a48 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_RCC_NMI_IRQHandler+0x24>)
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	701a      	strb	r2, [r3, #0]
  }
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	4002100a 	.word	0x4002100a

08001a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <RCC_Delay+0x34>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <RCC_Delay+0x38>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0a5b      	lsrs	r3, r3, #9
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a28:	bf00      	nop
  }
  while (Delay --);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f9      	bne.n	8001a28 <RCC_Delay+0x1c>
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	2000000c 	.word	0x2000000c
 8001a44:	10624dd3 	.word	0x10624dd3

08001a48 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e041      	b.n	8001aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f839 	bl	8001af2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 f9b4 	bl	8001e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d001      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e03a      	b.n	8001b92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a18      	ldr	r2, [pc, #96]	@ (8001b9c <HAL_TIM_Base_Start_IT+0x98>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x58>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b46:	d009      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x58>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x58>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a13      	ldr	r2, [pc, #76]	@ (8001ba4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d111      	bne.n	8001b80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d010      	beq.n	8001b90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7e:	e007      	b.n	8001b90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d122      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d11b      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0202 	mvn.w	r2, #2
 8001bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8ed 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8e0 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f8ef 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d122      	bne.n	8001c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d11b      	bne.n	8001c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0204 	mvn.w	r2, #4
 8001c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8c3 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8b6 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8c5 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d122      	bne.n	8001cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d11b      	bne.n	8001cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0208 	mvn.w	r2, #8
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2204      	movs	r2, #4
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f899 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f88c 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f89b 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d122      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b10      	cmp	r3, #16
 8001cc6:	d11b      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0210 	mvn.w	r2, #16
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f86f 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f862 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f871 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10e      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d107      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0201 	mvn.w	r2, #1
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fc1c 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d36:	2b80      	cmp	r3, #128	@ 0x80
 8001d38:	d10e      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d44:	2b80      	cmp	r3, #128	@ 0x80
 8001d46:	d107      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8bf 	bl	8001ed6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d62:	2b40      	cmp	r3, #64	@ 0x40
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d70:	2b40      	cmp	r3, #64	@ 0x40
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f835 	bl	8001dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0220 	mvn.w	r2, #32
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f88a 	bl	8001ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a29      	ldr	r2, [pc, #164]	@ (8001eb8 <TIM_Base_SetConfig+0xb8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x30>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x30>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a26      	ldr	r2, [pc, #152]	@ (8001ebc <TIM_Base_SetConfig+0xbc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x30>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a25      	ldr	r2, [pc, #148]	@ (8001ec0 <TIM_Base_SetConfig+0xc0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb8 <TIM_Base_SetConfig+0xb8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00b      	beq.n	8001e62 <TIM_Base_SetConfig+0x62>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e50:	d007      	beq.n	8001e62 <TIM_Base_SetConfig+0x62>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a19      	ldr	r2, [pc, #100]	@ (8001ebc <TIM_Base_SetConfig+0xbc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d003      	beq.n	8001e62 <TIM_Base_SetConfig+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <TIM_Base_SetConfig+0xc0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d108      	bne.n	8001e74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <TIM_Base_SetConfig+0xb8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d103      	bne.n	8001ea8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	615a      	str	r2, [r3, #20]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800

08001ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e042      	b.n	8001f80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fcf4 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2224      	movs	r2, #36	@ 0x24
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fcab 	bl	8002888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d121      	bne.n	8001fe6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_UART_Transmit_IT+0x26>
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e01a      	b.n	8001fe8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2221      	movs	r2, #33	@ 0x21
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fe0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10f      	bne.n	800205a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800203a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_UART_IRQHandler+0x66>
 8002046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fb5a 	bl	800270c <UART_Receive_IT>
      return;
 8002058:	e25b      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800205a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80de 	beq.w	8002220 <HAL_UART_IRQHandler+0x22c>
 8002064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002074:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80d1 	beq.w	8002220 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800207e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_UART_IRQHandler+0xae>
 800208a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800208e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_UART_IRQHandler+0xd2>
 80020ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_UART_IRQHandler+0xf6>
 80020d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f043 0204 	orr.w	r2, r3, #4
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d011      	beq.n	800211a <HAL_UART_IRQHandler+0x126>
 80020f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f043 0208 	orr.w	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 81f2 	beq.w	8002508 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_UART_IRQHandler+0x14e>
 8002130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fae5 	bl	800270c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <HAL_UART_IRQHandler+0x17a>
 8002166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04f      	beq.n	800220e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f9ef 	bl	8002552 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d041      	beq.n	8002206 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3314      	adds	r3, #20
 8002188:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800218c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002190:	e853 3f00 	ldrex	r3, [r3]
 8002194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002198:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800219c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3314      	adds	r3, #20
 80021aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80021ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80021b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80021ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80021be:	e841 2300 	strex	r3, r2, [r1]
 80021c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80021c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1d9      	bne.n	8002182 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d013      	beq.n	80021fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021da:	4a7e      	ldr	r2, [pc, #504]	@ (80023d4 <HAL_UART_IRQHandler+0x3e0>)
 80021dc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fdd4 	bl	8000d90 <HAL_DMA_Abort_IT>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021f8:	4610      	mov	r0, r2
 80021fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021fc:	e00e      	b.n	800221c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f993 	bl	800252a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002204:	e00a      	b.n	800221c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f98f 	bl	800252a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	e006      	b.n	800221c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f98b 	bl	800252a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800221a:	e175      	b.n	8002508 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800221c:	bf00      	nop
    return;
 800221e:	e173      	b.n	8002508 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	2b01      	cmp	r3, #1
 8002226:	f040 814f 	bne.w	80024c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800222a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8148 	beq.w	80024c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8141 	beq.w	80024c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80b6 	beq.w	80023d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002278:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8145 	beq.w	800250c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800228a:	429a      	cmp	r2, r3
 800228c:	f080 813e 	bcs.w	800250c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002296:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b20      	cmp	r3, #32
 80022a0:	f000 8088 	beq.w	80023b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022b2:	e853 3f00 	ldrex	r3, [r3]
 80022b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80022ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	330c      	adds	r3, #12
 80022cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80022d0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022e0:	e841 2300 	strex	r3, r2, [r1]
 80022e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1d9      	bne.n	80022a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3314      	adds	r3, #20
 80022f6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022fa:	e853 3f00 	ldrex	r3, [r3]
 80022fe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002300:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002314:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002318:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800231c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002320:	e841 2300 	strex	r3, r2, [r1]
 8002324:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002326:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e1      	bne.n	80022f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3314      	adds	r3, #20
 8002332:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002336:	e853 3f00 	ldrex	r3, [r3]
 800233a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800233c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800233e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002342:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3314      	adds	r3, #20
 800234c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002350:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002352:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002354:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002356:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002358:	e841 2300 	strex	r3, r2, [r1]
 800235c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800235e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e3      	bne.n	800232c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	330c      	adds	r3, #12
 8002378:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800237c:	e853 3f00 	ldrex	r3, [r3]
 8002380:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002384:	f023 0310 	bic.w	r3, r3, #16
 8002388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002396:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002398:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800239c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800239e:	e841 2300 	strex	r3, r2, [r1]
 80023a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80023a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e3      	bne.n	8002372 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fcb3 	bl	8000d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4619      	mov	r1, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8b6 	bl	800253c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023d0:	e09c      	b.n	800250c <HAL_UART_IRQHandler+0x518>
 80023d2:	bf00      	nop
 80023d4:	08002617 	.word	0x08002617
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 808e 	beq.w	8002510 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8089 	beq.w	8002510 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800240e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002414:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002422:	647a      	str	r2, [r7, #68]	@ 0x44
 8002424:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002428:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e3      	bne.n	80023fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3314      	adds	r3, #20
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	e853 3f00 	ldrex	r3, [r3]
 8002444:	623b      	str	r3, [r7, #32]
   return(result);
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3314      	adds	r3, #20
 8002456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800245a:	633a      	str	r2, [r7, #48]	@ 0x30
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002462:	e841 2300 	strex	r3, r2, [r1]
 8002466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e3      	bne.n	8002436 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	e853 3f00 	ldrex	r3, [r3]
 800248a:	60fb      	str	r3, [r7, #12]
   return(result);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0310 	bic.w	r3, r3, #16
 8002492:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80024a0:	61fa      	str	r2, [r7, #28]
 80024a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	69b9      	ldr	r1, [r7, #24]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	e841 2300 	strex	r3, r2, [r1]
 80024ac:	617b      	str	r3, [r7, #20]
   return(result);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e3      	bne.n	800247c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f83b 	bl	800253c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024c6:	e023      	b.n	8002510 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_UART_IRQHandler+0x4f4>
 80024d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8ac 	bl	800263e <UART_Transmit_IT>
    return;
 80024e6:	e014      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_UART_IRQHandler+0x51e>
 80024f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8eb 	bl	80026dc <UART_EndTransmit_IT>
    return;
 8002506:	e004      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
    return;
 8002508:	bf00      	nop
 800250a:	e002      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
      return;
 800250c:	bf00      	nop
 800250e:	e000      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
      return;
 8002510:	bf00      	nop
  }
}
 8002512:	37e8      	adds	r7, #232	@ 0xe8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002552:	b480      	push	{r7}
 8002554:	b095      	sub	sp, #84	@ 0x54
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002564:	e853 3f00 	ldrex	r3, [r3]
 8002568:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	330c      	adds	r3, #12
 8002578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800257a:	643a      	str	r2, [r7, #64]	@ 0x40
 800257c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002580:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002582:	e841 2300 	strex	r3, r2, [r1]
 8002586:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e5      	bne.n	800255a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3314      	adds	r3, #20
 8002594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	e853 3f00 	ldrex	r3, [r3]
 800259c:	61fb      	str	r3, [r7, #28]
   return(result);
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3314      	adds	r3, #20
 80025ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025b6:	e841 2300 	strex	r3, r2, [r1]
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1e5      	bne.n	800258e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d119      	bne.n	80025fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	330c      	adds	r3, #12
 80025d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f023 0310 	bic.w	r3, r3, #16
 80025e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	330c      	adds	r3, #12
 80025e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025ea:	61ba      	str	r2, [r7, #24]
 80025ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ee:	6979      	ldr	r1, [r7, #20]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	e841 2300 	strex	r3, r2, [r1]
 80025f6:	613b      	str	r3, [r7, #16]
   return(result);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1e5      	bne.n	80025ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800260c:	bf00      	nop
 800260e:	3754      	adds	r7, #84	@ 0x54
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff ff7a 	bl	800252a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b21      	cmp	r3, #33	@ 0x21
 8002650:	d13e      	bne.n	80026d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800265a:	d114      	bne.n	8002686 <UART_Transmit_IT+0x48>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d110      	bne.n	8002686 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	1c9a      	adds	r2, r3, #2
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	621a      	str	r2, [r3, #32]
 8002684:	e008      	b.n	8002698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	1c59      	adds	r1, r3, #1
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6211      	str	r1, [r2, #32]
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4619      	mov	r1, r3
 80026a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10f      	bne.n	80026cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7fd fd67 	bl	80001d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	@ 0x30
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b22      	cmp	r3, #34	@ 0x22
 800271e:	f040 80ae 	bne.w	800287e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272a:	d117      	bne.n	800275c <UART_Receive_IT+0x50>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d113      	bne.n	800275c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274a:	b29a      	uxth	r2, r3
 800274c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	1c9a      	adds	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28
 800275a:	e026      	b.n	80027aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800276e:	d007      	beq.n	8002780 <UART_Receive_IT+0x74>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <UART_Receive_IT+0x82>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e008      	b.n	80027a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800279a:	b2da      	uxtb	r2, r3
 800279c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4619      	mov	r1, r3
 80027b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d15d      	bne.n	800287a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0220 	bic.w	r2, r2, #32
 80027cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	2b01      	cmp	r3, #1
 8002802:	d135      	bne.n	8002870 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	613b      	str	r3, [r7, #16]
   return(result);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f023 0310 	bic.w	r3, r3, #16
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	330c      	adds	r3, #12
 8002828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282a:	623a      	str	r2, [r7, #32]
 800282c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282e:	69f9      	ldr	r1, [r7, #28]
 8002830:	6a3a      	ldr	r2, [r7, #32]
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	61bb      	str	r3, [r7, #24]
   return(result);
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e5      	bne.n	800280a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b10      	cmp	r3, #16
 800284a:	d10a      	bne.n	8002862 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff fe67 	bl	800253c <HAL_UARTEx_RxEventCallback>
 800286e:	e002      	b.n	8002876 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fe51 	bl	8002518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e002      	b.n	8002880 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3730      	adds	r7, #48	@ 0x30
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80028c2:	f023 030c 	bic.w	r3, r3, #12
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2c      	ldr	r2, [pc, #176]	@ (800299c <UART_SetConfig+0x114>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d103      	bne.n	80028f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028f0:	f7ff f834 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	e002      	b.n	80028fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028f8:	f7ff f81c 	bl	8001934 <HAL_RCC_GetPCLK1Freq>
 80028fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	009a      	lsls	r2, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	4a22      	ldr	r2, [pc, #136]	@ (80029a0 <UART_SetConfig+0x118>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	0119      	lsls	r1, r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fbb2 f2f3 	udiv	r2, r2, r3
 8002934:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <UART_SetConfig+0x118>)
 8002936:	fba3 0302 	umull	r0, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2064      	movs	r0, #100	@ 0x64
 800293e:	fb00 f303 	mul.w	r3, r0, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	3332      	adds	r3, #50	@ 0x32
 8002948:	4a15      	ldr	r2, [pc, #84]	@ (80029a0 <UART_SetConfig+0x118>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002954:	4419      	add	r1, r3
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	fbb2 f2f3 	udiv	r2, r2, r3
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <UART_SetConfig+0x118>)
 800296e:	fba3 0302 	umull	r0, r3, r3, r2
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2064      	movs	r0, #100	@ 0x64
 8002976:	fb00 f303 	mul.w	r3, r0, r3
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	3332      	adds	r3, #50	@ 0x32
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <UART_SetConfig+0x118>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	f003 020f 	and.w	r2, r3, #15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	440a      	add	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40013800 	.word	0x40013800
 80029a0:	51eb851f 	.word	0x51eb851f

080029a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b6:	2b84      	cmp	r3, #132	@ 0x84
 80029b8:	d005      	beq.n	80029c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4413      	add	r3, r2
 80029c2:	3303      	adds	r3, #3
 80029c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d8:	f3ef 8305 	mrs	r3, IPSR
 80029dc:	607b      	str	r3, [r7, #4]
  return(result);
 80029de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029f8:	f000 ffae 	bl	8003958 <vTaskStartScheduler>
  
  return osOK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a04:	b089      	sub	sp, #36	@ 0x24
 8002a06:	af04      	add	r7, sp, #16
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <osThreadCreate+0x54>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685c      	ldr	r4, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691e      	ldr	r6, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffb8 	bl	80029a4 <makeFreeRtosPriority>
 8002a34:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a3e:	9202      	str	r2, [sp, #8]
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	9100      	str	r1, [sp, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4632      	mov	r2, r6
 8002a48:	4629      	mov	r1, r5
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f000 fdce 	bl	80035ec <xTaskCreateStatic>
 8002a50:	4603      	mov	r3, r0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e01c      	b.n	8002a90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685c      	ldr	r4, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a62:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ff9a 	bl	80029a4 <makeFreeRtosPriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	9200      	str	r2, [sp, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	4632      	mov	r2, r6
 8002a7e:	4629      	mov	r1, r5
 8002a80:	4620      	mov	r0, r4
 8002a82:	f000 fe12 	bl	80036aa <xTaskCreate>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d001      	beq.n	8002a90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a90:	68fb      	ldr	r3, [r7, #12]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <osDelay+0x16>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	e000      	b.n	8002ab2 <osDelay+0x18>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 ff1a 	bl	80038ec <vTaskDelay>
  
  return osOK;
 8002ab8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8002ad6:	f7ff ff7c 	bl	80029d2 <inHandlerMode>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01c      	beq.n	8002b1a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002ae0:	6839      	ldr	r1, [r7, #0]
 8002ae2:	f107 0208 	add.w	r2, r7, #8
 8002ae6:	f107 030c 	add.w	r3, r7, #12
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	2201      	movs	r2, #1
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f001 fc1b 	bl	800432c <xTaskGenericNotifyFromISR>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d002      	beq.n	8002b02 <osSignalSet+0x3e>
      return 0x80000000;
 8002afc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002b00:	e019      	b.n	8002b36 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <osSignalSet+0x70>
 8002b08:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <osSignalSet+0x7c>)
 8002b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	e00c      	b.n	8002b34 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8002b1a:	6839      	ldr	r1, [r7, #0]
 8002b1c:	f107 0308 	add.w	r3, r7, #8
 8002b20:	2201      	movs	r2, #1
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f001 fb6c 	bl	8004200 <xTaskGenericNotify>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d002      	beq.n	8002b34 <osSignalSet+0x70>
    return 0x80000000;
 8002b2e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002b32:	e000      	b.n	8002b36 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8002b34:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	e000ed04 	.word	0xe000ed04

08002b44 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b089      	sub	sp, #36	@ 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d103      	bne.n	8002b68 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	e009      	b.n	8002b7c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <osSignalWait+0x38>
      ticks = 1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8002b7c:	f7ff ff29 	bl	80029d2 <inHandlerMode>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8002b86:	2382      	movs	r3, #130	@ 0x82
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	e01b      	b.n	8002bc4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	1d1a      	adds	r2, r3, #4
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2000      	movs	r0, #0
 8002b98:	f001 fad8 	bl	800414c <xTaskNotifyWait>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d008      	beq.n	8002bb4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <osSignalWait+0x6a>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	e00a      	b.n	8002bc4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8002bae:	2340      	movs	r3, #64	@ 0x40
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	e007      	b.n	8002bc4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da02      	bge.n	8002bc0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8002bba:	2386      	movs	r3, #134	@ 0x86
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	e001      	b.n	8002bc4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	461c      	mov	r4, r3
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	3724      	adds	r7, #36	@ 0x24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}

08002bdc <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	3303      	adds	r3, #3
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8002bf0:	2014      	movs	r0, #20
 8002bf2:	f001 febd 	bl	8004970 <pvPortMalloc>
 8002bf6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d046      	beq.n	8002c8c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 feaa 	bl	8004970 <pvPortMalloc>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02b      	beq.n	8002c82 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	fb02 f303 	mul.w	r3, r2, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fe9b 	bl	8004970 <pvPortMalloc>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d011      	beq.n	8002c6c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	e008      	b.n	8002c60 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3f1      	bcc.n	8002c4e <osPoolCreate+0x72>
 8002c6a:	e00f      	b.n	8002c8c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 ff45 	bl	8004b00 <vPortFree>
        vPortFree(thePool);
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f001 ff42 	bl	8004b00 <vPortFree>
        thePool = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e004      	b.n	8002c8c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f001 ff3c 	bl	8004b00 <vPortFree>
      thePool = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <osPoolFree+0x14>
    return osErrorParameter;
 8002ca6:	2380      	movs	r3, #128	@ 0x80
 8002ca8:	e030      	b.n	8002d0c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <osPoolFree+0x1e>
    return osErrorParameter;
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	e02b      	b.n	8002d0c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d201      	bcs.n	8002cc2 <osPoolFree+0x2c>
    return osErrorParameter;
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	e024      	b.n	8002d0c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cd6:	fb01 f202 	mul.w	r2, r1, r2
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <osPoolFree+0x4e>
    return osErrorParameter;
 8002ce0:	2380      	movs	r3, #128	@ 0x80
 8002ce2:	e013      	b.n	8002d0c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d301      	bcc.n	8002cfe <osPoolFree+0x68>
    return osErrorParameter;
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	e006      	b.n	8002d0c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002d16:	b590      	push	{r4, r7, lr}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af02      	add	r7, sp, #8
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d011      	beq.n	8002d4c <osMessageCreate+0x36>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00d      	beq.n	8002d4c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2400      	movs	r4, #0
 8002d42:	9400      	str	r4, [sp, #0]
 8002d44:	f000 f98f 	bl	8003066 <xQueueGenericCreateStatic>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	e008      	b.n	8002d5e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	4619      	mov	r1, r3
 8002d58:	f000 fa01 	bl	800315e <xQueueGenericCreate>
 8002d5c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
	...

08002d68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b08b      	sub	sp, #44	@ 0x2c
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	617b      	str	r3, [r7, #20]
    return event;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	461c      	mov	r4, r3
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d96:	e054      	b.n	8002e42 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d103      	bne.n	8002db0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dae:	e009      	b.n	8002dc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <osMessageGet+0x5c>
      ticks = 1;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002dc4:	f7ff fe05 	bl	80029d2 <inHandlerMode>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01c      	beq.n	8002e08 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002dce:	f107 0220 	add.w	r2, r7, #32
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	68b8      	ldr	r0, [r7, #8]
 8002ddc:	f000 faf6 	bl	80033cc <xQueueReceiveFromISR>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d102      	bne.n	8002dec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002de6:	2310      	movs	r3, #16
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e001      	b.n	8002df0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01d      	beq.n	8002e32 <osMessageGet+0xca>
 8002df6:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <osMessageGet+0xe4>)
 8002df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	e014      	b.n	8002e32 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e10:	4619      	mov	r1, r3
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f000 fa02 	bl	800321c <xQueueReceive>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002e1e:	2310      	movs	r3, #16
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e006      	b.n	8002e32 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <osMessageGet+0xc6>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <osMessageGet+0xc8>
 8002e2e:	2340      	movs	r3, #64	@ 0x40
 8002e30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	461c      	mov	r4, r3
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	372c      	adds	r7, #44	@ 0x2c
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd90      	pop	{r4, r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f103 0208 	add.w	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f103 0208 	add.w	r2, r3, #8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f103 0208 	add.w	r2, r3, #8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	601a      	str	r2, [r3, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d103      	bne.n	8002f0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e00c      	b.n	8002f26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e002      	b.n	8002f1a <vListInsert+0x2e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d2f6      	bcs.n	8002f14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6892      	ldr	r2, [r2, #8]
 8002f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6852      	ldr	r2, [r2, #4]
 8002f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d103      	bne.n	8002f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	e7fd      	b.n	8002fd6 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fda:	f001 fbc7 	bl	800476c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	441a      	add	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	3b01      	subs	r3, #1
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	441a      	add	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	22ff      	movs	r2, #255	@ 0xff
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	22ff      	movs	r2, #255	@ 0xff
 8003026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00f      	beq.n	8003058 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3310      	adds	r3, #16
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fea9 	bl	8003d94 <xTaskRemoveFromEventList>
 8003042:	e009      	b.n	8003058 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3310      	adds	r3, #16
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff01 	bl	8002e50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3324      	adds	r3, #36	@ 0x24
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fefc 	bl	8002e50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003058:	f001 fbb8 	bl	80047cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800305c:	2301      	movs	r3, #1
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003066:	b580      	push	{r7, lr}
 8003068:	b08e      	sub	sp, #56	@ 0x38
 800306a:	af02      	add	r7, sp, #8
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	e7fd      	b.n	800308e <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <xQueueGenericCreateStatic+0x56>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <xQueueGenericCreateStatic+0x5a>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <xQueueGenericCreateStatic+0x5c>
 80030c0:	2300      	movs	r3, #0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	623b      	str	r3, [r7, #32]
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	e7fd      	b.n	80030da <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <xQueueGenericCreateStatic+0x84>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xQueueGenericCreateStatic+0x88>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueGenericCreateStatic+0x8a>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	61fb      	str	r3, [r7, #28]
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800310c:	2348      	movs	r3, #72	@ 0x48
 800310e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b48      	cmp	r3, #72	@ 0x48
 8003114:	d00b      	beq.n	800312e <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	61bb      	str	r3, [r7, #24]
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00d      	beq.n	8003154 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003140:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f844 	bl	80031dc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003156:	4618      	mov	r0, r3
 8003158:	3730      	adds	r7, #48	@ 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800315e:	b580      	push	{r7, lr}
 8003160:	b08a      	sub	sp, #40	@ 0x28
 8003162:	af02      	add	r7, sp, #8
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	4613      	mov	r3, r2
 800316a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	613b      	str	r3, [r7, #16]
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	e7fd      	b.n	8003186 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	e004      	b.n	80031a0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3348      	adds	r3, #72	@ 0x48
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 fbe3 	bl	8004970 <pvPortMalloc>
 80031aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00f      	beq.n	80031d2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3348      	adds	r3, #72	@ 0x48
 80031b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031c0:	79fa      	ldrb	r2, [r7, #7]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f805 	bl	80031dc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031d2:	69bb      	ldr	r3, [r7, #24]
	}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e002      	b.n	80031fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800320a:	2101      	movs	r1, #1
 800320c:	69b8      	ldr	r0, [r7, #24]
 800320e:	f7ff fece 	bl	8002fae <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08c      	sub	sp, #48	@ 0x30
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <xQueueReceive+0x32>
	__asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	623b      	str	r3, [r7, #32]
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	e7fd      	b.n	800324a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <xQueueReceive+0x40>
 8003254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <xQueueReceive+0x44>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <xQueueReceive+0x46>
 8003260:	2300      	movs	r3, #0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <xQueueReceive+0x62>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	61fb      	str	r3, [r7, #28]
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	e7fd      	b.n	800327a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800327e:	f000 ff47 	bl	8004110 <xTaskGetSchedulerState>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <xQueueReceive+0x72>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <xQueueReceive+0x76>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <xQueueReceive+0x78>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <xQueueReceive+0x94>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	61bb      	str	r3, [r7, #24]
}
 80032aa:	bf00      	nop
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032b0:	f001 fa5c 	bl	800476c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d014      	beq.n	80032ea <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032c4:	f000 f904 	bl	80034d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	1e5a      	subs	r2, r3, #1
 80032cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	3310      	adds	r3, #16
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fd59 	bl	8003d94 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032e2:	f001 fa73 	bl	80047cc <vPortExitCritical>
				return pdPASS;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e069      	b.n	80033be <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032f0:	f001 fa6c 	bl	80047cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e062      	b.n	80033be <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fdaa 	bl	8003e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003308:	2301      	movs	r3, #1
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800330c:	f001 fa5e 	bl	80047cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003310:	f000 fb84 	bl	8003a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003314:	f001 fa2a 	bl	800476c <vPortEnterCritical>
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800331e:	b25b      	sxtb	r3, r3
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d103      	bne.n	800332e <xQueueReceive+0x112>
 8003326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003334:	b25b      	sxtb	r3, r3
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333a:	d103      	bne.n	8003344 <xQueueReceive+0x128>
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003344:	f001 fa42 	bl	80047cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003348:	1d3a      	adds	r2, r7, #4
 800334a:	f107 0310 	add.w	r3, r7, #16
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fd99 	bl	8003e88 <xTaskCheckForTimeOut>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d123      	bne.n	80033a4 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800335c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800335e:	f000 f92f 	bl	80035c0 <prvIsQueueEmpty>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d017      	beq.n	8003398 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336a:	3324      	adds	r3, #36	@ 0x24
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fce9 	bl	8003d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003378:	f000 f8d0 	bl	800351c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800337c:	f000 fb5c 	bl	8003a38 <xTaskResumeAll>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d194      	bne.n	80032b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003386:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <xQueueReceive+0x1ac>)
 8003388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	e78b      	b.n	80032b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800339a:	f000 f8bf 	bl	800351c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800339e:	f000 fb4b 	bl	8003a38 <xTaskResumeAll>
 80033a2:	e785      	b.n	80032b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033a6:	f000 f8b9 	bl	800351c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033aa:	f000 fb45 	bl	8003a38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b0:	f000 f906 	bl	80035c0 <prvIsQueueEmpty>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f43f af7a 	beq.w	80032b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3730      	adds	r7, #48	@ 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000ed04 	.word	0xe000ed04

080033cc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	@ 0x38
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	623b      	str	r3, [r7, #32]
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <xQueueReceiveFromISR+0x3c>
 8003400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <xQueueReceiveFromISR+0x40>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <xQueueReceiveFromISR+0x42>
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	61fb      	str	r3, [r7, #28]
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	e7fd      	b.n	8003426 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800342a:	f001 fa61 	bl	80048f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800342e:	f3ef 8211 	mrs	r2, BASEPRI
 8003432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	61ba      	str	r2, [r7, #24]
 8003444:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003446:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003448:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02f      	beq.n	80034b6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800345c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003464:	f000 f834 	bl	80034d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003470:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d112      	bne.n	80034a0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d016      	beq.n	80034b0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	3310      	adds	r3, #16
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fc84 	bl	8003d94 <xTaskRemoveFromEventList>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00e      	beq.n	80034b0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e007      	b.n	80034b0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80034a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034a4:	3301      	adds	r3, #1
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	b25a      	sxtb	r2, r3
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80034b0:	2301      	movs	r3, #1
 80034b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b4:	e001      	b.n	80034ba <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3738      	adds	r7, #56	@ 0x38
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	441a      	add	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d303      	bcc.n	8003504 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68d9      	ldr	r1, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	461a      	mov	r2, r3
 800350e:	6838      	ldr	r0, [r7, #0]
 8003510:	f001 fc60 	bl	8004dd4 <memcpy>
	}
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003524:	f001 f922 	bl	800476c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800352e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003530:	e011      	b.n	8003556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3324      	adds	r3, #36	@ 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fc28 	bl	8003d94 <xTaskRemoveFromEventList>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800354a:	f000 fd01 	bl	8003f50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	3b01      	subs	r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	dce9      	bgt.n	8003532 <prvUnlockQueue+0x16>
 800355e:	e000      	b.n	8003562 <prvUnlockQueue+0x46>
					break;
 8003560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	22ff      	movs	r2, #255	@ 0xff
 8003566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800356a:	f001 f92f 	bl	80047cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800356e:	f001 f8fd 	bl	800476c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800357a:	e011      	b.n	80035a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d012      	beq.n	80035aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3310      	adds	r3, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fc03 	bl	8003d94 <xTaskRemoveFromEventList>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003594:	f000 fcdc 	bl	8003f50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003598:	7bbb      	ldrb	r3, [r7, #14]
 800359a:	3b01      	subs	r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	dce9      	bgt.n	800357c <prvUnlockQueue+0x60>
 80035a8:	e000      	b.n	80035ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80035b4:	f001 f90a 	bl	80047cc <vPortExitCritical>
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035c8:	f001 f8d0 	bl	800476c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e001      	b.n	80035de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035de:	f001 f8f5 	bl	80047cc <vPortExitCritical>

	return xReturn;
 80035e2:	68fb      	ldr	r3, [r7, #12]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08e      	sub	sp, #56	@ 0x38
 80035f0:	af04      	add	r7, sp, #16
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	623b      	str	r3, [r7, #32]
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	e7fd      	b.n	8003614 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <xTaskCreateStatic+0x4a>
	__asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	61fb      	str	r3, [r7, #28]
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	e7fd      	b.n	8003632 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003636:	2354      	movs	r3, #84	@ 0x54
 8003638:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b54      	cmp	r3, #84	@ 0x54
 800363e:	d00b      	beq.n	8003658 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61bb      	str	r3, [r7, #24]
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01e      	beq.n	800369c <xTaskCreateStatic+0xb0>
 800365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800366c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	2202      	movs	r2, #2
 8003672:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003676:	2300      	movs	r3, #0
 8003678:	9303      	str	r3, [sp, #12]
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	9302      	str	r3, [sp, #8]
 800367e:	f107 0314 	add.w	r3, r7, #20
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f850 	bl	8003734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003696:	f000 f8cd 	bl	8003834 <prvAddNewTaskToReadyList>
 800369a:	e001      	b.n	80036a0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036a0:	697b      	ldr	r3, [r7, #20]
	}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3728      	adds	r7, #40	@ 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b08c      	sub	sp, #48	@ 0x30
 80036ae:	af04      	add	r7, sp, #16
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f956 	bl	8004970 <pvPortMalloc>
 80036c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036cc:	2054      	movs	r0, #84	@ 0x54
 80036ce:	f001 f94f 	bl	8004970 <pvPortMalloc>
 80036d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
 80036e0:	e005      	b.n	80036ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f001 fa0c 	bl	8004b00 <vPortFree>
 80036e8:	e001      	b.n	80036ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d017      	beq.n	8003724 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036fc:	88fa      	ldrh	r2, [r7, #6]
 80036fe:	2300      	movs	r3, #0
 8003700:	9303      	str	r3, [sp, #12]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f80e 	bl	8003734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003718:	69f8      	ldr	r0, [r7, #28]
 800371a:	f000 f88b 	bl	8003834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800371e:	2301      	movs	r3, #1
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e002      	b.n	800372a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800372a:	69bb      	ldr	r3, [r7, #24]
	}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800374c:	3b01      	subs	r3, #1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f023 0307 	bic.w	r3, r3, #7
 800375a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	617b      	str	r3, [r7, #20]
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	e7fd      	b.n	800377a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	e012      	b.n	80037aa <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	7819      	ldrb	r1, [r3, #0]
 800378c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	3334      	adds	r3, #52	@ 0x34
 8003794:	460a      	mov	r2, r1
 8003796:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d9e9      	bls.n	8003784 <prvInitialiseNewTask+0x50>
 80037b0:	e000      	b.n	80037b4 <prvInitialiseNewTask+0x80>
		{
			break;
 80037b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d901      	bls.n	80037c6 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037c2:	2306      	movs	r3, #6
 80037c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037d0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037da:	3304      	adds	r3, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fb56 	bl	8002e8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	3318      	adds	r3, #24
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fb51 	bl	8002e8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	f1c3 0207 	rsb	r2, r3, #7
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	2200      	movs	r2, #0
 8003806:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	69b8      	ldr	r0, [r7, #24]
 8003816:	f000 febb 	bl	8004590 <pxPortInitialiseStack>
 800381a:	4602      	mov	r2, r0
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800382a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800382c:	bf00      	nop
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800383c:	f000 ff96 	bl	800476c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003840:	4b24      	ldr	r3, [pc, #144]	@ (80038d4 <prvAddNewTaskToReadyList+0xa0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	4a23      	ldr	r2, [pc, #140]	@ (80038d4 <prvAddNewTaskToReadyList+0xa0>)
 8003848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800384a:	4b23      	ldr	r3, [pc, #140]	@ (80038d8 <prvAddNewTaskToReadyList+0xa4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003852:	4a21      	ldr	r2, [pc, #132]	@ (80038d8 <prvAddNewTaskToReadyList+0xa4>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003858:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <prvAddNewTaskToReadyList+0xa0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d110      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003860:	f000 fb94 	bl	8003f8c <prvInitialiseTaskLists>
 8003864:	e00d      	b.n	8003882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003866:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <prvAddNewTaskToReadyList+0xa8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800386e:	4b1a      	ldr	r3, [pc, #104]	@ (80038d8 <prvAddNewTaskToReadyList+0xa4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d802      	bhi.n	8003882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800387c:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <prvAddNewTaskToReadyList+0xa4>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003882:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <prvAddNewTaskToReadyList+0xac>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a15      	ldr	r2, [pc, #84]	@ (80038e0 <prvAddNewTaskToReadyList+0xac>)
 800388a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	2201      	movs	r2, #1
 8003892:	409a      	lsls	r2, r3
 8003894:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <prvAddNewTaskToReadyList+0xb0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4313      	orrs	r3, r2
 800389a:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <prvAddNewTaskToReadyList+0xb0>)
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4a0f      	ldr	r2, [pc, #60]	@ (80038e8 <prvAddNewTaskToReadyList+0xb4>)
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f7ff faf6 	bl	8002ea6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038ba:	f000 ff87 	bl	80047cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <prvAddNewTaskToReadyList+0xa8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <prvAddNewTaskToReadyList+0xa4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200005a4 	.word	0x200005a4
 80038d8:	200004a4 	.word	0x200004a4
 80038dc:	200005b0 	.word	0x200005b0
 80038e0:	200005c0 	.word	0x200005c0
 80038e4:	200005ac 	.word	0x200005ac
 80038e8:	200004a8 	.word	0x200004a8

080038ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038fe:	4b14      	ldr	r3, [pc, #80]	@ (8003950 <vTaskDelay+0x64>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <vTaskDelay+0x32>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	60bb      	str	r3, [r7, #8]
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	e7fd      	b.n	800391a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800391e:	f000 f87d 	bl	8003a1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003922:	2100      	movs	r1, #0
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fdcd 	bl	80044c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800392a:	f000 f885 	bl	8003a38 <xTaskResumeAll>
 800392e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <vTaskDelay+0x68>)
 8003938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200005cc 	.word	0x200005cc
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	@ 0x28
 800395c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003966:	463a      	mov	r2, r7
 8003968:	1d39      	adds	r1, r7, #4
 800396a:	f107 0308 	add.w	r3, r7, #8
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc fc82 	bl	8000278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	9202      	str	r2, [sp, #8]
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	2300      	movs	r3, #0
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2300      	movs	r3, #0
 8003984:	460a      	mov	r2, r1
 8003986:	491f      	ldr	r1, [pc, #124]	@ (8003a04 <vTaskStartScheduler+0xac>)
 8003988:	481f      	ldr	r0, [pc, #124]	@ (8003a08 <vTaskStartScheduler+0xb0>)
 800398a:	f7ff fe2f 	bl	80035ec <xTaskCreateStatic>
 800398e:	4603      	mov	r3, r0
 8003990:	4a1e      	ldr	r2, [pc, #120]	@ (8003a0c <vTaskStartScheduler+0xb4>)
 8003992:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003994:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <vTaskStartScheduler+0xb4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800399c:	2301      	movs	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e001      	b.n	80039a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d116      	bne.n	80039da <vTaskStartScheduler+0x82>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	613b      	str	r3, [r7, #16]
}
 80039be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <vTaskStartScheduler+0xb8>)
 80039c2:	f04f 32ff 	mov.w	r2, #4294967295
 80039c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039c8:	4b12      	ldr	r3, [pc, #72]	@ (8003a14 <vTaskStartScheduler+0xbc>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039ce:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <vTaskStartScheduler+0xc0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039d4:	f000 fe58 	bl	8004688 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039d8:	e00f      	b.n	80039fa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d10b      	bne.n	80039fa <vTaskStartScheduler+0xa2>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60fb      	str	r3, [r7, #12]
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	e7fd      	b.n	80039f6 <vTaskStartScheduler+0x9e>
}
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	080057d0 	.word	0x080057d0
 8003a08:	08003f69 	.word	0x08003f69
 8003a0c:	200005c8 	.word	0x200005c8
 8003a10:	200005c4 	.word	0x200005c4
 8003a14:	200005b0 	.word	0x200005b0
 8003a18:	200005a8 	.word	0x200005a8

08003a1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <vTaskSuspendAll+0x18>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	4a03      	ldr	r2, [pc, #12]	@ (8003a34 <vTaskSuspendAll+0x18>)
 8003a28:	6013      	str	r3, [r2, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	200005cc 	.word	0x200005cc

08003a38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a46:	4b3c      	ldr	r3, [pc, #240]	@ (8003b38 <xTaskResumeAll+0x100>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <xTaskResumeAll+0x2e>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	603b      	str	r3, [r7, #0]
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	e7fd      	b.n	8003a62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a66:	f000 fe81 	bl	800476c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a6a:	4b33      	ldr	r3, [pc, #204]	@ (8003b38 <xTaskResumeAll+0x100>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	4a31      	ldr	r2, [pc, #196]	@ (8003b38 <xTaskResumeAll+0x100>)
 8003a72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a74:	4b30      	ldr	r3, [pc, #192]	@ (8003b38 <xTaskResumeAll+0x100>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d155      	bne.n	8003b28 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b3c <xTaskResumeAll+0x104>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d051      	beq.n	8003b28 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a84:	e02e      	b.n	8003ae4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a86:	4b2e      	ldr	r3, [pc, #184]	@ (8003b40 <xTaskResumeAll+0x108>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3318      	adds	r3, #24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fa62 	bl	8002f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fa5d 	bl	8002f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	4b26      	ldr	r3, [pc, #152]	@ (8003b44 <xTaskResumeAll+0x10c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	4a24      	ldr	r2, [pc, #144]	@ (8003b44 <xTaskResumeAll+0x10c>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4a21      	ldr	r2, [pc, #132]	@ (8003b48 <xTaskResumeAll+0x110>)
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f7ff f9eb 	bl	8002ea6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b4c <xTaskResumeAll+0x114>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ade:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <xTaskResumeAll+0x118>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ae4:	4b16      	ldr	r3, [pc, #88]	@ (8003b40 <xTaskResumeAll+0x108>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1cc      	bne.n	8003a86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003af2:	f000 fae9 	bl	80040c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003af6:	4b17      	ldr	r3, [pc, #92]	@ (8003b54 <xTaskResumeAll+0x11c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d010      	beq.n	8003b24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b02:	f000 f829 	bl	8003b58 <xTaskIncrementTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b0c:	4b10      	ldr	r3, [pc, #64]	@ (8003b50 <xTaskResumeAll+0x118>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f1      	bne.n	8003b02 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <xTaskResumeAll+0x11c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b24:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <xTaskResumeAll+0x118>)
 8003b26:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b28:	f000 fe50 	bl	80047cc <vPortExitCritical>

	return xAlreadyYielded;
 8003b2c:	687b      	ldr	r3, [r7, #4]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200005cc 	.word	0x200005cc
 8003b3c:	200005a4 	.word	0x200005a4
 8003b40:	20000564 	.word	0x20000564
 8003b44:	200005ac 	.word	0x200005ac
 8003b48:	200004a8 	.word	0x200004a8
 8003b4c:	200004a4 	.word	0x200004a4
 8003b50:	200005b8 	.word	0x200005b8
 8003b54:	200005b4 	.word	0x200005b4

08003b58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b62:	4b42      	ldr	r3, [pc, #264]	@ (8003c6c <xTaskIncrementTick+0x114>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d175      	bne.n	8003c56 <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b6a:	4b41      	ldr	r3, [pc, #260]	@ (8003c70 <xTaskIncrementTick+0x118>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b72:	4a3f      	ldr	r2, [pc, #252]	@ (8003c70 <xTaskIncrementTick+0x118>)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d121      	bne.n	8003bc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c74 <xTaskIncrementTick+0x11c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	603b      	str	r3, [r7, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <xTaskIncrementTick+0x44>
 8003ba0:	4b34      	ldr	r3, [pc, #208]	@ (8003c74 <xTaskIncrementTick+0x11c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <xTaskIncrementTick+0x120>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a32      	ldr	r2, [pc, #200]	@ (8003c74 <xTaskIncrementTick+0x11c>)
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4a32      	ldr	r2, [pc, #200]	@ (8003c78 <xTaskIncrementTick+0x120>)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b31      	ldr	r3, [pc, #196]	@ (8003c7c <xTaskIncrementTick+0x124>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	4a30      	ldr	r2, [pc, #192]	@ (8003c7c <xTaskIncrementTick+0x124>)
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	f000 fa83 	bl	80040c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003c80 <xTaskIncrementTick+0x128>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d349      	bcc.n	8003c60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bcc:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <xTaskIncrementTick+0x11c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <xTaskIncrementTick+0x82>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xTaskIncrementTick+0x84>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d004      	beq.n	8003bea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be0:	4b27      	ldr	r3, [pc, #156]	@ (8003c80 <xTaskIncrementTick+0x128>)
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	601a      	str	r2, [r3, #0]
					break;
 8003be8:	e03a      	b.n	8003c60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bea:	4b22      	ldr	r3, [pc, #136]	@ (8003c74 <xTaskIncrementTick+0x11c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d203      	bcs.n	8003c0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c02:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <xTaskIncrementTick+0x128>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6013      	str	r3, [r2, #0]
						break;
 8003c08:	e02a      	b.n	8003c60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f9a4 	bl	8002f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	3318      	adds	r3, #24
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff f99b 	bl	8002f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <xTaskIncrementTick+0x12c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	4a13      	ldr	r2, [pc, #76]	@ (8003c84 <xTaskIncrementTick+0x12c>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4a10      	ldr	r2, [pc, #64]	@ (8003c88 <xTaskIncrementTick+0x130>)
 8003c46:	441a      	add	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7ff f929 	bl	8002ea6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c54:	e7ba      	b.n	8003bcc <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <xTaskIncrementTick+0x134>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c8c <xTaskIncrementTick+0x134>)
 8003c5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c60:	697b      	ldr	r3, [r7, #20]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200005cc 	.word	0x200005cc
 8003c70:	200005a8 	.word	0x200005a8
 8003c74:	2000055c 	.word	0x2000055c
 8003c78:	20000560 	.word	0x20000560
 8003c7c:	200005bc 	.word	0x200005bc
 8003c80:	200005c4 	.word	0x200005c4
 8003c84:	200005ac 	.word	0x200005ac
 8003c88:	200004a8 	.word	0x200004a8
 8003c8c:	200005b4 	.word	0x200005b4

08003c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c96:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <vTaskSwitchContext+0xa4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c9e:	4b26      	ldr	r3, [pc, #152]	@ (8003d38 <vTaskSwitchContext+0xa8>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ca4:	e040      	b.n	8003d28 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003ca6:	4b24      	ldr	r3, [pc, #144]	@ (8003d38 <vTaskSwitchContext+0xa8>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cac:	4b23      	ldr	r3, [pc, #140]	@ (8003d3c <vTaskSwitchContext+0xac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003cba:	7afb      	ldrb	r3, [r7, #11]
 8003cbc:	f1c3 031f 	rsb	r3, r3, #31
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	491f      	ldr	r1, [pc, #124]	@ (8003d40 <vTaskSwitchContext+0xb0>)
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <vTaskSwitchContext+0x5e>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	607b      	str	r3, [r7, #4]
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	e7fd      	b.n	8003cea <vTaskSwitchContext+0x5a>
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4a11      	ldr	r2, [pc, #68]	@ (8003d40 <vTaskSwitchContext+0xb0>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d104      	bne.n	8003d1e <vTaskSwitchContext+0x8e>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a07      	ldr	r2, [pc, #28]	@ (8003d44 <vTaskSwitchContext+0xb4>)
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	200005cc 	.word	0x200005cc
 8003d38:	200005b8 	.word	0x200005b8
 8003d3c:	200005ac 	.word	0x200005ac
 8003d40:	200004a8 	.word	0x200004a8
 8003d44:	200004a4 	.word	0x200004a4

08003d48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	60fb      	str	r3, [r7, #12]
}
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
 8003d6e:	e7fd      	b.n	8003d6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <vTaskPlaceOnEventList+0x48>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3318      	adds	r3, #24
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff f8b7 	bl	8002eec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d7e:	2101      	movs	r1, #1
 8003d80:	6838      	ldr	r0, [r7, #0]
 8003d82:	f000 fb9f 	bl	80044c4 <prvAddCurrentTaskToDelayedList>
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200004a4 	.word	0x200004a4

08003d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60fb      	str	r3, [r7, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff f8c8 	bl	8002f5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <xTaskRemoveFromEventList+0xb0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11c      	bne.n	8003e0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff f8bf 	bl	8002f5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	2201      	movs	r2, #1
 8003de4:	409a      	lsls	r2, r3
 8003de6:	4b18      	ldr	r3, [pc, #96]	@ (8003e48 <xTaskRemoveFromEventList+0xb4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	4a16      	ldr	r2, [pc, #88]	@ (8003e48 <xTaskRemoveFromEventList+0xb4>)
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4a13      	ldr	r2, [pc, #76]	@ (8003e4c <xTaskRemoveFromEventList+0xb8>)
 8003dfe:	441a      	add	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f7ff f84d 	bl	8002ea6 <vListInsertEnd>
 8003e0c:	e005      	b.n	8003e1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3318      	adds	r3, #24
 8003e12:	4619      	mov	r1, r3
 8003e14:	480e      	ldr	r0, [pc, #56]	@ (8003e50 <xTaskRemoveFromEventList+0xbc>)
 8003e16:	f7ff f846 	bl	8002ea6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <xTaskRemoveFromEventList+0xc0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d905      	bls.n	8003e34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <xTaskRemoveFromEventList+0xc4>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e001      	b.n	8003e38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e38:	697b      	ldr	r3, [r7, #20]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	200005cc 	.word	0x200005cc
 8003e48:	200005ac 	.word	0x200005ac
 8003e4c:	200004a8 	.word	0x200004a8
 8003e50:	20000564 	.word	0x20000564
 8003e54:	200004a4 	.word	0x200004a4
 8003e58:	200005b8 	.word	0x200005b8

08003e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <vTaskInternalSetTimeOutState+0x24>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <vTaskInternalSetTimeOutState+0x28>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	605a      	str	r2, [r3, #4]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	200005bc 	.word	0x200005bc
 8003e84:	200005a8 	.word	0x200005a8

08003e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	613b      	str	r3, [r7, #16]
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60fb      	str	r3, [r7, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	e7fd      	b.n	8003eca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ece:	f000 fc4d 	bl	800476c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <xTaskCheckForTimeOut+0xc0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d102      	bne.n	8003ef2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e023      	b.n	8003f3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <xTaskCheckForTimeOut+0xc4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d007      	beq.n	8003f0e <xTaskCheckForTimeOut+0x86>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d302      	bcc.n	8003f0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	e015      	b.n	8003f3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d20b      	bcs.n	8003f30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad2      	subs	r2, r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff99 	bl	8003e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e004      	b.n	8003f3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f3a:	f000 fc47 	bl	80047cc <vPortExitCritical>

	return xReturn;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	200005a8 	.word	0x200005a8
 8003f4c:	200005bc 	.word	0x200005bc

08003f50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f54:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <vTaskMissedYield+0x14>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	200005b8 	.word	0x200005b8

08003f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f70:	f000 f84c 	bl	800400c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8003f74:	4b04      	ldr	r3, [pc, #16]	@ (8003f88 <prvIdleTask+0x20>)
 8003f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f84:	bf00      	nop
 8003f86:	e7f3      	b.n	8003f70 <prvIdleTask+0x8>
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	e00c      	b.n	8003fb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a12      	ldr	r2, [pc, #72]	@ (8003fec <prvInitialiseTaskLists+0x60>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe ff52 	bl	8002e50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b06      	cmp	r3, #6
 8003fb6:	d9ef      	bls.n	8003f98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fb8:	480d      	ldr	r0, [pc, #52]	@ (8003ff0 <prvInitialiseTaskLists+0x64>)
 8003fba:	f7fe ff49 	bl	8002e50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fbe:	480d      	ldr	r0, [pc, #52]	@ (8003ff4 <prvInitialiseTaskLists+0x68>)
 8003fc0:	f7fe ff46 	bl	8002e50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fc4:	480c      	ldr	r0, [pc, #48]	@ (8003ff8 <prvInitialiseTaskLists+0x6c>)
 8003fc6:	f7fe ff43 	bl	8002e50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fca:	480c      	ldr	r0, [pc, #48]	@ (8003ffc <prvInitialiseTaskLists+0x70>)
 8003fcc:	f7fe ff40 	bl	8002e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fd0:	480b      	ldr	r0, [pc, #44]	@ (8004000 <prvInitialiseTaskLists+0x74>)
 8003fd2:	f7fe ff3d 	bl	8002e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <prvInitialiseTaskLists+0x78>)
 8003fd8:	4a05      	ldr	r2, [pc, #20]	@ (8003ff0 <prvInitialiseTaskLists+0x64>)
 8003fda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <prvInitialiseTaskLists+0x7c>)
 8003fde:	4a05      	ldr	r2, [pc, #20]	@ (8003ff4 <prvInitialiseTaskLists+0x68>)
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	200004a8 	.word	0x200004a8
 8003ff0:	20000534 	.word	0x20000534
 8003ff4:	20000548 	.word	0x20000548
 8003ff8:	20000564 	.word	0x20000564
 8003ffc:	20000578 	.word	0x20000578
 8004000:	20000590 	.word	0x20000590
 8004004:	2000055c 	.word	0x2000055c
 8004008:	20000560 	.word	0x20000560

0800400c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004012:	e019      	b.n	8004048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004014:	f000 fbaa 	bl	800476c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004018:	4b10      	ldr	r3, [pc, #64]	@ (800405c <prvCheckTasksWaitingTermination+0x50>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe ff99 	bl	8002f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800402a:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <prvCheckTasksWaitingTermination+0x54>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	4a0b      	ldr	r2, [pc, #44]	@ (8004060 <prvCheckTasksWaitingTermination+0x54>)
 8004032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <prvCheckTasksWaitingTermination+0x58>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3b01      	subs	r3, #1
 800403a:	4a0a      	ldr	r2, [pc, #40]	@ (8004064 <prvCheckTasksWaitingTermination+0x58>)
 800403c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800403e:	f000 fbc5 	bl	80047cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f810 	bl	8004068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004048:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <prvCheckTasksWaitingTermination+0x58>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e1      	bne.n	8004014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000578 	.word	0x20000578
 8004060:	200005a4 	.word	0x200005a4
 8004064:	2000058c 	.word	0x2000058c

08004068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004076:	2b00      	cmp	r3, #0
 8004078:	d108      	bne.n	800408c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fd3e 	bl	8004b00 <vPortFree>
				vPortFree( pxTCB );
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fd3b 	bl	8004b00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800408a:	e019      	b.n	80040c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004092:	2b01      	cmp	r3, #1
 8004094:	d103      	bne.n	800409e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fd32 	bl	8004b00 <vPortFree>
	}
 800409c:	e010      	b.n	80040c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d00b      	beq.n	80040c0 <prvDeleteTCB+0x58>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	60fb      	str	r3, [r7, #12]
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <prvDeleteTCB+0x54>
	}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <prvResetNextTaskUnblockTime+0x40>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <prvResetNextTaskUnblockTime+0x14>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <prvResetNextTaskUnblockTime+0x16>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040e2:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <prvResetNextTaskUnblockTime+0x44>)
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040ea:	e008      	b.n	80040fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <prvResetNextTaskUnblockTime+0x40>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4a04      	ldr	r2, [pc, #16]	@ (800410c <prvResetNextTaskUnblockTime+0x44>)
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	2000055c 	.word	0x2000055c
 800410c:	200005c4 	.word	0x200005c4

08004110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004116:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <xTaskGetSchedulerState+0x34>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800411e:	2301      	movs	r3, #1
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	e008      	b.n	8004136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004124:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <xTaskGetSchedulerState+0x38>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800412c:	2302      	movs	r3, #2
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	e001      	b.n	8004136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004136:	687b      	ldr	r3, [r7, #4]
	}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	200005b0 	.word	0x200005b0
 8004148:	200005cc 	.word	0x200005cc

0800414c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800415a:	f000 fb07 	bl	800476c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800415e:	4b26      	ldr	r3, [pc, #152]	@ (80041f8 <xTaskNotifyWait+0xac>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d01a      	beq.n	80041a2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800416c:	4b22      	ldr	r3, [pc, #136]	@ (80041f8 <xTaskNotifyWait+0xac>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	43d2      	mvns	r2, r2
 8004176:	400a      	ands	r2, r1
 8004178:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800417a:	4b1f      	ldr	r3, [pc, #124]	@ (80041f8 <xTaskNotifyWait+0xac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800418a:	2101      	movs	r1, #1
 800418c:	6838      	ldr	r0, [r7, #0]
 800418e:	f000 f999 	bl	80044c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004192:	4b1a      	ldr	r3, [pc, #104]	@ (80041fc <xTaskNotifyWait+0xb0>)
 8004194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80041a2:	f000 fb13 	bl	80047cc <vPortExitCritical>

		taskENTER_CRITICAL();
 80041a6:	f000 fae1 	bl	800476c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80041b0:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <xTaskNotifyWait+0xac>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80041ba:	4b0f      	ldr	r3, [pc, #60]	@ (80041f8 <xTaskNotifyWait+0xac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d002      	beq.n	80041ce <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e008      	b.n	80041e0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80041ce:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <xTaskNotifyWait+0xac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	43d2      	mvns	r2, r2
 80041d8:	400a      	ands	r2, r1
 80041da:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041e0:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <xTaskNotifyWait+0xac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80041ea:	f000 faef 	bl	80047cc <vPortExitCritical>

		return xReturn;
 80041ee:	697b      	ldr	r3, [r7, #20]
	}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200004a4 	.word	0x200004a4
 80041fc:	e000ed04 	.word	0xe000ed04

08004200 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	@ 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004210:	2301      	movs	r3, #1
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <xTaskGenericNotify+0x32>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	61bb      	str	r3, [r7, #24]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004236:	f000 fa99 	bl	800476c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800424e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d827      	bhi.n	80042ae <xTaskGenericNotify+0xae>
 800425e:	a201      	add	r2, pc, #4	@ (adr r2, 8004264 <xTaskGenericNotify+0x64>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	080042af 	.word	0x080042af
 8004268:	08004279 	.word	0x08004279
 800426c:	08004287 	.word	0x08004287
 8004270:	08004293 	.word	0x08004293
 8004274:	0800429b 	.word	0x0800429b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	431a      	orrs	r2, r3
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004284:	e013      	b.n	80042ae <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004290:	e00d      	b.n	80042ae <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004298:	e009      	b.n	80042ae <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d003      	beq.n	80042a8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80042a6:	e001      	b.n	80042ac <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80042ac:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d12d      	bne.n	8004310 <xTaskGenericNotify+0x110>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fe4f 	bl	8002f5c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	2201      	movs	r2, #1
 80042c4:	409a      	lsls	r2, r3
 80042c6:	4b16      	ldr	r3, [pc, #88]	@ (8004320 <xTaskGenericNotify+0x120>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	4a14      	ldr	r2, [pc, #80]	@ (8004320 <xTaskGenericNotify+0x120>)
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <xTaskGenericNotify+0x124>)
 80042de:	441a      	add	r2, r3
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7fe fddd 	bl	8002ea6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <xTaskGenericNotify+0x10c>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	617b      	str	r3, [r7, #20]
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800430c:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <xTaskGenericNotify+0x128>)
 800430e:	681b      	ldr	r3, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004310:	f000 fa5c 	bl	80047cc <vPortExitCritical>

		return xReturn;
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004316:	4618      	mov	r0, r3
 8004318:	3728      	adds	r7, #40	@ 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200005ac 	.word	0x200005ac
 8004324:	200004a8 	.word	0x200004a8
 8004328:	200004a4 	.word	0x200004a4

0800432c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	@ 0x38
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800433c:	2301      	movs	r3, #1
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	e7fd      	b.n	800435a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800435e:	f000 fac7 	bl	80048f0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8004366:	f3ef 8211 	mrs	r2, BASEPRI
 800436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	623a      	str	r2, [r7, #32]
 800437c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800437e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004380:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d829      	bhi.n	80043fc <xTaskGenericNotifyFromISR+0xd0>
 80043a8:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <xTaskGenericNotifyFromISR+0x84>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043fd 	.word	0x080043fd
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043d3 	.word	0x080043d3
 80043bc:	080043df 	.word	0x080043df
 80043c0:	080043e7 	.word	0x080043e7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ce:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80043d0:	e014      	b.n	80043fc <xTaskGenericNotifyFromISR+0xd0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80043dc:	e00e      	b.n	80043fc <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80043e4:	e00a      	b.n	80043fc <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80043e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d003      	beq.n	80043f6 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80043f4:	e001      	b.n	80043fa <xTaskGenericNotifyFromISR+0xce>
						xReturn = pdFAIL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80043fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80043fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004400:	2b01      	cmp	r3, #1
 8004402:	d147      	bne.n	8004494 <xTaskGenericNotifyFromISR+0x168>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <xTaskGenericNotifyFromISR+0xf8>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	61bb      	str	r3, [r7, #24]
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	e7fd      	b.n	8004420 <xTaskGenericNotifyFromISR+0xf4>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004424:	4b21      	ldr	r3, [pc, #132]	@ (80044ac <xTaskGenericNotifyFromISR+0x180>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11c      	bne.n	8004466 <xTaskGenericNotifyFromISR+0x13a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	3304      	adds	r3, #4
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe fd93 	bl	8002f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	2201      	movs	r2, #1
 800443c:	409a      	lsls	r2, r3
 800443e:	4b1c      	ldr	r3, [pc, #112]	@ (80044b0 <xTaskGenericNotifyFromISR+0x184>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	4a1a      	ldr	r2, [pc, #104]	@ (80044b0 <xTaskGenericNotifyFromISR+0x184>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4a17      	ldr	r2, [pc, #92]	@ (80044b4 <xTaskGenericNotifyFromISR+0x188>)
 8004456:	441a      	add	r2, r3
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7fe fd21 	bl	8002ea6 <vListInsertEnd>
 8004464:	e005      	b.n	8004472 <xTaskGenericNotifyFromISR+0x146>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	3318      	adds	r3, #24
 800446a:	4619      	mov	r1, r3
 800446c:	4812      	ldr	r0, [pc, #72]	@ (80044b8 <xTaskGenericNotifyFromISR+0x18c>)
 800446e:	f7fe fd1a 	bl	8002ea6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004476:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <xTaskGenericNotifyFromISR+0x190>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	429a      	cmp	r2, r3
 800447e:	d909      	bls.n	8004494 <xTaskGenericNotifyFromISR+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <xTaskGenericNotifyFromISR+0x162>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e002      	b.n	8004494 <xTaskGenericNotifyFromISR+0x168>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800448e:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <xTaskGenericNotifyFromISR+0x194>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004496:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f383 8811 	msr	BASEPRI, r3
}
 800449e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3738      	adds	r7, #56	@ 0x38
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	200005cc 	.word	0x200005cc
 80044b0:	200005ac 	.word	0x200005ac
 80044b4:	200004a8 	.word	0x200004a8
 80044b8:	20000564 	.word	0x20000564
 80044bc:	200004a4 	.word	0x200004a4
 80044c0:	200005b8 	.word	0x200005b8

080044c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044ce:	4b29      	ldr	r3, [pc, #164]	@ (8004574 <prvAddCurrentTaskToDelayedList+0xb0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d4:	4b28      	ldr	r3, [pc, #160]	@ (8004578 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3304      	adds	r3, #4
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe fd3e 	bl	8002f5c <uxListRemove>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80044e6:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	2201      	movs	r2, #1
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43da      	mvns	r2, r3
 80044f4:	4b21      	ldr	r3, [pc, #132]	@ (800457c <prvAddCurrentTaskToDelayedList+0xb8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4013      	ands	r3, r2
 80044fa:	4a20      	ldr	r2, [pc, #128]	@ (800457c <prvAddCurrentTaskToDelayedList+0xb8>)
 80044fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d10a      	bne.n	800451c <prvAddCurrentTaskToDelayedList+0x58>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800450c:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	481a      	ldr	r0, [pc, #104]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004516:	f7fe fcc6 	bl	8002ea6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800451a:	e026      	b.n	800456a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004524:	4b14      	ldr	r3, [pc, #80]	@ (8004578 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	429a      	cmp	r2, r3
 8004532:	d209      	bcs.n	8004548 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004534:	4b13      	ldr	r3, [pc, #76]	@ (8004584 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fe fcd3 	bl	8002eec <vListInsert>
}
 8004546:	e010      	b.n	800456a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004548:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <prvAddCurrentTaskToDelayedList+0xc4>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <prvAddCurrentTaskToDelayedList+0xb4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fe fcc9 	bl	8002eec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800455a:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <prvAddCurrentTaskToDelayedList+0xc8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	d202      	bcs.n	800456a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004564:	4a09      	ldr	r2, [pc, #36]	@ (800458c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6013      	str	r3, [r2, #0]
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200005a8 	.word	0x200005a8
 8004578:	200004a4 	.word	0x200004a4
 800457c:	200005ac 	.word	0x200005ac
 8004580:	20000590 	.word	0x20000590
 8004584:	20000560 	.word	0x20000560
 8004588:	2000055c 	.word	0x2000055c
 800458c:	200005c4 	.word	0x200005c4

08004590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3b04      	subs	r3, #4
 80045a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3b04      	subs	r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3b04      	subs	r3, #4
 80045be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045c0:	4a08      	ldr	r2, [pc, #32]	@ (80045e4 <pxPortInitialiseStack+0x54>)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3b14      	subs	r3, #20
 80045ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b20      	subs	r3, #32
 80045d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	080045e9 	.word	0x080045e9

080045e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045f2:	4b12      	ldr	r3, [pc, #72]	@ (800463c <prvTaskExitError+0x54>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d00b      	beq.n	8004614 <prvTaskExitError+0x2c>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	60fb      	str	r3, [r7, #12]
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <prvTaskExitError+0x28>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	60bb      	str	r3, [r7, #8]
}
 8004626:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004628:	bf00      	nop
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0fc      	beq.n	800462a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	20000018 	.word	0x20000018

08004640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004640:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <pxCurrentTCBConst2>)
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800464a:	f380 8809 	msr	PSP, r0
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8811 	msr	BASEPRI, r0
 800465a:	f04e 0e0d 	orr.w	lr, lr, #13
 800465e:	4770      	bx	lr

08004660 <pxCurrentTCBConst2>:
 8004660:	200004a4 	.word	0x200004a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004668:	4806      	ldr	r0, [pc, #24]	@ (8004684 <prvPortStartFirstTask+0x1c>)
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	6800      	ldr	r0, [r0, #0]
 800466e:	f380 8808 	msr	MSP, r0
 8004672:	b662      	cpsie	i
 8004674:	b661      	cpsie	f
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	df00      	svc	0
 8004680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004682:	bf00      	nop
 8004684:	e000ed08 	.word	0xe000ed08

08004688 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800468e:	4b32      	ldr	r3, [pc, #200]	@ (8004758 <xPortStartScheduler+0xd0>)
 8004690:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	22ff      	movs	r2, #255	@ 0xff
 800469e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <xPortStartScheduler+0xd4>)
 80046b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004760 <xPortStartScheduler+0xd8>)
 80046b8:	2207      	movs	r2, #7
 80046ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046bc:	e009      	b.n	80046d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80046be:	4b28      	ldr	r3, [pc, #160]	@ (8004760 <xPortStartScheduler+0xd8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4a26      	ldr	r2, [pc, #152]	@ (8004760 <xPortStartScheduler+0xd8>)
 80046c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d0ef      	beq.n	80046be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046de:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <xPortStartScheduler+0xd8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1c3 0307 	rsb	r3, r3, #7
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00b      	beq.n	8004702 <xPortStartScheduler+0x7a>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60bb      	str	r3, [r7, #8]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004702:	4b17      	ldr	r3, [pc, #92]	@ (8004760 <xPortStartScheduler+0xd8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <xPortStartScheduler+0xd8>)
 800470a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800470c:	4b14      	ldr	r3, [pc, #80]	@ (8004760 <xPortStartScheduler+0xd8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004714:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <xPortStartScheduler+0xd8>)
 8004716:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004720:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <xPortStartScheduler+0xdc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0f      	ldr	r2, [pc, #60]	@ (8004764 <xPortStartScheduler+0xdc>)
 8004726:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800472a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800472c:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <xPortStartScheduler+0xdc>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a0c      	ldr	r2, [pc, #48]	@ (8004764 <xPortStartScheduler+0xdc>)
 8004732:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004736:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004738:	f000 f8b8 	bl	80048ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800473c:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <xPortStartScheduler+0xe0>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004742:	f7ff ff91 	bl	8004668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004746:	f7ff faa3 	bl	8003c90 <vTaskSwitchContext>
	prvTaskExitError();
 800474a:	f7ff ff4d 	bl	80045e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	e000e400 	.word	0xe000e400
 800475c:	200005d0 	.word	0x200005d0
 8004760:	200005d4 	.word	0x200005d4
 8004764:	e000ed20 	.word	0xe000ed20
 8004768:	20000018 	.word	0x20000018

0800476c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	607b      	str	r3, [r7, #4]
}
 8004784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004786:	4b0f      	ldr	r3, [pc, #60]	@ (80047c4 <vPortEnterCritical+0x58>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a0d      	ldr	r2, [pc, #52]	@ (80047c4 <vPortEnterCritical+0x58>)
 800478e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004790:	4b0c      	ldr	r3, [pc, #48]	@ (80047c4 <vPortEnterCritical+0x58>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d110      	bne.n	80047ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004798:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <vPortEnterCritical+0x5c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <vPortEnterCritical+0x4e>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	603b      	str	r3, [r7, #0]
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	e7fd      	b.n	80047b6 <vPortEnterCritical+0x4a>
	}
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	20000018 	.word	0x20000018
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047d2:	4b12      	ldr	r3, [pc, #72]	@ (800481c <vPortExitCritical+0x50>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <vPortExitCritical+0x26>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	607b      	str	r3, [r7, #4]
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	e7fd      	b.n	80047ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047f2:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <vPortExitCritical+0x50>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	4a08      	ldr	r2, [pc, #32]	@ (800481c <vPortExitCritical+0x50>)
 80047fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047fc:	4b07      	ldr	r3, [pc, #28]	@ (800481c <vPortExitCritical+0x50>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <vPortExitCritical+0x44>
 8004804:	2300      	movs	r3, #0
 8004806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f383 8811 	msr	BASEPRI, r3
}
 800480e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000018 	.word	0x20000018

08004820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004820:	f3ef 8009 	mrs	r0, PSP
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4b0d      	ldr	r3, [pc, #52]	@ (8004860 <pxCurrentTCBConst>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004830:	6010      	str	r0, [r2, #0]
 8004832:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004836:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800483a:	f380 8811 	msr	BASEPRI, r0
 800483e:	f7ff fa27 	bl	8003c90 <vTaskSwitchContext>
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8811 	msr	BASEPRI, r0
 800484a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	6808      	ldr	r0, [r1, #0]
 8004852:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004856:	f380 8809 	msr	PSP, r0
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	4770      	bx	lr

08004860 <pxCurrentTCBConst>:
 8004860:	200004a4 	.word	0x200004a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
}
 8004880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004882:	f7ff f969 	bl	8003b58 <xTaskIncrementTick>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800488c:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <SysTick_Handler+0x40>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <vPortSetupTimerInterrupt+0x30>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048b6:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048bc:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <vPortSetupTimerInterrupt+0x38>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a09      	ldr	r2, [pc, #36]	@ (80048e8 <vPortSetupTimerInterrupt+0x3c>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <vPortSetupTimerInterrupt+0x40>)
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ce:	4b03      	ldr	r3, [pc, #12]	@ (80048dc <vPortSetupTimerInterrupt+0x30>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	e000e010 	.word	0xe000e010
 80048e0:	e000e018 	.word	0xe000e018
 80048e4:	2000000c 	.word	0x2000000c
 80048e8:	10624dd3 	.word	0x10624dd3
 80048ec:	e000e014 	.word	0xe000e014

080048f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048f6:	f3ef 8305 	mrs	r3, IPSR
 80048fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d915      	bls.n	800492e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004902:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <vPortValidateInterruptPriority+0x70>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800490c:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <vPortValidateInterruptPriority+0x74>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	7afa      	ldrb	r2, [r7, #11]
 8004912:	429a      	cmp	r2, r3
 8004914:	d20b      	bcs.n	800492e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	607b      	str	r3, [r7, #4]
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	e7fd      	b.n	800492a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800492e:	4b0e      	ldr	r3, [pc, #56]	@ (8004968 <vPortValidateInterruptPriority+0x78>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004936:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <vPortValidateInterruptPriority+0x7c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d90b      	bls.n	8004956 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	603b      	str	r3, [r7, #0]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <vPortValidateInterruptPriority+0x62>
	}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr
 8004960:	e000e3f0 	.word	0xe000e3f0
 8004964:	200005d0 	.word	0x200005d0
 8004968:	e000ed0c 	.word	0xe000ed0c
 800496c:	200005d4 	.word	0x200005d4

08004970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	@ 0x28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800497c:	f7ff f84e 	bl	8003a1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004980:	4b5a      	ldr	r3, [pc, #360]	@ (8004aec <pvPortMalloc+0x17c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004988:	f000 f916 	bl	8004bb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800498c:	4b58      	ldr	r3, [pc, #352]	@ (8004af0 <pvPortMalloc+0x180>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	f040 8090 	bne.w	8004aba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01e      	beq.n	80049de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80049a0:	2208      	movs	r2, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d015      	beq.n	80049de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f023 0307 	bic.w	r3, r3, #7
 80049b8:	3308      	adds	r3, #8
 80049ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <pvPortMalloc+0x6e>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	617b      	str	r3, [r7, #20]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d06a      	beq.n	8004aba <pvPortMalloc+0x14a>
 80049e4:	4b43      	ldr	r3, [pc, #268]	@ (8004af4 <pvPortMalloc+0x184>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d865      	bhi.n	8004aba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049ee:	4b42      	ldr	r3, [pc, #264]	@ (8004af8 <pvPortMalloc+0x188>)
 80049f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049f2:	4b41      	ldr	r3, [pc, #260]	@ (8004af8 <pvPortMalloc+0x188>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049f8:	e004      	b.n	8004a04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d903      	bls.n	8004a16 <pvPortMalloc+0xa6>
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f1      	bne.n	80049fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a16:	4b35      	ldr	r3, [pc, #212]	@ (8004aec <pvPortMalloc+0x17c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d04c      	beq.n	8004aba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2208      	movs	r2, #8
 8004a26:	4413      	add	r3, r2
 8004a28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d920      	bls.n	8004a84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4413      	add	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <pvPortMalloc+0xfc>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	613b      	str	r3, [r7, #16]
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	e7fd      	b.n	8004a68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	1ad2      	subs	r2, r2, r3
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a7e:	69b8      	ldr	r0, [r7, #24]
 8004a80:	f000 f8fc 	bl	8004c7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a84:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <pvPortMalloc+0x184>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	4a19      	ldr	r2, [pc, #100]	@ (8004af4 <pvPortMalloc+0x184>)
 8004a90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a92:	4b18      	ldr	r3, [pc, #96]	@ (8004af4 <pvPortMalloc+0x184>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b19      	ldr	r3, [pc, #100]	@ (8004afc <pvPortMalloc+0x18c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d203      	bcs.n	8004aa6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a9e:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <pvPortMalloc+0x184>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a16      	ldr	r2, [pc, #88]	@ (8004afc <pvPortMalloc+0x18c>)
 8004aa4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <pvPortMalloc+0x180>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004aba:	f7fe ffbd 	bl	8003a38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <pvPortMalloc+0x170>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60fb      	str	r3, [r7, #12]
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <pvPortMalloc+0x16c>
	return pvReturn;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3728      	adds	r7, #40	@ 0x28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	200025e0 	.word	0x200025e0
 8004af0:	200025ec 	.word	0x200025ec
 8004af4:	200025e4 	.word	0x200025e4
 8004af8:	200025d8 	.word	0x200025d8
 8004afc:	200025e8 	.word	0x200025e8

08004b00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d04a      	beq.n	8004ba8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b12:	2308      	movs	r3, #8
 8004b14:	425b      	negs	r3, r3
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4413      	add	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4b22      	ldr	r3, [pc, #136]	@ (8004bb0 <vPortFree+0xb0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <vPortFree+0x46>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	60fb      	str	r3, [r7, #12]
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <vPortFree+0x66>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	60bb      	str	r3, [r7, #8]
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	e7fd      	b.n	8004b62 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	4b11      	ldr	r3, [pc, #68]	@ (8004bb0 <vPortFree+0xb0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d019      	beq.n	8004ba8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d115      	bne.n	8004ba8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <vPortFree+0xb0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	401a      	ands	r2, r3
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b8c:	f7fe ff46 	bl	8003a1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <vPortFree+0xb4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4413      	add	r3, r2
 8004b9a:	4a06      	ldr	r2, [pc, #24]	@ (8004bb4 <vPortFree+0xb4>)
 8004b9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b9e:	6938      	ldr	r0, [r7, #16]
 8004ba0:	f000 f86c 	bl	8004c7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ba4:	f7fe ff48 	bl	8003a38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ba8:	bf00      	nop
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	200025ec 	.word	0x200025ec
 8004bb4:	200025e4 	.word	0x200025e4

08004bb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bc4:	4b27      	ldr	r3, [pc, #156]	@ (8004c64 <prvHeapInit+0xac>)
 8004bc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00c      	beq.n	8004bec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3307      	adds	r3, #7
 8004bd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c64 <prvHeapInit+0xac>)
 8004be8:	4413      	add	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c68 <prvHeapInit+0xb0>)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c68 <prvHeapInit+0xb0>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4413      	add	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c04:	2208      	movs	r2, #8
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0307 	bic.w	r3, r3, #7
 8004c12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a15      	ldr	r2, [pc, #84]	@ (8004c6c <prvHeapInit+0xb4>)
 8004c18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c1a:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <prvHeapInit+0xb4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c22:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <prvHeapInit+0xb4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	1ad2      	subs	r2, r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c38:	4b0c      	ldr	r3, [pc, #48]	@ (8004c6c <prvHeapInit+0xb4>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <prvHeapInit+0xb8>)
 8004c46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a09      	ldr	r2, [pc, #36]	@ (8004c74 <prvHeapInit+0xbc>)
 8004c4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c50:	4b09      	ldr	r3, [pc, #36]	@ (8004c78 <prvHeapInit+0xc0>)
 8004c52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c56:	601a      	str	r2, [r3, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	200005d8 	.word	0x200005d8
 8004c68:	200025d8 	.word	0x200025d8
 8004c6c:	200025e0 	.word	0x200025e0
 8004c70:	200025e8 	.word	0x200025e8
 8004c74:	200025e4 	.word	0x200025e4
 8004c78:	200025ec 	.word	0x200025ec

08004c7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c84:	4b27      	ldr	r3, [pc, #156]	@ (8004d24 <prvInsertBlockIntoFreeList+0xa8>)
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e002      	b.n	8004c90 <prvInsertBlockIntoFreeList+0x14>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d8f7      	bhi.n	8004c8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d108      	bne.n	8004cbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	441a      	add	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d118      	bne.n	8004d04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b14      	ldr	r3, [pc, #80]	@ (8004d28 <prvInsertBlockIntoFreeList+0xac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d00d      	beq.n	8004cfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e008      	b.n	8004d0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <prvInsertBlockIntoFreeList+0xac>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	e003      	b.n	8004d0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d002      	beq.n	8004d1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	200025d8 	.word	0x200025d8
 8004d28:	200025e0 	.word	0x200025e0

08004d2c <siprintf>:
 8004d2c:	b40e      	push	{r1, r2, r3}
 8004d2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d32:	b500      	push	{lr}
 8004d34:	b09c      	sub	sp, #112	@ 0x70
 8004d36:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d38:	9002      	str	r0, [sp, #8]
 8004d3a:	9006      	str	r0, [sp, #24]
 8004d3c:	9107      	str	r1, [sp, #28]
 8004d3e:	9104      	str	r1, [sp, #16]
 8004d40:	4808      	ldr	r0, [pc, #32]	@ (8004d64 <siprintf+0x38>)
 8004d42:	4909      	ldr	r1, [pc, #36]	@ (8004d68 <siprintf+0x3c>)
 8004d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d48:	9105      	str	r1, [sp, #20]
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	a902      	add	r1, sp, #8
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	f000 f9a0 	bl	8005094 <_svfiprintf_r>
 8004d54:	2200      	movs	r2, #0
 8004d56:	9b02      	ldr	r3, [sp, #8]
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	b01c      	add	sp, #112	@ 0x70
 8004d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	2000001c 	.word	0x2000001c
 8004d68:	ffff0208 	.word	0xffff0208

08004d6c <memset>:
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4402      	add	r2, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <__errno>:
 8004d7c:	4b01      	ldr	r3, [pc, #4]	@ (8004d84 <__errno+0x8>)
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	2000001c 	.word	0x2000001c

08004d88 <__libc_init_array>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	2600      	movs	r6, #0
 8004d8c:	4d0c      	ldr	r5, [pc, #48]	@ (8004dc0 <__libc_init_array+0x38>)
 8004d8e:	4c0d      	ldr	r4, [pc, #52]	@ (8004dc4 <__libc_init_array+0x3c>)
 8004d90:	1b64      	subs	r4, r4, r5
 8004d92:	10a4      	asrs	r4, r4, #2
 8004d94:	42a6      	cmp	r6, r4
 8004d96:	d109      	bne.n	8004dac <__libc_init_array+0x24>
 8004d98:	f000 fc78 	bl	800568c <_init>
 8004d9c:	2600      	movs	r6, #0
 8004d9e:	4d0a      	ldr	r5, [pc, #40]	@ (8004dc8 <__libc_init_array+0x40>)
 8004da0:	4c0a      	ldr	r4, [pc, #40]	@ (8004dcc <__libc_init_array+0x44>)
 8004da2:	1b64      	subs	r4, r4, r5
 8004da4:	10a4      	asrs	r4, r4, #2
 8004da6:	42a6      	cmp	r6, r4
 8004da8:	d105      	bne.n	8004db6 <__libc_init_array+0x2e>
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db0:	4798      	blx	r3
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7ee      	b.n	8004d94 <__libc_init_array+0xc>
 8004db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dba:	4798      	blx	r3
 8004dbc:	3601      	adds	r6, #1
 8004dbe:	e7f2      	b.n	8004da6 <__libc_init_array+0x1e>
 8004dc0:	0800585c 	.word	0x0800585c
 8004dc4:	0800585c 	.word	0x0800585c
 8004dc8:	0800585c 	.word	0x0800585c
 8004dcc:	08005860 	.word	0x08005860

08004dd0 <__retarget_lock_acquire_recursive>:
 8004dd0:	4770      	bx	lr

08004dd2 <__retarget_lock_release_recursive>:
 8004dd2:	4770      	bx	lr

08004dd4 <memcpy>:
 8004dd4:	440a      	add	r2, r1
 8004dd6:	4291      	cmp	r1, r2
 8004dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ddc:	d100      	bne.n	8004de0 <memcpy+0xc>
 8004dde:	4770      	bx	lr
 8004de0:	b510      	push	{r4, lr}
 8004de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004de6:	4291      	cmp	r1, r2
 8004de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dec:	d1f9      	bne.n	8004de2 <memcpy+0xe>
 8004dee:	bd10      	pop	{r4, pc}

08004df0 <_free_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d040      	beq.n	8004e7a <_free_r+0x8a>
 8004df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfc:	1f0c      	subs	r4, r1, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfb8      	it	lt
 8004e02:	18e4      	addlt	r4, r4, r3
 8004e04:	f000 f8de 	bl	8004fc4 <__malloc_lock>
 8004e08:	4a1c      	ldr	r2, [pc, #112]	@ (8004e7c <_free_r+0x8c>)
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	b933      	cbnz	r3, 8004e1c <_free_r+0x2c>
 8004e0e:	6063      	str	r3, [r4, #4]
 8004e10:	6014      	str	r4, [r2, #0]
 8004e12:	4628      	mov	r0, r5
 8004e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e18:	f000 b8da 	b.w	8004fd0 <__malloc_unlock>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d908      	bls.n	8004e32 <_free_r+0x42>
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	1821      	adds	r1, r4, r0
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bf01      	itttt	eq
 8004e28:	6819      	ldreq	r1, [r3, #0]
 8004e2a:	685b      	ldreq	r3, [r3, #4]
 8004e2c:	1809      	addeq	r1, r1, r0
 8004e2e:	6021      	streq	r1, [r4, #0]
 8004e30:	e7ed      	b.n	8004e0e <_free_r+0x1e>
 8004e32:	461a      	mov	r2, r3
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b10b      	cbz	r3, 8004e3c <_free_r+0x4c>
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d9fa      	bls.n	8004e32 <_free_r+0x42>
 8004e3c:	6811      	ldr	r1, [r2, #0]
 8004e3e:	1850      	adds	r0, r2, r1
 8004e40:	42a0      	cmp	r0, r4
 8004e42:	d10b      	bne.n	8004e5c <_free_r+0x6c>
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	4401      	add	r1, r0
 8004e48:	1850      	adds	r0, r2, r1
 8004e4a:	4283      	cmp	r3, r0
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	d1e0      	bne.n	8004e12 <_free_r+0x22>
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	4408      	add	r0, r1
 8004e56:	6010      	str	r0, [r2, #0]
 8004e58:	6053      	str	r3, [r2, #4]
 8004e5a:	e7da      	b.n	8004e12 <_free_r+0x22>
 8004e5c:	d902      	bls.n	8004e64 <_free_r+0x74>
 8004e5e:	230c      	movs	r3, #12
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	e7d6      	b.n	8004e12 <_free_r+0x22>
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	1821      	adds	r1, r4, r0
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	bf01      	itttt	eq
 8004e6c:	6819      	ldreq	r1, [r3, #0]
 8004e6e:	685b      	ldreq	r3, [r3, #4]
 8004e70:	1809      	addeq	r1, r1, r0
 8004e72:	6021      	streq	r1, [r4, #0]
 8004e74:	6063      	str	r3, [r4, #4]
 8004e76:	6054      	str	r4, [r2, #4]
 8004e78:	e7cb      	b.n	8004e12 <_free_r+0x22>
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	20002734 	.word	0x20002734

08004e80 <sbrk_aligned>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	4e0f      	ldr	r6, [pc, #60]	@ (8004ec0 <sbrk_aligned+0x40>)
 8004e84:	460c      	mov	r4, r1
 8004e86:	6831      	ldr	r1, [r6, #0]
 8004e88:	4605      	mov	r5, r0
 8004e8a:	b911      	cbnz	r1, 8004e92 <sbrk_aligned+0x12>
 8004e8c:	f000 fbaa 	bl	80055e4 <_sbrk_r>
 8004e90:	6030      	str	r0, [r6, #0]
 8004e92:	4621      	mov	r1, r4
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 fba5 	bl	80055e4 <_sbrk_r>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	d103      	bne.n	8004ea6 <sbrk_aligned+0x26>
 8004e9e:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
 8004ea6:	1cc4      	adds	r4, r0, #3
 8004ea8:	f024 0403 	bic.w	r4, r4, #3
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d0f8      	beq.n	8004ea2 <sbrk_aligned+0x22>
 8004eb0:	1a21      	subs	r1, r4, r0
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 fb96 	bl	80055e4 <_sbrk_r>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d1f2      	bne.n	8004ea2 <sbrk_aligned+0x22>
 8004ebc:	e7ef      	b.n	8004e9e <sbrk_aligned+0x1e>
 8004ebe:	bf00      	nop
 8004ec0:	20002730 	.word	0x20002730

08004ec4 <_malloc_r>:
 8004ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec8:	1ccd      	adds	r5, r1, #3
 8004eca:	f025 0503 	bic.w	r5, r5, #3
 8004ece:	3508      	adds	r5, #8
 8004ed0:	2d0c      	cmp	r5, #12
 8004ed2:	bf38      	it	cc
 8004ed4:	250c      	movcc	r5, #12
 8004ed6:	2d00      	cmp	r5, #0
 8004ed8:	4606      	mov	r6, r0
 8004eda:	db01      	blt.n	8004ee0 <_malloc_r+0x1c>
 8004edc:	42a9      	cmp	r1, r5
 8004ede:	d904      	bls.n	8004eea <_malloc_r+0x26>
 8004ee0:	230c      	movs	r3, #12
 8004ee2:	6033      	str	r3, [r6, #0]
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fc0 <_malloc_r+0xfc>
 8004eee:	f000 f869 	bl	8004fc4 <__malloc_lock>
 8004ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef6:	461c      	mov	r4, r3
 8004ef8:	bb44      	cbnz	r4, 8004f4c <_malloc_r+0x88>
 8004efa:	4629      	mov	r1, r5
 8004efc:	4630      	mov	r0, r6
 8004efe:	f7ff ffbf 	bl	8004e80 <sbrk_aligned>
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	4604      	mov	r4, r0
 8004f06:	d158      	bne.n	8004fba <_malloc_r+0xf6>
 8004f08:	f8d8 4000 	ldr.w	r4, [r8]
 8004f0c:	4627      	mov	r7, r4
 8004f0e:	2f00      	cmp	r7, #0
 8004f10:	d143      	bne.n	8004f9a <_malloc_r+0xd6>
 8004f12:	2c00      	cmp	r4, #0
 8004f14:	d04b      	beq.n	8004fae <_malloc_r+0xea>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	4639      	mov	r1, r7
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	eb04 0903 	add.w	r9, r4, r3
 8004f20:	f000 fb60 	bl	80055e4 <_sbrk_r>
 8004f24:	4581      	cmp	r9, r0
 8004f26:	d142      	bne.n	8004fae <_malloc_r+0xea>
 8004f28:	6821      	ldr	r1, [r4, #0]
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	1a6d      	subs	r5, r5, r1
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7ff ffa6 	bl	8004e80 <sbrk_aligned>
 8004f34:	3001      	adds	r0, #1
 8004f36:	d03a      	beq.n	8004fae <_malloc_r+0xea>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	442b      	add	r3, r5
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	bb62      	cbnz	r2, 8004fa0 <_malloc_r+0xdc>
 8004f46:	f8c8 7000 	str.w	r7, [r8]
 8004f4a:	e00f      	b.n	8004f6c <_malloc_r+0xa8>
 8004f4c:	6822      	ldr	r2, [r4, #0]
 8004f4e:	1b52      	subs	r2, r2, r5
 8004f50:	d420      	bmi.n	8004f94 <_malloc_r+0xd0>
 8004f52:	2a0b      	cmp	r2, #11
 8004f54:	d917      	bls.n	8004f86 <_malloc_r+0xc2>
 8004f56:	1961      	adds	r1, r4, r5
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	6025      	str	r5, [r4, #0]
 8004f5c:	bf18      	it	ne
 8004f5e:	6059      	strne	r1, [r3, #4]
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	bf08      	it	eq
 8004f64:	f8c8 1000 	streq.w	r1, [r8]
 8004f68:	5162      	str	r2, [r4, r5]
 8004f6a:	604b      	str	r3, [r1, #4]
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f000 f82f 	bl	8004fd0 <__malloc_unlock>
 8004f72:	f104 000b 	add.w	r0, r4, #11
 8004f76:	1d23      	adds	r3, r4, #4
 8004f78:	f020 0007 	bic.w	r0, r0, #7
 8004f7c:	1ac2      	subs	r2, r0, r3
 8004f7e:	bf1c      	itt	ne
 8004f80:	1a1b      	subne	r3, r3, r0
 8004f82:	50a3      	strne	r3, [r4, r2]
 8004f84:	e7af      	b.n	8004ee6 <_malloc_r+0x22>
 8004f86:	6862      	ldr	r2, [r4, #4]
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	bf0c      	ite	eq
 8004f8c:	f8c8 2000 	streq.w	r2, [r8]
 8004f90:	605a      	strne	r2, [r3, #4]
 8004f92:	e7eb      	b.n	8004f6c <_malloc_r+0xa8>
 8004f94:	4623      	mov	r3, r4
 8004f96:	6864      	ldr	r4, [r4, #4]
 8004f98:	e7ae      	b.n	8004ef8 <_malloc_r+0x34>
 8004f9a:	463c      	mov	r4, r7
 8004f9c:	687f      	ldr	r7, [r7, #4]
 8004f9e:	e7b6      	b.n	8004f0e <_malloc_r+0x4a>
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d1fb      	bne.n	8004fa0 <_malloc_r+0xdc>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6053      	str	r3, [r2, #4]
 8004fac:	e7de      	b.n	8004f6c <_malloc_r+0xa8>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	6033      	str	r3, [r6, #0]
 8004fb4:	f000 f80c 	bl	8004fd0 <__malloc_unlock>
 8004fb8:	e794      	b.n	8004ee4 <_malloc_r+0x20>
 8004fba:	6005      	str	r5, [r0, #0]
 8004fbc:	e7d6      	b.n	8004f6c <_malloc_r+0xa8>
 8004fbe:	bf00      	nop
 8004fc0:	20002734 	.word	0x20002734

08004fc4 <__malloc_lock>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	@ (8004fcc <__malloc_lock+0x8>)
 8004fc6:	f7ff bf03 	b.w	8004dd0 <__retarget_lock_acquire_recursive>
 8004fca:	bf00      	nop
 8004fcc:	2000272c 	.word	0x2000272c

08004fd0 <__malloc_unlock>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	@ (8004fd8 <__malloc_unlock+0x8>)
 8004fd2:	f7ff befe 	b.w	8004dd2 <__retarget_lock_release_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	2000272c 	.word	0x2000272c

08004fdc <__ssputs_r>:
 8004fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe0:	461f      	mov	r7, r3
 8004fe2:	688e      	ldr	r6, [r1, #8]
 8004fe4:	4682      	mov	sl, r0
 8004fe6:	42be      	cmp	r6, r7
 8004fe8:	460c      	mov	r4, r1
 8004fea:	4690      	mov	r8, r2
 8004fec:	680b      	ldr	r3, [r1, #0]
 8004fee:	d82d      	bhi.n	800504c <__ssputs_r+0x70>
 8004ff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ff4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ff8:	d026      	beq.n	8005048 <__ssputs_r+0x6c>
 8004ffa:	6965      	ldr	r5, [r4, #20]
 8004ffc:	6909      	ldr	r1, [r1, #16]
 8004ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005002:	eba3 0901 	sub.w	r9, r3, r1
 8005006:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800500a:	1c7b      	adds	r3, r7, #1
 800500c:	444b      	add	r3, r9
 800500e:	106d      	asrs	r5, r5, #1
 8005010:	429d      	cmp	r5, r3
 8005012:	bf38      	it	cc
 8005014:	461d      	movcc	r5, r3
 8005016:	0553      	lsls	r3, r2, #21
 8005018:	d527      	bpl.n	800506a <__ssputs_r+0x8e>
 800501a:	4629      	mov	r1, r5
 800501c:	f7ff ff52 	bl	8004ec4 <_malloc_r>
 8005020:	4606      	mov	r6, r0
 8005022:	b360      	cbz	r0, 800507e <__ssputs_r+0xa2>
 8005024:	464a      	mov	r2, r9
 8005026:	6921      	ldr	r1, [r4, #16]
 8005028:	f7ff fed4 	bl	8004dd4 <memcpy>
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	6126      	str	r6, [r4, #16]
 800503a:	444e      	add	r6, r9
 800503c:	6026      	str	r6, [r4, #0]
 800503e:	463e      	mov	r6, r7
 8005040:	6165      	str	r5, [r4, #20]
 8005042:	eba5 0509 	sub.w	r5, r5, r9
 8005046:	60a5      	str	r5, [r4, #8]
 8005048:	42be      	cmp	r6, r7
 800504a:	d900      	bls.n	800504e <__ssputs_r+0x72>
 800504c:	463e      	mov	r6, r7
 800504e:	4632      	mov	r2, r6
 8005050:	4641      	mov	r1, r8
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	f000 faac 	bl	80055b0 <memmove>
 8005058:	2000      	movs	r0, #0
 800505a:	68a3      	ldr	r3, [r4, #8]
 800505c:	1b9b      	subs	r3, r3, r6
 800505e:	60a3      	str	r3, [r4, #8]
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	4433      	add	r3, r6
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506a:	462a      	mov	r2, r5
 800506c:	f000 fad8 	bl	8005620 <_realloc_r>
 8005070:	4606      	mov	r6, r0
 8005072:	2800      	cmp	r0, #0
 8005074:	d1e0      	bne.n	8005038 <__ssputs_r+0x5c>
 8005076:	4650      	mov	r0, sl
 8005078:	6921      	ldr	r1, [r4, #16]
 800507a:	f7ff feb9 	bl	8004df0 <_free_r>
 800507e:	230c      	movs	r3, #12
 8005080:	f8ca 3000 	str.w	r3, [sl]
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	f04f 30ff 	mov.w	r0, #4294967295
 800508a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	e7e9      	b.n	8005066 <__ssputs_r+0x8a>
	...

08005094 <_svfiprintf_r>:
 8005094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005098:	4698      	mov	r8, r3
 800509a:	898b      	ldrh	r3, [r1, #12]
 800509c:	4607      	mov	r7, r0
 800509e:	061b      	lsls	r3, r3, #24
 80050a0:	460d      	mov	r5, r1
 80050a2:	4614      	mov	r4, r2
 80050a4:	b09d      	sub	sp, #116	@ 0x74
 80050a6:	d510      	bpl.n	80050ca <_svfiprintf_r+0x36>
 80050a8:	690b      	ldr	r3, [r1, #16]
 80050aa:	b973      	cbnz	r3, 80050ca <_svfiprintf_r+0x36>
 80050ac:	2140      	movs	r1, #64	@ 0x40
 80050ae:	f7ff ff09 	bl	8004ec4 <_malloc_r>
 80050b2:	6028      	str	r0, [r5, #0]
 80050b4:	6128      	str	r0, [r5, #16]
 80050b6:	b930      	cbnz	r0, 80050c6 <_svfiprintf_r+0x32>
 80050b8:	230c      	movs	r3, #12
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295
 80050c0:	b01d      	add	sp, #116	@ 0x74
 80050c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c6:	2340      	movs	r3, #64	@ 0x40
 80050c8:	616b      	str	r3, [r5, #20]
 80050ca:	2300      	movs	r3, #0
 80050cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ce:	2320      	movs	r3, #32
 80050d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050d4:	2330      	movs	r3, #48	@ 0x30
 80050d6:	f04f 0901 	mov.w	r9, #1
 80050da:	f8cd 800c 	str.w	r8, [sp, #12]
 80050de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005278 <_svfiprintf_r+0x1e4>
 80050e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050e6:	4623      	mov	r3, r4
 80050e8:	469a      	mov	sl, r3
 80050ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ee:	b10a      	cbz	r2, 80050f4 <_svfiprintf_r+0x60>
 80050f0:	2a25      	cmp	r2, #37	@ 0x25
 80050f2:	d1f9      	bne.n	80050e8 <_svfiprintf_r+0x54>
 80050f4:	ebba 0b04 	subs.w	fp, sl, r4
 80050f8:	d00b      	beq.n	8005112 <_svfiprintf_r+0x7e>
 80050fa:	465b      	mov	r3, fp
 80050fc:	4622      	mov	r2, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	4638      	mov	r0, r7
 8005102:	f7ff ff6b 	bl	8004fdc <__ssputs_r>
 8005106:	3001      	adds	r0, #1
 8005108:	f000 80a7 	beq.w	800525a <_svfiprintf_r+0x1c6>
 800510c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800510e:	445a      	add	r2, fp
 8005110:	9209      	str	r2, [sp, #36]	@ 0x24
 8005112:	f89a 3000 	ldrb.w	r3, [sl]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 809f 	beq.w	800525a <_svfiprintf_r+0x1c6>
 800511c:	2300      	movs	r3, #0
 800511e:	f04f 32ff 	mov.w	r2, #4294967295
 8005122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005126:	f10a 0a01 	add.w	sl, sl, #1
 800512a:	9304      	str	r3, [sp, #16]
 800512c:	9307      	str	r3, [sp, #28]
 800512e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005132:	931a      	str	r3, [sp, #104]	@ 0x68
 8005134:	4654      	mov	r4, sl
 8005136:	2205      	movs	r2, #5
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	484e      	ldr	r0, [pc, #312]	@ (8005278 <_svfiprintf_r+0x1e4>)
 800513e:	f000 fa61 	bl	8005604 <memchr>
 8005142:	9a04      	ldr	r2, [sp, #16]
 8005144:	b9d8      	cbnz	r0, 800517e <_svfiprintf_r+0xea>
 8005146:	06d0      	lsls	r0, r2, #27
 8005148:	bf44      	itt	mi
 800514a:	2320      	movmi	r3, #32
 800514c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005150:	0711      	lsls	r1, r2, #28
 8005152:	bf44      	itt	mi
 8005154:	232b      	movmi	r3, #43	@ 0x2b
 8005156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800515a:	f89a 3000 	ldrb.w	r3, [sl]
 800515e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005160:	d015      	beq.n	800518e <_svfiprintf_r+0xfa>
 8005162:	4654      	mov	r4, sl
 8005164:	2000      	movs	r0, #0
 8005166:	f04f 0c0a 	mov.w	ip, #10
 800516a:	9a07      	ldr	r2, [sp, #28]
 800516c:	4621      	mov	r1, r4
 800516e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005172:	3b30      	subs	r3, #48	@ 0x30
 8005174:	2b09      	cmp	r3, #9
 8005176:	d94b      	bls.n	8005210 <_svfiprintf_r+0x17c>
 8005178:	b1b0      	cbz	r0, 80051a8 <_svfiprintf_r+0x114>
 800517a:	9207      	str	r2, [sp, #28]
 800517c:	e014      	b.n	80051a8 <_svfiprintf_r+0x114>
 800517e:	eba0 0308 	sub.w	r3, r0, r8
 8005182:	fa09 f303 	lsl.w	r3, r9, r3
 8005186:	4313      	orrs	r3, r2
 8005188:	46a2      	mov	sl, r4
 800518a:	9304      	str	r3, [sp, #16]
 800518c:	e7d2      	b.n	8005134 <_svfiprintf_r+0xa0>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	9103      	str	r1, [sp, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	bfbb      	ittet	lt
 800519a:	425b      	neglt	r3, r3
 800519c:	f042 0202 	orrlt.w	r2, r2, #2
 80051a0:	9307      	strge	r3, [sp, #28]
 80051a2:	9307      	strlt	r3, [sp, #28]
 80051a4:	bfb8      	it	lt
 80051a6:	9204      	strlt	r2, [sp, #16]
 80051a8:	7823      	ldrb	r3, [r4, #0]
 80051aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80051ac:	d10a      	bne.n	80051c4 <_svfiprintf_r+0x130>
 80051ae:	7863      	ldrb	r3, [r4, #1]
 80051b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b2:	d132      	bne.n	800521a <_svfiprintf_r+0x186>
 80051b4:	9b03      	ldr	r3, [sp, #12]
 80051b6:	3402      	adds	r4, #2
 80051b8:	1d1a      	adds	r2, r3, #4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	9203      	str	r2, [sp, #12]
 80051be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800527c <_svfiprintf_r+0x1e8>
 80051c8:	2203      	movs	r2, #3
 80051ca:	4650      	mov	r0, sl
 80051cc:	7821      	ldrb	r1, [r4, #0]
 80051ce:	f000 fa19 	bl	8005604 <memchr>
 80051d2:	b138      	cbz	r0, 80051e4 <_svfiprintf_r+0x150>
 80051d4:	2240      	movs	r2, #64	@ 0x40
 80051d6:	9b04      	ldr	r3, [sp, #16]
 80051d8:	eba0 000a 	sub.w	r0, r0, sl
 80051dc:	4082      	lsls	r2, r0
 80051de:	4313      	orrs	r3, r2
 80051e0:	3401      	adds	r4, #1
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e8:	2206      	movs	r2, #6
 80051ea:	4825      	ldr	r0, [pc, #148]	@ (8005280 <_svfiprintf_r+0x1ec>)
 80051ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051f0:	f000 fa08 	bl	8005604 <memchr>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d036      	beq.n	8005266 <_svfiprintf_r+0x1d2>
 80051f8:	4b22      	ldr	r3, [pc, #136]	@ (8005284 <_svfiprintf_r+0x1f0>)
 80051fa:	bb1b      	cbnz	r3, 8005244 <_svfiprintf_r+0x1b0>
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	3307      	adds	r3, #7
 8005200:	f023 0307 	bic.w	r3, r3, #7
 8005204:	3308      	adds	r3, #8
 8005206:	9303      	str	r3, [sp, #12]
 8005208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520a:	4433      	add	r3, r6
 800520c:	9309      	str	r3, [sp, #36]	@ 0x24
 800520e:	e76a      	b.n	80050e6 <_svfiprintf_r+0x52>
 8005210:	460c      	mov	r4, r1
 8005212:	2001      	movs	r0, #1
 8005214:	fb0c 3202 	mla	r2, ip, r2, r3
 8005218:	e7a8      	b.n	800516c <_svfiprintf_r+0xd8>
 800521a:	2300      	movs	r3, #0
 800521c:	f04f 0c0a 	mov.w	ip, #10
 8005220:	4619      	mov	r1, r3
 8005222:	3401      	adds	r4, #1
 8005224:	9305      	str	r3, [sp, #20]
 8005226:	4620      	mov	r0, r4
 8005228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800522c:	3a30      	subs	r2, #48	@ 0x30
 800522e:	2a09      	cmp	r2, #9
 8005230:	d903      	bls.n	800523a <_svfiprintf_r+0x1a6>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0c6      	beq.n	80051c4 <_svfiprintf_r+0x130>
 8005236:	9105      	str	r1, [sp, #20]
 8005238:	e7c4      	b.n	80051c4 <_svfiprintf_r+0x130>
 800523a:	4604      	mov	r4, r0
 800523c:	2301      	movs	r3, #1
 800523e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005242:	e7f0      	b.n	8005226 <_svfiprintf_r+0x192>
 8005244:	ab03      	add	r3, sp, #12
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	462a      	mov	r2, r5
 800524a:	4638      	mov	r0, r7
 800524c:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <_svfiprintf_r+0x1f4>)
 800524e:	a904      	add	r1, sp, #16
 8005250:	f3af 8000 	nop.w
 8005254:	1c42      	adds	r2, r0, #1
 8005256:	4606      	mov	r6, r0
 8005258:	d1d6      	bne.n	8005208 <_svfiprintf_r+0x174>
 800525a:	89ab      	ldrh	r3, [r5, #12]
 800525c:	065b      	lsls	r3, r3, #25
 800525e:	f53f af2d 	bmi.w	80050bc <_svfiprintf_r+0x28>
 8005262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005264:	e72c      	b.n	80050c0 <_svfiprintf_r+0x2c>
 8005266:	ab03      	add	r3, sp, #12
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	462a      	mov	r2, r5
 800526c:	4638      	mov	r0, r7
 800526e:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <_svfiprintf_r+0x1f4>)
 8005270:	a904      	add	r1, sp, #16
 8005272:	f000 f87d 	bl	8005370 <_printf_i>
 8005276:	e7ed      	b.n	8005254 <_svfiprintf_r+0x1c0>
 8005278:	0800581e 	.word	0x0800581e
 800527c:	08005824 	.word	0x08005824
 8005280:	08005828 	.word	0x08005828
 8005284:	00000000 	.word	0x00000000
 8005288:	08004fdd 	.word	0x08004fdd

0800528c <_printf_common>:
 800528c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005290:	4616      	mov	r6, r2
 8005292:	4698      	mov	r8, r3
 8005294:	688a      	ldr	r2, [r1, #8]
 8005296:	690b      	ldr	r3, [r1, #16]
 8005298:	4607      	mov	r7, r0
 800529a:	4293      	cmp	r3, r2
 800529c:	bfb8      	it	lt
 800529e:	4613      	movlt	r3, r2
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052a6:	460c      	mov	r4, r1
 80052a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052ac:	b10a      	cbz	r2, 80052b2 <_printf_common+0x26>
 80052ae:	3301      	adds	r3, #1
 80052b0:	6033      	str	r3, [r6, #0]
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	0699      	lsls	r1, r3, #26
 80052b6:	bf42      	ittt	mi
 80052b8:	6833      	ldrmi	r3, [r6, #0]
 80052ba:	3302      	addmi	r3, #2
 80052bc:	6033      	strmi	r3, [r6, #0]
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	f015 0506 	ands.w	r5, r5, #6
 80052c4:	d106      	bne.n	80052d4 <_printf_common+0x48>
 80052c6:	f104 0a19 	add.w	sl, r4, #25
 80052ca:	68e3      	ldr	r3, [r4, #12]
 80052cc:	6832      	ldr	r2, [r6, #0]
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	42ab      	cmp	r3, r5
 80052d2:	dc2b      	bgt.n	800532c <_printf_common+0xa0>
 80052d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052d8:	6822      	ldr	r2, [r4, #0]
 80052da:	3b00      	subs	r3, #0
 80052dc:	bf18      	it	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	0692      	lsls	r2, r2, #26
 80052e2:	d430      	bmi.n	8005346 <_printf_common+0xba>
 80052e4:	4641      	mov	r1, r8
 80052e6:	4638      	mov	r0, r7
 80052e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052ec:	47c8      	blx	r9
 80052ee:	3001      	adds	r0, #1
 80052f0:	d023      	beq.n	800533a <_printf_common+0xae>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	6922      	ldr	r2, [r4, #16]
 80052f6:	f003 0306 	and.w	r3, r3, #6
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	bf14      	ite	ne
 80052fe:	2500      	movne	r5, #0
 8005300:	6833      	ldreq	r3, [r6, #0]
 8005302:	f04f 0600 	mov.w	r6, #0
 8005306:	bf08      	it	eq
 8005308:	68e5      	ldreq	r5, [r4, #12]
 800530a:	f104 041a 	add.w	r4, r4, #26
 800530e:	bf08      	it	eq
 8005310:	1aed      	subeq	r5, r5, r3
 8005312:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005316:	bf08      	it	eq
 8005318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800531c:	4293      	cmp	r3, r2
 800531e:	bfc4      	itt	gt
 8005320:	1a9b      	subgt	r3, r3, r2
 8005322:	18ed      	addgt	r5, r5, r3
 8005324:	42b5      	cmp	r5, r6
 8005326:	d11a      	bne.n	800535e <_printf_common+0xd2>
 8005328:	2000      	movs	r0, #0
 800532a:	e008      	b.n	800533e <_printf_common+0xb2>
 800532c:	2301      	movs	r3, #1
 800532e:	4652      	mov	r2, sl
 8005330:	4641      	mov	r1, r8
 8005332:	4638      	mov	r0, r7
 8005334:	47c8      	blx	r9
 8005336:	3001      	adds	r0, #1
 8005338:	d103      	bne.n	8005342 <_printf_common+0xb6>
 800533a:	f04f 30ff 	mov.w	r0, #4294967295
 800533e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005342:	3501      	adds	r5, #1
 8005344:	e7c1      	b.n	80052ca <_printf_common+0x3e>
 8005346:	2030      	movs	r0, #48	@ 0x30
 8005348:	18e1      	adds	r1, r4, r3
 800534a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005354:	4422      	add	r2, r4
 8005356:	3302      	adds	r3, #2
 8005358:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800535c:	e7c2      	b.n	80052e4 <_printf_common+0x58>
 800535e:	2301      	movs	r3, #1
 8005360:	4622      	mov	r2, r4
 8005362:	4641      	mov	r1, r8
 8005364:	4638      	mov	r0, r7
 8005366:	47c8      	blx	r9
 8005368:	3001      	adds	r0, #1
 800536a:	d0e6      	beq.n	800533a <_printf_common+0xae>
 800536c:	3601      	adds	r6, #1
 800536e:	e7d9      	b.n	8005324 <_printf_common+0x98>

08005370 <_printf_i>:
 8005370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	7e0f      	ldrb	r7, [r1, #24]
 8005376:	4691      	mov	r9, r2
 8005378:	2f78      	cmp	r7, #120	@ 0x78
 800537a:	4680      	mov	r8, r0
 800537c:	460c      	mov	r4, r1
 800537e:	469a      	mov	sl, r3
 8005380:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005386:	d807      	bhi.n	8005398 <_printf_i+0x28>
 8005388:	2f62      	cmp	r7, #98	@ 0x62
 800538a:	d80a      	bhi.n	80053a2 <_printf_i+0x32>
 800538c:	2f00      	cmp	r7, #0
 800538e:	f000 80d3 	beq.w	8005538 <_printf_i+0x1c8>
 8005392:	2f58      	cmp	r7, #88	@ 0x58
 8005394:	f000 80ba 	beq.w	800550c <_printf_i+0x19c>
 8005398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800539c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053a0:	e03a      	b.n	8005418 <_printf_i+0xa8>
 80053a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053a6:	2b15      	cmp	r3, #21
 80053a8:	d8f6      	bhi.n	8005398 <_printf_i+0x28>
 80053aa:	a101      	add	r1, pc, #4	@ (adr r1, 80053b0 <_printf_i+0x40>)
 80053ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b0:	08005409 	.word	0x08005409
 80053b4:	0800541d 	.word	0x0800541d
 80053b8:	08005399 	.word	0x08005399
 80053bc:	08005399 	.word	0x08005399
 80053c0:	08005399 	.word	0x08005399
 80053c4:	08005399 	.word	0x08005399
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	08005399 	.word	0x08005399
 80053d0:	08005399 	.word	0x08005399
 80053d4:	08005399 	.word	0x08005399
 80053d8:	08005399 	.word	0x08005399
 80053dc:	0800551f 	.word	0x0800551f
 80053e0:	08005447 	.word	0x08005447
 80053e4:	080054d9 	.word	0x080054d9
 80053e8:	08005399 	.word	0x08005399
 80053ec:	08005399 	.word	0x08005399
 80053f0:	08005541 	.word	0x08005541
 80053f4:	08005399 	.word	0x08005399
 80053f8:	08005447 	.word	0x08005447
 80053fc:	08005399 	.word	0x08005399
 8005400:	08005399 	.word	0x08005399
 8005404:	080054e1 	.word	0x080054e1
 8005408:	6833      	ldr	r3, [r6, #0]
 800540a:	1d1a      	adds	r2, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6032      	str	r2, [r6, #0]
 8005410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005418:	2301      	movs	r3, #1
 800541a:	e09e      	b.n	800555a <_printf_i+0x1ea>
 800541c:	6833      	ldr	r3, [r6, #0]
 800541e:	6820      	ldr	r0, [r4, #0]
 8005420:	1d19      	adds	r1, r3, #4
 8005422:	6031      	str	r1, [r6, #0]
 8005424:	0606      	lsls	r6, r0, #24
 8005426:	d501      	bpl.n	800542c <_printf_i+0xbc>
 8005428:	681d      	ldr	r5, [r3, #0]
 800542a:	e003      	b.n	8005434 <_printf_i+0xc4>
 800542c:	0645      	lsls	r5, r0, #25
 800542e:	d5fb      	bpl.n	8005428 <_printf_i+0xb8>
 8005430:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005434:	2d00      	cmp	r5, #0
 8005436:	da03      	bge.n	8005440 <_printf_i+0xd0>
 8005438:	232d      	movs	r3, #45	@ 0x2d
 800543a:	426d      	negs	r5, r5
 800543c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005440:	230a      	movs	r3, #10
 8005442:	4859      	ldr	r0, [pc, #356]	@ (80055a8 <_printf_i+0x238>)
 8005444:	e011      	b.n	800546a <_printf_i+0xfa>
 8005446:	6821      	ldr	r1, [r4, #0]
 8005448:	6833      	ldr	r3, [r6, #0]
 800544a:	0608      	lsls	r0, r1, #24
 800544c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005450:	d402      	bmi.n	8005458 <_printf_i+0xe8>
 8005452:	0649      	lsls	r1, r1, #25
 8005454:	bf48      	it	mi
 8005456:	b2ad      	uxthmi	r5, r5
 8005458:	2f6f      	cmp	r7, #111	@ 0x6f
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	bf14      	ite	ne
 800545e:	230a      	movne	r3, #10
 8005460:	2308      	moveq	r3, #8
 8005462:	4851      	ldr	r0, [pc, #324]	@ (80055a8 <_printf_i+0x238>)
 8005464:	2100      	movs	r1, #0
 8005466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800546a:	6866      	ldr	r6, [r4, #4]
 800546c:	2e00      	cmp	r6, #0
 800546e:	bfa8      	it	ge
 8005470:	6821      	ldrge	r1, [r4, #0]
 8005472:	60a6      	str	r6, [r4, #8]
 8005474:	bfa4      	itt	ge
 8005476:	f021 0104 	bicge.w	r1, r1, #4
 800547a:	6021      	strge	r1, [r4, #0]
 800547c:	b90d      	cbnz	r5, 8005482 <_printf_i+0x112>
 800547e:	2e00      	cmp	r6, #0
 8005480:	d04b      	beq.n	800551a <_printf_i+0x1aa>
 8005482:	4616      	mov	r6, r2
 8005484:	fbb5 f1f3 	udiv	r1, r5, r3
 8005488:	fb03 5711 	mls	r7, r3, r1, r5
 800548c:	5dc7      	ldrb	r7, [r0, r7]
 800548e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005492:	462f      	mov	r7, r5
 8005494:	42bb      	cmp	r3, r7
 8005496:	460d      	mov	r5, r1
 8005498:	d9f4      	bls.n	8005484 <_printf_i+0x114>
 800549a:	2b08      	cmp	r3, #8
 800549c:	d10b      	bne.n	80054b6 <_printf_i+0x146>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	07df      	lsls	r7, r3, #31
 80054a2:	d508      	bpl.n	80054b6 <_printf_i+0x146>
 80054a4:	6923      	ldr	r3, [r4, #16]
 80054a6:	6861      	ldr	r1, [r4, #4]
 80054a8:	4299      	cmp	r1, r3
 80054aa:	bfde      	ittt	le
 80054ac:	2330      	movle	r3, #48	@ 0x30
 80054ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054b6:	1b92      	subs	r2, r2, r6
 80054b8:	6122      	str	r2, [r4, #16]
 80054ba:	464b      	mov	r3, r9
 80054bc:	4621      	mov	r1, r4
 80054be:	4640      	mov	r0, r8
 80054c0:	f8cd a000 	str.w	sl, [sp]
 80054c4:	aa03      	add	r2, sp, #12
 80054c6:	f7ff fee1 	bl	800528c <_printf_common>
 80054ca:	3001      	adds	r0, #1
 80054cc:	d14a      	bne.n	8005564 <_printf_i+0x1f4>
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
 80054d2:	b004      	add	sp, #16
 80054d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	f043 0320 	orr.w	r3, r3, #32
 80054de:	6023      	str	r3, [r4, #0]
 80054e0:	2778      	movs	r7, #120	@ 0x78
 80054e2:	4832      	ldr	r0, [pc, #200]	@ (80055ac <_printf_i+0x23c>)
 80054e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	6831      	ldr	r1, [r6, #0]
 80054ec:	061f      	lsls	r7, r3, #24
 80054ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80054f2:	d402      	bmi.n	80054fa <_printf_i+0x18a>
 80054f4:	065f      	lsls	r7, r3, #25
 80054f6:	bf48      	it	mi
 80054f8:	b2ad      	uxthmi	r5, r5
 80054fa:	6031      	str	r1, [r6, #0]
 80054fc:	07d9      	lsls	r1, r3, #31
 80054fe:	bf44      	itt	mi
 8005500:	f043 0320 	orrmi.w	r3, r3, #32
 8005504:	6023      	strmi	r3, [r4, #0]
 8005506:	b11d      	cbz	r5, 8005510 <_printf_i+0x1a0>
 8005508:	2310      	movs	r3, #16
 800550a:	e7ab      	b.n	8005464 <_printf_i+0xf4>
 800550c:	4826      	ldr	r0, [pc, #152]	@ (80055a8 <_printf_i+0x238>)
 800550e:	e7e9      	b.n	80054e4 <_printf_i+0x174>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	f023 0320 	bic.w	r3, r3, #32
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	e7f6      	b.n	8005508 <_printf_i+0x198>
 800551a:	4616      	mov	r6, r2
 800551c:	e7bd      	b.n	800549a <_printf_i+0x12a>
 800551e:	6833      	ldr	r3, [r6, #0]
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	1d18      	adds	r0, r3, #4
 8005524:	6961      	ldr	r1, [r4, #20]
 8005526:	6030      	str	r0, [r6, #0]
 8005528:	062e      	lsls	r6, r5, #24
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	d501      	bpl.n	8005532 <_printf_i+0x1c2>
 800552e:	6019      	str	r1, [r3, #0]
 8005530:	e002      	b.n	8005538 <_printf_i+0x1c8>
 8005532:	0668      	lsls	r0, r5, #25
 8005534:	d5fb      	bpl.n	800552e <_printf_i+0x1be>
 8005536:	8019      	strh	r1, [r3, #0]
 8005538:	2300      	movs	r3, #0
 800553a:	4616      	mov	r6, r2
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	e7bc      	b.n	80054ba <_printf_i+0x14a>
 8005540:	6833      	ldr	r3, [r6, #0]
 8005542:	2100      	movs	r1, #0
 8005544:	1d1a      	adds	r2, r3, #4
 8005546:	6032      	str	r2, [r6, #0]
 8005548:	681e      	ldr	r6, [r3, #0]
 800554a:	6862      	ldr	r2, [r4, #4]
 800554c:	4630      	mov	r0, r6
 800554e:	f000 f859 	bl	8005604 <memchr>
 8005552:	b108      	cbz	r0, 8005558 <_printf_i+0x1e8>
 8005554:	1b80      	subs	r0, r0, r6
 8005556:	6060      	str	r0, [r4, #4]
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	6123      	str	r3, [r4, #16]
 800555c:	2300      	movs	r3, #0
 800555e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005562:	e7aa      	b.n	80054ba <_printf_i+0x14a>
 8005564:	4632      	mov	r2, r6
 8005566:	4649      	mov	r1, r9
 8005568:	4640      	mov	r0, r8
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	47d0      	blx	sl
 800556e:	3001      	adds	r0, #1
 8005570:	d0ad      	beq.n	80054ce <_printf_i+0x15e>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	079b      	lsls	r3, r3, #30
 8005576:	d413      	bmi.n	80055a0 <_printf_i+0x230>
 8005578:	68e0      	ldr	r0, [r4, #12]
 800557a:	9b03      	ldr	r3, [sp, #12]
 800557c:	4298      	cmp	r0, r3
 800557e:	bfb8      	it	lt
 8005580:	4618      	movlt	r0, r3
 8005582:	e7a6      	b.n	80054d2 <_printf_i+0x162>
 8005584:	2301      	movs	r3, #1
 8005586:	4632      	mov	r2, r6
 8005588:	4649      	mov	r1, r9
 800558a:	4640      	mov	r0, r8
 800558c:	47d0      	blx	sl
 800558e:	3001      	adds	r0, #1
 8005590:	d09d      	beq.n	80054ce <_printf_i+0x15e>
 8005592:	3501      	adds	r5, #1
 8005594:	68e3      	ldr	r3, [r4, #12]
 8005596:	9903      	ldr	r1, [sp, #12]
 8005598:	1a5b      	subs	r3, r3, r1
 800559a:	42ab      	cmp	r3, r5
 800559c:	dcf2      	bgt.n	8005584 <_printf_i+0x214>
 800559e:	e7eb      	b.n	8005578 <_printf_i+0x208>
 80055a0:	2500      	movs	r5, #0
 80055a2:	f104 0619 	add.w	r6, r4, #25
 80055a6:	e7f5      	b.n	8005594 <_printf_i+0x224>
 80055a8:	0800582f 	.word	0x0800582f
 80055ac:	08005840 	.word	0x08005840

080055b0 <memmove>:
 80055b0:	4288      	cmp	r0, r1
 80055b2:	b510      	push	{r4, lr}
 80055b4:	eb01 0402 	add.w	r4, r1, r2
 80055b8:	d902      	bls.n	80055c0 <memmove+0x10>
 80055ba:	4284      	cmp	r4, r0
 80055bc:	4623      	mov	r3, r4
 80055be:	d807      	bhi.n	80055d0 <memmove+0x20>
 80055c0:	1e43      	subs	r3, r0, #1
 80055c2:	42a1      	cmp	r1, r4
 80055c4:	d008      	beq.n	80055d8 <memmove+0x28>
 80055c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ce:	e7f8      	b.n	80055c2 <memmove+0x12>
 80055d0:	4601      	mov	r1, r0
 80055d2:	4402      	add	r2, r0
 80055d4:	428a      	cmp	r2, r1
 80055d6:	d100      	bne.n	80055da <memmove+0x2a>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055e2:	e7f7      	b.n	80055d4 <memmove+0x24>

080055e4 <_sbrk_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	2300      	movs	r3, #0
 80055e8:	4d05      	ldr	r5, [pc, #20]	@ (8005600 <_sbrk_r+0x1c>)
 80055ea:	4604      	mov	r4, r0
 80055ec:	4608      	mov	r0, r1
 80055ee:	602b      	str	r3, [r5, #0]
 80055f0:	f7fb f8ca 	bl	8000788 <_sbrk>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d102      	bne.n	80055fe <_sbrk_r+0x1a>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	b103      	cbz	r3, 80055fe <_sbrk_r+0x1a>
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	20002728 	.word	0x20002728

08005604 <memchr>:
 8005604:	4603      	mov	r3, r0
 8005606:	b510      	push	{r4, lr}
 8005608:	b2c9      	uxtb	r1, r1
 800560a:	4402      	add	r2, r0
 800560c:	4293      	cmp	r3, r2
 800560e:	4618      	mov	r0, r3
 8005610:	d101      	bne.n	8005616 <memchr+0x12>
 8005612:	2000      	movs	r0, #0
 8005614:	e003      	b.n	800561e <memchr+0x1a>
 8005616:	7804      	ldrb	r4, [r0, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	428c      	cmp	r4, r1
 800561c:	d1f6      	bne.n	800560c <memchr+0x8>
 800561e:	bd10      	pop	{r4, pc}

08005620 <_realloc_r>:
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	4680      	mov	r8, r0
 8005626:	4615      	mov	r5, r2
 8005628:	460c      	mov	r4, r1
 800562a:	b921      	cbnz	r1, 8005636 <_realloc_r+0x16>
 800562c:	4611      	mov	r1, r2
 800562e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005632:	f7ff bc47 	b.w	8004ec4 <_malloc_r>
 8005636:	b92a      	cbnz	r2, 8005644 <_realloc_r+0x24>
 8005638:	f7ff fbda 	bl	8004df0 <_free_r>
 800563c:	2400      	movs	r4, #0
 800563e:	4620      	mov	r0, r4
 8005640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005644:	f000 f81a 	bl	800567c <_malloc_usable_size_r>
 8005648:	4285      	cmp	r5, r0
 800564a:	4606      	mov	r6, r0
 800564c:	d802      	bhi.n	8005654 <_realloc_r+0x34>
 800564e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005652:	d8f4      	bhi.n	800563e <_realloc_r+0x1e>
 8005654:	4629      	mov	r1, r5
 8005656:	4640      	mov	r0, r8
 8005658:	f7ff fc34 	bl	8004ec4 <_malloc_r>
 800565c:	4607      	mov	r7, r0
 800565e:	2800      	cmp	r0, #0
 8005660:	d0ec      	beq.n	800563c <_realloc_r+0x1c>
 8005662:	42b5      	cmp	r5, r6
 8005664:	462a      	mov	r2, r5
 8005666:	4621      	mov	r1, r4
 8005668:	bf28      	it	cs
 800566a:	4632      	movcs	r2, r6
 800566c:	f7ff fbb2 	bl	8004dd4 <memcpy>
 8005670:	4621      	mov	r1, r4
 8005672:	4640      	mov	r0, r8
 8005674:	f7ff fbbc 	bl	8004df0 <_free_r>
 8005678:	463c      	mov	r4, r7
 800567a:	e7e0      	b.n	800563e <_realloc_r+0x1e>

0800567c <_malloc_usable_size_r>:
 800567c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005680:	1f18      	subs	r0, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	bfbc      	itt	lt
 8005686:	580b      	ldrlt	r3, [r1, r0]
 8005688:	18c0      	addlt	r0, r0, r3
 800568a:	4770      	bx	lr

0800568c <_init>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr

08005698 <_fini>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr
