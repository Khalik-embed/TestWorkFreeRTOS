
TestWorkFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800523c  0800523c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  0800523c  0800523c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800523c  0800523c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005244  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  20000010  08005254  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a9c  08005254  00007a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a6e  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e4  00000000  00000000  0001caa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0001fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4e  00000000  00000000  00021240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019019  00000000  00000000  0002218e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170b8  00000000  00000000  0003b1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000937d9  00000000  00000000  0005225f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5a38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005188  00000000  00000000  000e5a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000eac04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080051a0 	.word	0x080051a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080051a0 	.word	0x080051a0

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000154:	4a04      	ldr	r2, [pc, #16]	@ (8000168 <MX_FREERTOS_Init+0x18>)
 8000156:	2100      	movs	r1, #0
 8000158:	4804      	ldr	r0, [pc, #16]	@ (800016c <MX_FREERTOS_Init+0x1c>)
 800015a:	f002 fbb3 	bl	80028c4 <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a03      	ldr	r2, [pc, #12]	@ (8000170 <MX_FREERTOS_Init+0x20>)
 8000162:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	080051ec 	.word	0x080051ec
 800016c:	08000175 	.word	0x08000175
 8000170:	2000002c 	.word	0x2000002c

08000174 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800017c:	2001      	movs	r0, #1
 800017e:	f002 fc4b 	bl	8002a18 <osDelay>
 8000182:	e7fb      	b.n	800017c <StartDefaultTask+0x8>

08000184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800018a:	4b14      	ldr	r3, [pc, #80]	@ (80001dc <MX_GPIO_Init+0x58>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a13      	ldr	r2, [pc, #76]	@ (80001dc <MX_GPIO_Init+0x58>)
 8000190:	f043 0320 	orr.w	r3, r3, #32
 8000194:	6193      	str	r3, [r2, #24]
 8000196:	4b11      	ldr	r3, [pc, #68]	@ (80001dc <MX_GPIO_Init+0x58>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	f003 0320 	and.w	r3, r3, #32
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a2:	4b0e      	ldr	r3, [pc, #56]	@ (80001dc <MX_GPIO_Init+0x58>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a0d      	ldr	r2, [pc, #52]	@ (80001dc <MX_GPIO_Init+0x58>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	6193      	str	r3, [r2, #24]
 80001ae:	4b0b      	ldr	r3, [pc, #44]	@ (80001dc <MX_GPIO_Init+0x58>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	f003 0304 	and.w	r3, r3, #4
 80001b6:	60bb      	str	r3, [r7, #8]
 80001b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ba:	4b08      	ldr	r3, [pc, #32]	@ (80001dc <MX_GPIO_Init+0x58>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a07      	ldr	r2, [pc, #28]	@ (80001dc <MX_GPIO_Init+0x58>)
 80001c0:	f043 0308 	orr.w	r3, r3, #8
 80001c4:	6193      	str	r3, [r2, #24]
 80001c6:	4b05      	ldr	r3, [pc, #20]	@ (80001dc <MX_GPIO_Init+0x58>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	f003 0308 	and.w	r3, r3, #8
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]

}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40021000 	.word	0x40021000

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 faec 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f81a 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f7ff ffca 	bl	8000184 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f96a 	bl	80004c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 f992 	bl	800051c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80001f8:	f000 f9ba 	bl	8000570 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, (uint8_t *)"Hello, world!\r\n", 15U, 100U);
 80001fc:	2364      	movs	r3, #100	@ 0x64
 80001fe:	220f      	movs	r2, #15
 8000200:	4905      	ldr	r1, [pc, #20]	@ (8000218 <main+0x38>)
 8000202:	4806      	ldr	r0, [pc, #24]	@ (800021c <main+0x3c>)
 8000204:	f001 fd24 	bl	8001c50 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000208:	f002 faf6 	bl	80027f8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800020c:	f7ff ffa0 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000210:	f002 fb24 	bl	800285c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	bf00      	nop
 8000216:	e7fd      	b.n	8000214 <main+0x34>
 8000218:	080051c4 	.word	0x080051c4
 800021c:	20000078 	.word	0x20000078

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	@ 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	@ 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f004 ff7c 	bl	800512c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2301      	movs	r3, #1
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024c:	2300      	movs	r3, #0
 800024e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fdfb 	bl	8000e50 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000260:	f000 f82c 	bl	80002bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f001 f869 	bl	8001354 <HAL_RCC_ClockConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000288:	f000 f818 	bl	80002bc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800028c:	f001 f94c 	bl	8001528 <HAL_RCC_EnableCSS>
}
 8000290:	bf00      	nop
 8000292:	3740      	adds	r7, #64	@ 0x40
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d101      	bne.n	80002ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002aa:	f000 fa9f 	bl	80007ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40000800 	.word	0x40000800

080002bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c0:	b672      	cpsid	i
}
 80002c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <Error_Handler+0x8>

080002c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ce:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <HAL_MspInit+0x68>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a17      	ldr	r2, [pc, #92]	@ (8000330 <HAL_MspInit+0x68>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6193      	str	r3, [r2, #24]
 80002da:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <HAL_MspInit+0x68>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
 80002e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002e6:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <HAL_MspInit+0x68>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	4a11      	ldr	r2, [pc, #68]	@ (8000330 <HAL_MspInit+0x68>)
 80002ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002f0:	61d3      	str	r3, [r2, #28]
 80002f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <HAL_MspInit+0x68>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80002fe:	2200      	movs	r2, #0
 8000300:	210f      	movs	r1, #15
 8000302:	f06f 0001 	mvn.w	r0, #1
 8000306:	f000 fb42 	bl	800098e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800030a:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <HAL_MspInit+0x6c>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	4a04      	ldr	r2, [pc, #16]	@ (8000334 <HAL_MspInit+0x6c>)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000
 8000334:	40010000 	.word	0x40010000

08000338 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b08e      	sub	sp, #56	@ 0x38
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000340:	2300      	movs	r3, #0
 8000342:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000344:	2300      	movs	r3, #0
 8000346:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000348:	2300      	movs	r3, #0
 800034a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800034e:	4b34      	ldr	r3, [pc, #208]	@ (8000420 <HAL_InitTick+0xe8>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a33      	ldr	r2, [pc, #204]	@ (8000420 <HAL_InitTick+0xe8>)
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b31      	ldr	r3, [pc, #196]	@ (8000420 <HAL_InitTick+0xe8>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 0304 	and.w	r3, r3, #4
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000366:	f107 0210 	add.w	r2, r7, #16
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	4611      	mov	r1, r2
 8000370:	4618      	mov	r0, r3
 8000372:	f001 f96b 	bl	800164c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000376:	6a3b      	ldr	r3, [r7, #32]
 8000378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800037a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800037c:	2b00      	cmp	r3, #0
 800037e:	d103      	bne.n	8000388 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000380:	f001 f93c 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8000384:	6378      	str	r0, [r7, #52]	@ 0x34
 8000386:	e004      	b.n	8000392 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000388:	f001 f938 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 800038c:	4603      	mov	r3, r0
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000394:	4a23      	ldr	r2, [pc, #140]	@ (8000424 <HAL_InitTick+0xec>)
 8000396:	fba2 2303 	umull	r2, r3, r2, r3
 800039a:	0c9b      	lsrs	r3, r3, #18
 800039c:	3b01      	subs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80003a0:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <HAL_InitTick+0xf0>)
 80003a2:	4a22      	ldr	r2, [pc, #136]	@ (800042c <HAL_InitTick+0xf4>)
 80003a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80003a6:	4b20      	ldr	r3, [pc, #128]	@ (8000428 <HAL_InitTick+0xf0>)
 80003a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80003ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000428 <HAL_InitTick+0xf0>)
 80003b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <HAL_InitTick+0xf0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <HAL_InitTick+0xf0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c0:	4b19      	ldr	r3, [pc, #100]	@ (8000428 <HAL_InitTick+0xf0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80003c6:	4818      	ldr	r0, [pc, #96]	@ (8000428 <HAL_InitTick+0xf0>)
 80003c8:	f001 f9a8 	bl	800171c <HAL_TIM_Base_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80003d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d11b      	bne.n	8000412 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80003da:	4813      	ldr	r0, [pc, #76]	@ (8000428 <HAL_InitTick+0xf0>)
 80003dc:	f001 f9f6 	bl	80017cc <HAL_TIM_Base_Start_IT>
 80003e0:	4603      	mov	r3, r0
 80003e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80003e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d111      	bne.n	8000412 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80003ee:	201e      	movs	r0, #30
 80003f0:	f000 fae9 	bl	80009c6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b0f      	cmp	r3, #15
 80003f8:	d808      	bhi.n	800040c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80003fa:	2200      	movs	r2, #0
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	201e      	movs	r0, #30
 8000400:	f000 fac5 	bl	800098e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000404:	4a0a      	ldr	r2, [pc, #40]	@ (8000430 <HAL_InitTick+0xf8>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	e002      	b.n	8000412 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800040c:	2301      	movs	r3, #1
 800040e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000412:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000416:	4618      	mov	r0, r3
 8000418:	3738      	adds	r7, #56	@ 0x38
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	431bde83 	.word	0x431bde83
 8000428:	20000030 	.word	0x20000030
 800042c:	40000800 	.word	0x40000800
 8000430:	20000004 	.word	0x20000004

08000434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000438:	f001 f938 	bl	80016ac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <NMI_Handler+0x8>

08000440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <MemManage_Handler+0x4>

08000450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <BusFault_Handler+0x4>

08000458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <UsageFault_Handler+0x4>

08000460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000470:	4802      	ldr	r0, [pc, #8]	@ (800047c <TIM4_IRQHandler+0x10>)
 8000472:	f001 f9fd 	bl	8001870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000030 	.word	0x20000030

08000480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000484:	4802      	ldr	r0, [pc, #8]	@ (8000490 <USART1_IRQHandler+0x10>)
 8000486:	f001 fc67 	bl	8001d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000078 	.word	0x20000078

08000494 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000498:	4802      	ldr	r0, [pc, #8]	@ (80004a4 <USART2_IRQHandler+0x10>)
 800049a:	f001 fc5d 	bl	8001d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000c0 	.word	0x200000c0

080004a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80004ac:	4802      	ldr	r0, [pc, #8]	@ (80004b8 <USART3_IRQHandler+0x10>)
 80004ae:	f001 fc53 	bl	8001d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000108 	.word	0x20000108

080004bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 80004ce:	4a12      	ldr	r2, [pc, #72]	@ (8000518 <MX_USART1_UART_Init+0x50>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 80004d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_USART1_UART_Init+0x4c>)
 8000500:	f001 fb56 	bl	8001bb0 <HAL_UART_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800050a:	f7ff fed7 	bl	80002bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000078 	.word	0x20000078
 8000518:	40013800 	.word	0x40013800

0800051c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 8000522:	4a12      	ldr	r2, [pc, #72]	@ (800056c <MX_USART2_UART_Init+0x50>)
 8000524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 8000528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800052c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_USART2_UART_Init+0x4c>)
 8000554:	f001 fb2c 	bl	8001bb0 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800055e:	f7ff fead 	bl	80002bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000c0 	.word	0x200000c0
 800056c:	40004400 	.word	0x40004400

08000570 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 8000576:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <MX_USART3_UART_Init+0x50>)
 8000578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 800057c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <MX_USART3_UART_Init+0x4c>)
 80005a8:	f001 fb02 	bl	8001bb0 <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80005b2:	f7ff fe83 	bl	80002bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000108 	.word	0x20000108
 80005c0:	40004800 	.word	0x40004800

080005c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a5f      	ldr	r2, [pc, #380]	@ (800075c <HAL_UART_MspInit+0x198>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d13a      	bne.n	800065a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e4:	4b5e      	ldr	r3, [pc, #376]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a5d      	ldr	r2, [pc, #372]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b5b      	ldr	r3, [pc, #364]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f8:	61fb      	str	r3, [r7, #28]
 80005fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b58      	ldr	r3, [pc, #352]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a57      	ldr	r2, [pc, #348]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b55      	ldr	r3, [pc, #340]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000614:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	2302      	movs	r3, #2
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4619      	mov	r1, r3
 8000628:	484e      	ldr	r0, [pc, #312]	@ (8000764 <HAL_UART_MspInit+0x1a0>)
 800062a:	f000 fa8d 	bl	8000b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800062e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4619      	mov	r1, r3
 8000642:	4848      	ldr	r0, [pc, #288]	@ (8000764 <HAL_UART_MspInit+0x1a0>)
 8000644:	f000 fa80 	bl	8000b48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2105      	movs	r1, #5
 800064c:	2025      	movs	r0, #37	@ 0x25
 800064e:	f000 f99e 	bl	800098e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000652:	2025      	movs	r0, #37	@ 0x25
 8000654:	f000 f9b7 	bl	80009c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000658:	e07c      	b.n	8000754 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a42      	ldr	r2, [pc, #264]	@ (8000768 <HAL_UART_MspInit+0x1a4>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d138      	bne.n	80006d6 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000664:	4b3e      	ldr	r3, [pc, #248]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	4a3d      	ldr	r2, [pc, #244]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 800066a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066e:	61d3      	str	r3, [r2, #28]
 8000670:	4b3b      	ldr	r3, [pc, #236]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a37      	ldr	r2, [pc, #220]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b35      	ldr	r3, [pc, #212]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000694:	2304      	movs	r3, #4
 8000696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4619      	mov	r1, r3
 80006a6:	482f      	ldr	r0, [pc, #188]	@ (8000764 <HAL_UART_MspInit+0x1a0>)
 80006a8:	f000 fa4e 	bl	8000b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ac:	2308      	movs	r3, #8
 80006ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4619      	mov	r1, r3
 80006be:	4829      	ldr	r0, [pc, #164]	@ (8000764 <HAL_UART_MspInit+0x1a0>)
 80006c0:	f000 fa42 	bl	8000b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2105      	movs	r1, #5
 80006c8:	2026      	movs	r0, #38	@ 0x26
 80006ca:	f000 f960 	bl	800098e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006ce:	2026      	movs	r0, #38	@ 0x26
 80006d0:	f000 f979 	bl	80009c6 <HAL_NVIC_EnableIRQ>
}
 80006d4:	e03e      	b.n	8000754 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a24      	ldr	r2, [pc, #144]	@ (800076c <HAL_UART_MspInit+0x1a8>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d139      	bne.n	8000754 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80006e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006ea:	61d3      	str	r3, [r2, #28]
 80006ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <HAL_UART_MspInit+0x19c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	4619      	mov	r1, r3
 8000724:	4812      	ldr	r0, [pc, #72]	@ (8000770 <HAL_UART_MspInit+0x1ac>)
 8000726:	f000 fa0f 	bl	8000b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800072a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4619      	mov	r1, r3
 800073e:	480c      	ldr	r0, [pc, #48]	@ (8000770 <HAL_UART_MspInit+0x1ac>)
 8000740:	f000 fa02 	bl	8000b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2105      	movs	r1, #5
 8000748:	2027      	movs	r0, #39	@ 0x27
 800074a:	f000 f920 	bl	800098e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800074e:	2027      	movs	r0, #39	@ 0x27
 8000750:	f000 f939 	bl	80009c6 <HAL_NVIC_EnableIRQ>
}
 8000754:	bf00      	nop
 8000756:	3730      	adds	r7, #48	@ 0x30
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40013800 	.word	0x40013800
 8000760:	40021000 	.word	0x40021000
 8000764:	40010800 	.word	0x40010800
 8000768:	40004400 	.word	0x40004400
 800076c:	40004800 	.word	0x40004800
 8000770:	40010c00 	.word	0x40010c00

08000774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000774:	f7ff fea2 	bl	80004bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800077a:	490c      	ldr	r1, [pc, #48]	@ (80007ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a09      	ldr	r2, [pc, #36]	@ (80007b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000790:	4c09      	ldr	r4, [pc, #36]	@ (80007b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079e:	f004 fccd 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff fd1d 	bl	80001e0 <main>
  bx lr
 80007a6:	4770      	bx	lr
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007b0:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 80007b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007b8:	20001a9c 	.word	0x20001a9c

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f8d1 	bl	8000978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	200f      	movs	r0, #15
 80007d8:	f7ff fdae 	bl	8000338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fd74 	bl	80002c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <HAL_IncTick+0x1c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HAL_IncTick+0x20>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a03      	ldr	r2, [pc, #12]	@ (800080c <HAL_IncTick+0x20>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000008 	.word	0x20000008
 800080c:	20000150 	.word	0x20000150

08000810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b02      	ldr	r3, [pc, #8]	@ (8000820 <HAL_GetTick+0x10>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000150 	.word	0x20000150

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4906      	ldr	r1, [pc, #24]	@ (80008bc <__NVIC_EnableIRQ+0x34>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	@ (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	@ (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	@ 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	@ 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff4f 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	4603      	mov	r3, r0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a0:	f7ff ff64 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff ffb2 	bl	8000914 <NVIC_EncodePriority>
 80009b0:	4602      	mov	r2, r0
 80009b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff81 	bl	80008c0 <__NVIC_SetPriority>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff57 	bl	8000888 <__NVIC_EnableIRQ>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b085      	sub	sp, #20
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d008      	beq.n	8000a0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2204      	movs	r2, #4
 80009fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e020      	b.n	8000a4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 020e 	bic.w	r2, r2, #14
 8000a1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f022 0201 	bic.w	r2, r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a34:	2101      	movs	r1, #1
 8000a36:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d005      	beq.n	8000a7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2204      	movs	r2, #4
 8000a74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e051      	b.n	8000b20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 020e 	bic.w	r2, r2, #14
 8000a8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 0201 	bic.w	r2, r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <HAL_DMA_Abort_IT+0xd4>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d029      	beq.n	8000afa <HAL_DMA_Abort_IT+0xa2>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <HAL_DMA_Abort_IT+0xd8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d022      	beq.n	8000af6 <HAL_DMA_Abort_IT+0x9e>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b34 <HAL_DMA_Abort_IT+0xdc>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d01a      	beq.n	8000af0 <HAL_DMA_Abort_IT+0x98>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1e      	ldr	r2, [pc, #120]	@ (8000b38 <HAL_DMA_Abort_IT+0xe0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d012      	beq.n	8000aea <HAL_DMA_Abort_IT+0x92>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b3c <HAL_DMA_Abort_IT+0xe4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d00a      	beq.n	8000ae4 <HAL_DMA_Abort_IT+0x8c>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b40 <HAL_DMA_Abort_IT+0xe8>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d102      	bne.n	8000ade <HAL_DMA_Abort_IT+0x86>
 8000ad8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000adc:	e00e      	b.n	8000afc <HAL_DMA_Abort_IT+0xa4>
 8000ade:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ae2:	e00b      	b.n	8000afc <HAL_DMA_Abort_IT+0xa4>
 8000ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae8:	e008      	b.n	8000afc <HAL_DMA_Abort_IT+0xa4>
 8000aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aee:	e005      	b.n	8000afc <HAL_DMA_Abort_IT+0xa4>
 8000af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af4:	e002      	b.n	8000afc <HAL_DMA_Abort_IT+0xa4>
 8000af6:	2310      	movs	r3, #16
 8000af8:	e000      	b.n	8000afc <HAL_DMA_Abort_IT+0xa4>
 8000afa:	2301      	movs	r3, #1
 8000afc:	4a11      	ldr	r2, [pc, #68]	@ (8000b44 <HAL_DMA_Abort_IT+0xec>)
 8000afe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2201      	movs	r2, #1
 8000b04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	4798      	blx	r3
    } 
  }
  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40020008 	.word	0x40020008
 8000b30:	4002001c 	.word	0x4002001c
 8000b34:	40020030 	.word	0x40020030
 8000b38:	40020044 	.word	0x40020044
 8000b3c:	40020058 	.word	0x40020058
 8000b40:	4002006c 	.word	0x4002006c
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b08b      	sub	sp, #44	@ 0x2c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e169      	b.n	8000e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f040 8158 	bne.w	8000e2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4a9a      	ldr	r2, [pc, #616]	@ (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d05e      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b84:	4a98      	ldr	r2, [pc, #608]	@ (8000de8 <HAL_GPIO_Init+0x2a0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d875      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000b8a:	4a98      	ldr	r2, [pc, #608]	@ (8000dec <HAL_GPIO_Init+0x2a4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d058      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b90:	4a96      	ldr	r2, [pc, #600]	@ (8000dec <HAL_GPIO_Init+0x2a4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d86f      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000b96:	4a96      	ldr	r2, [pc, #600]	@ (8000df0 <HAL_GPIO_Init+0x2a8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d052      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000b9c:	4a94      	ldr	r2, [pc, #592]	@ (8000df0 <HAL_GPIO_Init+0x2a8>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d869      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000ba2:	4a94      	ldr	r2, [pc, #592]	@ (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d04c      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a92      	ldr	r2, [pc, #584]	@ (8000df4 <HAL_GPIO_Init+0x2ac>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d863      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bae:	4a92      	ldr	r2, [pc, #584]	@ (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d046      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
 8000bb4:	4a90      	ldr	r2, [pc, #576]	@ (8000df8 <HAL_GPIO_Init+0x2b0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d85d      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d82a      	bhi.n	8000c14 <HAL_GPIO_Init+0xcc>
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d859      	bhi.n	8000c76 <HAL_GPIO_Init+0x12e>
 8000bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc8 <HAL_GPIO_Init+0x80>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c1d 	.word	0x08000c1d
 8000bd0:	08000c2f 	.word	0x08000c2f
 8000bd4:	08000c71 	.word	0x08000c71
 8000bd8:	08000c77 	.word	0x08000c77
 8000bdc:	08000c77 	.word	0x08000c77
 8000be0:	08000c77 	.word	0x08000c77
 8000be4:	08000c77 	.word	0x08000c77
 8000be8:	08000c77 	.word	0x08000c77
 8000bec:	08000c77 	.word	0x08000c77
 8000bf0:	08000c77 	.word	0x08000c77
 8000bf4:	08000c77 	.word	0x08000c77
 8000bf8:	08000c77 	.word	0x08000c77
 8000bfc:	08000c77 	.word	0x08000c77
 8000c00:	08000c77 	.word	0x08000c77
 8000c04:	08000c77 	.word	0x08000c77
 8000c08:	08000c77 	.word	0x08000c77
 8000c0c:	08000c25 	.word	0x08000c25
 8000c10:	08000c39 	.word	0x08000c39
 8000c14:	4a79      	ldr	r2, [pc, #484]	@ (8000dfc <HAL_GPIO_Init+0x2b4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1a:	e02c      	b.n	8000c76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e029      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e024      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	3308      	adds	r3, #8
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e01f      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	330c      	adds	r3, #12
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e01a      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e013      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	611a      	str	r2, [r3, #16]
          break;
 8000c62:	e009      	b.n	8000c78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	615a      	str	r2, [r3, #20]
          break;
 8000c6e:	e003      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e000      	b.n	8000c78 <HAL_GPIO_Init+0x130>
          break;
 8000c76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2bff      	cmp	r3, #255	@ 0xff
 8000c7c:	d801      	bhi.n	8000c82 <HAL_GPIO_Init+0x13a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	e001      	b.n	8000c86 <HAL_GPIO_Init+0x13e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3304      	adds	r3, #4
 8000c86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2bff      	cmp	r3, #255	@ 0xff
 8000c8c:	d802      	bhi.n	8000c94 <HAL_GPIO_Init+0x14c>
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	e002      	b.n	8000c9a <HAL_GPIO_Init+0x152>
 8000c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c96:	3b08      	subs	r3, #8
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	6a39      	ldr	r1, [r7, #32]
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 80b1 	beq.w	8000e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8000e00 <HAL_GPIO_Init+0x2b8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce0:	4a48      	ldr	r2, [pc, #288]	@ (8000e04 <HAL_GPIO_Init+0x2bc>)
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a40      	ldr	r2, [pc, #256]	@ (8000e08 <HAL_GPIO_Init+0x2c0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d013      	beq.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e0c <HAL_GPIO_Init+0x2c4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d00d      	beq.n	8000d30 <HAL_GPIO_Init+0x1e8>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3e      	ldr	r2, [pc, #248]	@ (8000e10 <HAL_GPIO_Init+0x2c8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d007      	beq.n	8000d2c <HAL_GPIO_Init+0x1e4>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e14 <HAL_GPIO_Init+0x2cc>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d101      	bne.n	8000d28 <HAL_GPIO_Init+0x1e0>
 8000d24:	2303      	movs	r3, #3
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	e004      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d34:	2300      	movs	r3, #0
 8000d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d38:	f002 0203 	and.w	r2, r2, #3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	4093      	lsls	r3, r2
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d46:	492f      	ldr	r1, [pc, #188]	@ (8000e04 <HAL_GPIO_Init+0x2bc>)
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d60:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	492c      	ldr	r1, [pc, #176]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4928      	ldr	r1, [pc, #160]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	4922      	ldr	r1, [pc, #136]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60cb      	str	r3, [r1, #12]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	491e      	ldr	r1, [pc, #120]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4918      	ldr	r1, [pc, #96]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4914      	ldr	r1, [pc, #80]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d021      	beq.n	8000e1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	490e      	ldr	r1, [pc, #56]	@ (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	e021      	b.n	8000e2a <HAL_GPIO_Init+0x2e2>
 8000de6:	bf00      	nop
 8000de8:	10320000 	.word	0x10320000
 8000dec:	10310000 	.word	0x10310000
 8000df0:	10220000 	.word	0x10220000
 8000df4:	10210000 	.word	0x10210000
 8000df8:	10120000 	.word	0x10120000
 8000dfc:	10110000 	.word	0x10110000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40011400 	.word	0x40011400
 8000e18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_GPIO_Init+0x304>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4909      	ldr	r1, [pc, #36]	@ (8000e4c <HAL_GPIO_Init+0x304>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e36:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f47f ae8e 	bne.w	8000b5c <HAL_GPIO_Init+0x14>
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	372c      	adds	r7, #44	@ 0x2c
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e272      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8087 	beq.w	8000f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e70:	4b92      	ldr	r3, [pc, #584]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 030c 	and.w	r3, r3, #12
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d00c      	beq.n	8000e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 030c 	and.w	r3, r3, #12
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d112      	bne.n	8000eae <HAL_RCC_OscConfig+0x5e>
 8000e88:	4b8c      	ldr	r3, [pc, #560]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e94:	d10b      	bne.n	8000eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e96:	4b89      	ldr	r3, [pc, #548]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d06c      	beq.n	8000f7c <HAL_RCC_OscConfig+0x12c>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d168      	bne.n	8000f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e24c      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eb6:	d106      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x76>
 8000eb8:	4b80      	ldr	r3, [pc, #512]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a7f      	ldr	r2, [pc, #508]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e02e      	b.n	8000f24 <HAL_RCC_OscConfig+0xd4>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x98>
 8000ece:	4b7b      	ldr	r3, [pc, #492]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7a      	ldr	r2, [pc, #488]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b78      	ldr	r3, [pc, #480]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a77      	ldr	r2, [pc, #476]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e01d      	b.n	8000f24 <HAL_RCC_OscConfig+0xd4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0xbc>
 8000ef2:	4b72      	ldr	r3, [pc, #456]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a71      	ldr	r2, [pc, #452]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b6f      	ldr	r3, [pc, #444]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a6e      	ldr	r2, [pc, #440]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e00b      	b.n	8000f24 <HAL_RCC_OscConfig+0xd4>
 8000f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a6a      	ldr	r2, [pc, #424]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b68      	ldr	r3, [pc, #416]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a67      	ldr	r2, [pc, #412]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fc70 	bl	8000810 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fc6c 	bl	8000810 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	@ 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e200      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	4b5d      	ldr	r3, [pc, #372]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0xe4>
 8000f52:	e014      	b.n	8000f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc5c 	bl	8000810 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fc58 	bl	8000810 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	@ 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1ec      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6e:	4b53      	ldr	r3, [pc, #332]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0x10c>
 8000f7a:	e000      	b.n	8000f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d063      	beq.n	8001052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f96:	4b49      	ldr	r3, [pc, #292]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d11c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x18c>
 8000fa2:	4b46      	ldr	r3, [pc, #280]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fae:	4b43      	ldr	r3, [pc, #268]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x176>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e1c0      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4939      	ldr	r1, [pc, #228]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	e03a      	b.n	8001052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d020      	beq.n	8001026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fc11 	bl	8000810 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fc0d 	bl	8000810 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e1a1      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001004:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4927      	ldr	r1, [pc, #156]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
 8001024:	e015      	b.n	8001052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <HAL_RCC_OscConfig+0x270>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fbf0 	bl	8000810 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001034:	f7ff fbec 	bl	8000810 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e180      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d03a      	beq.n	80010d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d019      	beq.n	800109a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_RCC_OscConfig+0x274>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106c:	f7ff fbd0 	bl	8000810 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fbcc 	bl	8000810 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e160      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <HAL_RCC_OscConfig+0x26c>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f000 fb1e 	bl	80016d4 <RCC_Delay>
 8001098:	e01c      	b.n	80010d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_RCC_OscConfig+0x274>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a0:	f7ff fbb6 	bl	8000810 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a6:	e00f      	b.n	80010c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a8:	f7ff fbb2 	bl	8000810 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d908      	bls.n	80010c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e146      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	42420000 	.word	0x42420000
 80010c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c8:	4b92      	ldr	r3, [pc, #584]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e9      	bne.n	80010a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80a6 	beq.w	800122e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10d      	bne.n	800110e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b88      	ldr	r3, [pc, #544]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a87      	ldr	r2, [pc, #540]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b85      	ldr	r3, [pc, #532]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110a:	2301      	movs	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	4b82      	ldr	r3, [pc, #520]	@ (8001318 <HAL_RCC_OscConfig+0x4c8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001116:	2b00      	cmp	r3, #0
 8001118:	d118      	bne.n	800114c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800111a:	4b7f      	ldr	r3, [pc, #508]	@ (8001318 <HAL_RCC_OscConfig+0x4c8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a7e      	ldr	r2, [pc, #504]	@ (8001318 <HAL_RCC_OscConfig+0x4c8>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001126:	f7ff fb73 	bl	8000810 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112e:	f7ff fb6f 	bl	8000810 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	@ 0x64
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e103      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001140:	4b75      	ldr	r3, [pc, #468]	@ (8001318 <HAL_RCC_OscConfig+0x4c8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x312>
 8001154:	4b6f      	ldr	r3, [pc, #444]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a6e      	ldr	r2, [pc, #440]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6213      	str	r3, [r2, #32]
 8001160:	e02d      	b.n	80011be <HAL_RCC_OscConfig+0x36e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x334>
 800116a:	4b6a      	ldr	r3, [pc, #424]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a69      	ldr	r2, [pc, #420]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	6213      	str	r3, [r2, #32]
 8001176:	4b67      	ldr	r3, [pc, #412]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4a66      	ldr	r2, [pc, #408]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	f023 0304 	bic.w	r3, r3, #4
 8001180:	6213      	str	r3, [r2, #32]
 8001182:	e01c      	b.n	80011be <HAL_RCC_OscConfig+0x36e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d10c      	bne.n	80011a6 <HAL_RCC_OscConfig+0x356>
 800118c:	4b61      	ldr	r3, [pc, #388]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4a60      	ldr	r2, [pc, #384]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6213      	str	r3, [r2, #32]
 8001198:	4b5e      	ldr	r3, [pc, #376]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4a5d      	ldr	r2, [pc, #372]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6213      	str	r3, [r2, #32]
 80011a4:	e00b      	b.n	80011be <HAL_RCC_OscConfig+0x36e>
 80011a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	4b58      	ldr	r3, [pc, #352]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a57      	ldr	r2, [pc, #348]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d015      	beq.n	80011f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fb23 	bl	8000810 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff fb1f 	bl	8000810 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0b1      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ee      	beq.n	80011ce <HAL_RCC_OscConfig+0x37e>
 80011f0:	e014      	b.n	800121c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb0d 	bl	8000810 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fb09 	bl	8000810 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e09b      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001210:	4b40      	ldr	r3, [pc, #256]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ee      	bne.n	80011fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d105      	bne.n	800122e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001222:	4b3c      	ldr	r3, [pc, #240]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a3b      	ldr	r2, [pc, #236]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800122c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8087 	beq.w	8001346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001238:	4b36      	ldr	r3, [pc, #216]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b08      	cmp	r3, #8
 8001242:	d061      	beq.n	8001308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d146      	bne.n	80012da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124c:	4b33      	ldr	r3, [pc, #204]	@ (800131c <HAL_RCC_OscConfig+0x4cc>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fadd 	bl	8000810 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125a:	f7ff fad9 	bl	8000810 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e06d      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126c:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001280:	d108      	bne.n	8001294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001282:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4921      	ldr	r1, [pc, #132]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a19      	ldr	r1, [r3, #32]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	430b      	orrs	r3, r1
 80012a6:	491b      	ldr	r1, [pc, #108]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_RCC_OscConfig+0x4cc>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7ff faad 	bl	8000810 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ba:	f7ff faa9 	bl	8000810 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e03d      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x46a>
 80012d8:	e035      	b.n	8001346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <HAL_RCC_OscConfig+0x4cc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fa96 	bl	8000810 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fa92 	bl	8000810 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e026      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x498>
 8001306:	e01e      	b.n	8001346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d107      	bne.n	8001320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e019      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
 8001314:	40021000 	.word	0x40021000
 8001318:	40007000 	.word	0x40007000
 800131c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <HAL_RCC_OscConfig+0x500>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	429a      	cmp	r2, r3
 8001332:	d106      	bne.n	8001342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0d0      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001368:	4b6a      	ldr	r3, [pc, #424]	@ (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d910      	bls.n	8001398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b67      	ldr	r3, [pc, #412]	@ (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0207 	bic.w	r2, r3, #7
 800137e:	4965      	ldr	r1, [pc, #404]	@ (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b63      	ldr	r3, [pc, #396]	@ (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0b8      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b0:	4b59      	ldr	r3, [pc, #356]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a58      	ldr	r2, [pc, #352]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c8:	4b53      	ldr	r3, [pc, #332]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a52      	ldr	r2, [pc, #328]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d4:	4b50      	ldr	r3, [pc, #320]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	494d      	ldr	r1, [pc, #308]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d040      	beq.n	8001474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d115      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e07f      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d109      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e073      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	4b3d      	ldr	r3, [pc, #244]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e06b      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f023 0203 	bic.w	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4936      	ldr	r1, [pc, #216]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001444:	f7ff f9e4 	bl	8000810 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144a:	e00a      	b.n	8001462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144c:	f7ff f9e0 	bl	8000810 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e053      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 020c 	and.w	r2, r3, #12
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	429a      	cmp	r2, r3
 8001472:	d1eb      	bne.n	800144c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d210      	bcs.n	80014a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 0207 	bic.w	r2, r3, #7
 800148a:	4922      	ldr	r1, [pc, #136]	@ (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e032      	b.n	800150a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4916      	ldr	r1, [pc, #88]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	490e      	ldr	r1, [pc, #56]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014e2:	f000 f82d 	bl	8001540 <HAL_RCC_GetSysClockFreq>
 80014e6:	4602      	mov	r2, r0
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	490a      	ldr	r1, [pc, #40]	@ (800151c <HAL_RCC_ClockConfig+0x1c8>)
 80014f4:	5ccb      	ldrb	r3, [r1, r3]
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <HAL_RCC_ClockConfig+0x1cc>)
 80014fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <HAL_RCC_ClockConfig+0x1d0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ff18 	bl	8000338 <HAL_InitTick>

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000
 8001518:	40021000 	.word	0x40021000
 800151c:	08005210 	.word	0x08005210
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <HAL_RCC_EnableCSS+0x14>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	4242004c 	.word	0x4242004c

08001540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b04      	cmp	r3, #4
 8001568:	d002      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x30>
 800156a:	2b08      	cmp	r3, #8
 800156c:	d003      	beq.n	8001576 <HAL_RCC_GetSysClockFreq+0x36>
 800156e:	e027      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001572:	613b      	str	r3, [r7, #16]
      break;
 8001574:	e027      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	0c9b      	lsrs	r3, r3, #18
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001580:	5cd3      	ldrb	r3, [r2, r3]
 8001582:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d010      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	0c5b      	lsrs	r3, r3, #17
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	4a11      	ldr	r2, [pc, #68]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015a2:	fb03 f202 	mul.w	r2, r3, r2
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e004      	b.n	80015ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a0c      	ldr	r2, [pc, #48]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	613b      	str	r3, [r7, #16]
      break;
 80015be:	e002      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015c2:	613b      	str	r3, [r7, #16]
      break;
 80015c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c6:	693b      	ldr	r3, [r7, #16]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	007a1200 	.word	0x007a1200
 80015dc:	08005228 	.word	0x08005228
 80015e0:	08005238 	.word	0x08005238
 80015e4:	003d0900 	.word	0x003d0900

080015e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015ec:	4b02      	ldr	r3, [pc, #8]	@ (80015f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000000 	.word	0x20000000

080015fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001600:	f7ff fff2 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 8001604:	4602      	mov	r2, r0
 8001606:	4b05      	ldr	r3, [pc, #20]	@ (800161c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	4903      	ldr	r1, [pc, #12]	@ (8001620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001612:	5ccb      	ldrb	r3, [r1, r3]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	08005220 	.word	0x08005220

08001624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001628:	f7ff ffde 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0adb      	lsrs	r3, r3, #11
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4903      	ldr	r1, [pc, #12]	@ (8001648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	08005220 	.word	0x08005220

0800164c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	220f      	movs	r2, #15
 800165a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0207 	and.w	r2, r3, #7
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_RCC_NMI_IRQHandler+0x20>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b8:	2b80      	cmp	r3, #128	@ 0x80
 80016ba:	d104      	bne.n	80016c6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80016bc:	f000 f828 	bl	8001710 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	701a      	strb	r2, [r3, #0]
  }
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	4002100a 	.word	0x4002100a

080016d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <RCC_Delay+0x34>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <RCC_Delay+0x38>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0a5b      	lsrs	r3, r3, #9
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016f0:	bf00      	nop
  }
  while (Delay --);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	60fa      	str	r2, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f9      	bne.n	80016f0 <RCC_Delay+0x1c>
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000000 	.word	0x20000000
 800170c:	10624dd3 	.word	0x10624dd3

08001710 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e041      	b.n	80017b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f839 	bl	80017ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3304      	adds	r3, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f000 f9b4 	bl	8001ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d001      	beq.n	80017e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e03a      	b.n	800185a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a18      	ldr	r2, [pc, #96]	@ (8001864 <HAL_TIM_Base_Start_IT+0x98>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00e      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800180e:	d009      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <HAL_TIM_Base_Start_IT+0x9c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a13      	ldr	r2, [pc, #76]	@ (800186c <HAL_TIM_Base_Start_IT+0xa0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d111      	bne.n	8001848 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d010      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001846:	e007      	b.n	8001858 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40012c00 	.word	0x40012c00
 8001868:	40000400 	.word	0x40000400
 800186c:	40000800 	.word	0x40000800

08001870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d122      	bne.n	80018cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b02      	cmp	r3, #2
 8001892:	d11b      	bne.n	80018cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0202 	mvn.w	r2, #2
 800189c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f8ed 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80018b8:	e005      	b.n	80018c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8e0 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8ef 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d122      	bne.n	8001920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d11b      	bne.n	8001920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0204 	mvn.w	r2, #4
 80018f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f8c3 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 800190c:	e005      	b.n	800191a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8b6 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f8c5 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b08      	cmp	r3, #8
 800192c:	d122      	bne.n	8001974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b08      	cmp	r3, #8
 800193a:	d11b      	bne.n	8001974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0208 	mvn.w	r2, #8
 8001944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2204      	movs	r2, #4
 800194a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f899 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 8001960:	e005      	b.n	800196e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f88c 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f89b 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b10      	cmp	r3, #16
 8001980:	d122      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b10      	cmp	r3, #16
 800198e:	d11b      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0210 	mvn.w	r2, #16
 8001998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2208      	movs	r2, #8
 800199e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f86f 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80019b4:	e005      	b.n	80019c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f862 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f871 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0201 	mvn.w	r2, #1
 80019ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fc52 	bl	8000298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019fe:	2b80      	cmp	r3, #128	@ 0x80
 8001a00:	d10e      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0c:	2b80      	cmp	r3, #128	@ 0x80
 8001a0e:	d107      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8bf 	bl	8001b9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2a:	2b40      	cmp	r3, #64	@ 0x40
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a38:	2b40      	cmp	r3, #64	@ 0x40
 8001a3a:	d107      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f835 	bl	8001ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d10e      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d107      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0220 	mvn.w	r2, #32
 8001a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f88a 	bl	8001b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a29      	ldr	r2, [pc, #164]	@ (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00b      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae6:	d007      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a26      	ldr	r2, [pc, #152]	@ (8001b84 <TIM_Base_SetConfig+0xbc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d003      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a25      	ldr	r2, [pc, #148]	@ (8001b88 <TIM_Base_SetConfig+0xc0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00b      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b18:	d007      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	@ (8001b84 <TIM_Base_SetConfig+0xbc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <TIM_Base_SetConfig+0xc0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d108      	bne.n	8001b3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d103      	bne.n	8001b70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	615a      	str	r2, [r3, #20]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800

08001b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e042      	b.n	8001c48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fcf4 	bl	80005c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2224      	movs	r2, #36	@ 0x24
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fd71 	bl	80026dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d16d      	bne.n	8001d4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_UART_Transmit+0x2c>
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e066      	b.n	8001d4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2221      	movs	r2, #33	@ 0x21
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c8e:	f7fe fdbf 	bl	8000810 <HAL_GetTick>
 8001c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca8:	d108      	bne.n	8001cbc <HAL_UART_Transmit+0x6c>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	e003      	b.n	8001cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cc4:	e02a      	b.n	8001d1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	@ 0x80
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 faf9 	bl	80022c8 <UART_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e036      	b.n	8001d4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10b      	bne.n	8001cfe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	e007      	b.n	8001d0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1cf      	bne.n	8001cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2140      	movs	r1, #64	@ 0x40
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fac9 	bl	80022c8 <UART_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e006      	b.n	8001d4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e000      	b.n	8001d4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001d4c:	2302      	movs	r3, #2
  }
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10f      	bne.n	8001dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_UART_IRQHandler+0x66>
 8001daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fbd1 	bl	800255e <UART_Receive_IT>
      return;
 8001dbc:	e25b      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80de 	beq.w	8001f84 <HAL_UART_IRQHandler+0x22c>
 8001dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80d1 	beq.w	8001f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_UART_IRQHandler+0xae>
 8001dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_UART_IRQHandler+0xd2>
 8001e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_UART_IRQHandler+0xf6>
 8001e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f043 0204 	orr.w	r2, r3, #4
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d011      	beq.n	8001e7e <HAL_UART_IRQHandler+0x126>
 8001e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f043 0208 	orr.w	r2, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 81f2 	beq.w	800226c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_UART_IRQHandler+0x14e>
 8001e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fb5c 	bl	800255e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x17a>
 8001eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d04f      	beq.n	8001f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fa66 	bl	80023a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d041      	beq.n	8001f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3314      	adds	r3, #20
 8001eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ef4:	e853 3f00 	ldrex	r3, [r3]
 8001ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3314      	adds	r3, #20
 8001f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f22:	e841 2300 	strex	r3, r2, [r1]
 8001f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1d9      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d013      	beq.n	8001f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002138 <HAL_UART_IRQHandler+0x3e0>)
 8001f40:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fd86 	bl	8000a58 <HAL_DMA_Abort_IT>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f60:	e00e      	b.n	8001f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f99c 	bl	80022a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	e00a      	b.n	8001f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f998 	bl	80022a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f70:	e006      	b.n	8001f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f994 	bl	80022a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001f7e:	e175      	b.n	800226c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f80:	bf00      	nop
    return;
 8001f82:	e173      	b.n	800226c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	f040 814f 	bne.w	800222c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8148 	beq.w	800222c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8141 	beq.w	800222c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80b6 	beq.w	800213c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8145 	beq.w	8002270 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	f080 813e 	bcs.w	8002270 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b20      	cmp	r3, #32
 8002004:	f000 8088 	beq.w	8002118 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	330c      	adds	r3, #12
 800200e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002016:	e853 3f00 	ldrex	r3, [r3]
 800201a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800201e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002026:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	330c      	adds	r3, #12
 8002030:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002034:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002038:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002040:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002044:	e841 2300 	strex	r3, r2, [r1]
 8002048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800204c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1d9      	bne.n	8002008 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3314      	adds	r3, #20
 800205a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800205e:	e853 3f00 	ldrex	r3, [r3]
 8002062:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3314      	adds	r3, #20
 8002074:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002078:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800207c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002080:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002084:	e841 2300 	strex	r3, r2, [r1]
 8002088:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800208a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e1      	bne.n	8002054 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3314      	adds	r3, #20
 8002096:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800209a:	e853 3f00 	ldrex	r3, [r3]
 800209e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80020a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3314      	adds	r3, #20
 80020b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80020b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80020ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020bc:	e841 2300 	strex	r3, r2, [r1]
 80020c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80020c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e3      	bne.n	8002090 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	330c      	adds	r3, #12
 80020dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020e0:	e853 3f00 	ldrex	r3, [r3]
 80020e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80020e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020e8:	f023 0310 	bic.w	r3, r3, #16
 80020ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	330c      	adds	r3, #12
 80020f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80020fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002102:	e841 2300 	strex	r3, r2, [r1]
 8002106:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e3      	bne.n	80020d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fc65 	bl	80009e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002126:	b29b      	uxth	r3, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b29b      	uxth	r3, r3
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8bf 	bl	80022b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002134:	e09c      	b.n	8002270 <HAL_UART_IRQHandler+0x518>
 8002136:	bf00      	nop
 8002138:	08002469 	.word	0x08002469
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002144:	b29b      	uxth	r3, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 808e 	beq.w	8002274 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8089 	beq.w	8002274 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	330c      	adds	r3, #12
 8002168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800216c:	e853 3f00 	ldrex	r3, [r3]
 8002170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002186:	647a      	str	r2, [r7, #68]	@ 0x44
 8002188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800218c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800218e:	e841 2300 	strex	r3, r2, [r1]
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1e3      	bne.n	8002162 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3314      	adds	r3, #20
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	e853 3f00 	ldrex	r3, [r3]
 80021a8:	623b      	str	r3, [r7, #32]
   return(result);
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3314      	adds	r3, #20
 80021ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80021be:	633a      	str	r2, [r7, #48]	@ 0x30
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021c6:	e841 2300 	strex	r3, r2, [r1]
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80021cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1e3      	bne.n	800219a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	330c      	adds	r3, #12
 80021e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	e853 3f00 	ldrex	r3, [r3]
 80021ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0310 	bic.w	r3, r3, #16
 80021f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	330c      	adds	r3, #12
 8002200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002204:	61fa      	str	r2, [r7, #28]
 8002206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002208:	69b9      	ldr	r1, [r7, #24]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	617b      	str	r3, [r7, #20]
   return(result);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e3      	bne.n	80021e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800221e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f844 	bl	80022b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800222a:	e023      	b.n	8002274 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800222c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <HAL_UART_IRQHandler+0x4f4>
 8002238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800223c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f923 	bl	8002490 <UART_Transmit_IT>
    return;
 800224a:	e014      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800224c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <HAL_UART_IRQHandler+0x51e>
 8002258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800225c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f962 	bl	800252e <UART_EndTransmit_IT>
    return;
 800226a:	e004      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
    return;
 800226c:	bf00      	nop
 800226e:	e002      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
      return;
 8002270:	bf00      	nop
 8002272:	e000      	b.n	8002276 <HAL_UART_IRQHandler+0x51e>
      return;
 8002274:	bf00      	nop
  }
}
 8002276:	37e8      	adds	r7, #232	@ 0xe8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b090      	sub	sp, #64	@ 0x40
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d8:	e050      	b.n	800237c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d04c      	beq.n	800237c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80022e8:	f7fe fa92 	bl	8000810 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d241      	bcs.n	800237c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	330c      	adds	r3, #12
 80022fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002302:	e853 3f00 	ldrex	r3, [r3]
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002318:	637a      	str	r2, [r7, #52]	@ 0x34
 800231a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800231e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002320:	e841 2300 	strex	r3, r2, [r1]
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e5      	bne.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3314      	adds	r3, #20
 8002332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	e853 3f00 	ldrex	r3, [r3]
 800233a:	613b      	str	r3, [r7, #16]
   return(result);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3314      	adds	r3, #20
 800234a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800234c:	623a      	str	r2, [r7, #32]
 800234e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002350:	69f9      	ldr	r1, [r7, #28]
 8002352:	6a3a      	ldr	r2, [r7, #32]
 8002354:	e841 2300 	strex	r3, r2, [r1]
 8002358:	61bb      	str	r3, [r7, #24]
   return(result);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e5      	bne.n	800232c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e00f      	b.n	800239c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4013      	ands	r3, r2
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	429a      	cmp	r2, r3
 8002398:	d09f      	beq.n	80022da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3740      	adds	r7, #64	@ 0x40
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b095      	sub	sp, #84	@ 0x54
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	330c      	adds	r3, #12
 80023b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b6:	e853 3f00 	ldrex	r3, [r3]
 80023ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80023ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023d4:	e841 2300 	strex	r3, r2, [r1]
 80023d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e5      	bne.n	80023ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3314      	adds	r3, #20
 80023e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	e853 3f00 	ldrex	r3, [r3]
 80023ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3314      	adds	r3, #20
 80023fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002408:	e841 2300 	strex	r3, r2, [r1]
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e5      	bne.n	80023e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	2b01      	cmp	r3, #1
 800241a:	d119      	bne.n	8002450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	330c      	adds	r3, #12
 8002422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	e853 3f00 	ldrex	r3, [r3]
 800242a:	60bb      	str	r3, [r7, #8]
   return(result);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f023 0310 	bic.w	r3, r3, #16
 8002432:	647b      	str	r3, [r7, #68]	@ 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	330c      	adds	r3, #12
 800243a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800243c:	61ba      	str	r2, [r7, #24]
 800243e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002440:	6979      	ldr	r1, [r7, #20]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	e841 2300 	strex	r3, r2, [r1]
 8002448:	613b      	str	r3, [r7, #16]
   return(result);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e5      	bne.n	800241c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800245e:	bf00      	nop
 8002460:	3754      	adds	r7, #84	@ 0x54
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f7ff ff0c 	bl	80022a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b21      	cmp	r3, #33	@ 0x21
 80024a2:	d13e      	bne.n	8002522 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ac:	d114      	bne.n	80024d8 <UART_Transmit_IT+0x48>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d110      	bne.n	80024d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	1c9a      	adds	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	621a      	str	r2, [r3, #32]
 80024d6:	e008      	b.n	80024ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	1c59      	adds	r1, r3, #1
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6211      	str	r1, [r2, #32]
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4619      	mov	r1, r3
 80024f8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800250c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800251c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
  }
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff fe94 	bl	800227c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b08c      	sub	sp, #48	@ 0x30
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b22      	cmp	r3, #34	@ 0x22
 8002570:	f040 80ae 	bne.w	80026d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257c:	d117      	bne.n	80025ae <UART_Receive_IT+0x50>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d113      	bne.n	80025ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259c:	b29a      	uxth	r2, r3
 800259e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	1c9a      	adds	r2, r3, #2
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80025ac:	e026      	b.n	80025fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c0:	d007      	beq.n	80025d2 <UART_Receive_IT+0x74>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <UART_Receive_IT+0x82>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e008      	b.n	80025f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29b      	uxth	r3, r3
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4619      	mov	r1, r3
 800260a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800260c:	2b00      	cmp	r3, #0
 800260e:	d15d      	bne.n	80026cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0220 	bic.w	r2, r2, #32
 800261e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800262e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	2b01      	cmp	r3, #1
 8002654:	d135      	bne.n	80026c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	e853 3f00 	ldrex	r3, [r3]
 800266a:	613b      	str	r3, [r7, #16]
   return(result);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f023 0310 	bic.w	r3, r3, #16
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267c:	623a      	str	r2, [r7, #32]
 800267e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002680:	69f9      	ldr	r1, [r7, #28]
 8002682:	6a3a      	ldr	r2, [r7, #32]
 8002684:	e841 2300 	strex	r3, r2, [r1]
 8002688:	61bb      	str	r3, [r7, #24]
   return(result);
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e5      	bne.n	800265c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d10a      	bne.n	80026b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fdf9 	bl	80022b2 <HAL_UARTEx_RxEventCallback>
 80026c0:	e002      	b.n	80026c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fde3 	bl	800228e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e002      	b.n	80026d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3730      	adds	r7, #48	@ 0x30
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002716:	f023 030c 	bic.w	r3, r3, #12
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	430b      	orrs	r3, r1
 8002722:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2c      	ldr	r2, [pc, #176]	@ (80027f0 <UART_SetConfig+0x114>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d103      	bne.n	800274c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002744:	f7fe ff6e 	bl	8001624 <HAL_RCC_GetPCLK2Freq>
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	e002      	b.n	8002752 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800274c:	f7fe ff56 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8002750:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	4a22      	ldr	r2, [pc, #136]	@ (80027f4 <UART_SetConfig+0x118>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	0119      	lsls	r1, r3, #4
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009a      	lsls	r2, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fbb2 f2f3 	udiv	r2, r2, r3
 8002788:	4b1a      	ldr	r3, [pc, #104]	@ (80027f4 <UART_SetConfig+0x118>)
 800278a:	fba3 0302 	umull	r0, r3, r3, r2
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2064      	movs	r0, #100	@ 0x64
 8002792:	fb00 f303 	mul.w	r3, r0, r3
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	3332      	adds	r3, #50	@ 0x32
 800279c:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <UART_SetConfig+0x118>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a8:	4419      	add	r1, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009a      	lsls	r2, r3, #2
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c0:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <UART_SetConfig+0x118>)
 80027c2:	fba3 0302 	umull	r0, r3, r3, r2
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2064      	movs	r0, #100	@ 0x64
 80027ca:	fb00 f303 	mul.w	r3, r0, r3
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	3332      	adds	r3, #50	@ 0x32
 80027d4:	4a07      	ldr	r2, [pc, #28]	@ (80027f4 <UART_SetConfig+0x118>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	440a      	add	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40013800 	.word	0x40013800
 80027f4:	51eb851f 	.word	0x51eb851f

080027f8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027fe:	f3ef 8305 	mrs	r3, IPSR
 8002802:	60bb      	str	r3, [r7, #8]
  return(result);
 8002804:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280a:	f3ef 8310 	mrs	r3, PRIMASK
 800280e:	607b      	str	r3, [r7, #4]
  return(result);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <osKernelInitialize+0x32>
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <osKernelInitialize+0x60>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d109      	bne.n	8002832 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800281e:	f3ef 8311 	mrs	r3, BASEPRI
 8002822:	603b      	str	r3, [r7, #0]
  return(result);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800282a:	f06f 0305 	mvn.w	r3, #5
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e00c      	b.n	800284c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002832:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <osKernelInitialize+0x60>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <osKernelInitialize+0x60>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e002      	b.n	800284c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800284c:	68fb      	ldr	r3, [r7, #12]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	20000154 	.word	0x20000154

0800285c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002862:	f3ef 8305 	mrs	r3, IPSR
 8002866:	60bb      	str	r3, [r7, #8]
  return(result);
 8002868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800286e:	f3ef 8310 	mrs	r3, PRIMASK
 8002872:	607b      	str	r3, [r7, #4]
  return(result);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <osKernelStart+0x32>
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <osKernelStart+0x64>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d109      	bne.n	8002896 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002882:	f3ef 8311 	mrs	r3, BASEPRI
 8002886:	603b      	str	r3, [r7, #0]
  return(result);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <osKernelStart+0x3a>
    stat = osErrorISR;
 800288e:	f06f 0305 	mvn.w	r3, #5
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e00e      	b.n	80028b4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <osKernelStart+0x64>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800289e:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <osKernelStart+0x64>)
 80028a0:	2202      	movs	r2, #2
 80028a2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80028a4:	f001 f84e 	bl	8003944 <vTaskStartScheduler>
      stat = osOK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e002      	b.n	80028b4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80028b4:	68fb      	ldr	r3, [r7, #12]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000154 	.word	0x20000154

080028c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b092      	sub	sp, #72	@ 0x48
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028d4:	f3ef 8305 	mrs	r3, IPSR
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 8094 	bne.w	8002a0a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e2:	f3ef 8310 	mrs	r3, PRIMASK
 80028e6:	623b      	str	r3, [r7, #32]
  return(result);
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 808d 	bne.w	8002a0a <osThreadNew+0x146>
 80028f0:	4b48      	ldr	r3, [pc, #288]	@ (8002a14 <osThreadNew+0x150>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d106      	bne.n	8002906 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028f8:	f3ef 8311 	mrs	r3, BASEPRI
 80028fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 8082 	bne.w	8002a0a <osThreadNew+0x146>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d07e      	beq.n	8002a0a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002910:	2318      	movs	r3, #24
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002914:	2300      	movs	r3, #0
 8002916:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002918:	f107 031b 	add.w	r3, r7, #27
 800291c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d045      	beq.n	80029b6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <osThreadNew+0x74>
        name = attr->name;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <osThreadNew+0x9a>
 800294c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294e:	2b38      	cmp	r3, #56	@ 0x38
 8002950:	d805      	bhi.n	800295e <osThreadNew+0x9a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <osThreadNew+0x9e>
        return (NULL);
 800295e:	2300      	movs	r3, #0
 8002960:	e054      	b.n	8002a0c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00e      	beq.n	8002998 <osThreadNew+0xd4>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b5b      	cmp	r3, #91	@ 0x5b
 8002980:	d90a      	bls.n	8002998 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <osThreadNew+0xd4>
        mem = 1;
 8002992:	2301      	movs	r3, #1
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002996:	e010      	b.n	80029ba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10c      	bne.n	80029ba <osThreadNew+0xf6>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <osThreadNew+0xf6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d104      	bne.n	80029ba <osThreadNew+0xf6>
          mem = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b4:	e001      	b.n	80029ba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d110      	bne.n	80029e2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029c8:	9202      	str	r2, [sp, #8]
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fdf2 	bl	80035c0 <xTaskCreateStatic>
 80029dc:	4603      	mov	r3, r0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e013      	b.n	8002a0a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d110      	bne.n	8002a0a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fe3f 	bl	800367e <xTaskCreate>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <osThreadNew+0x146>
          hTask = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a0a:	697b      	ldr	r3, [r7, #20]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3738      	adds	r7, #56	@ 0x38
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000154 	.word	0x20000154

08002a18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a20:	f3ef 8305 	mrs	r3, IPSR
 8002a24:	613b      	str	r3, [r7, #16]
  return(result);
 8002a26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a30:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d109      	bne.n	8002a4c <osDelay+0x34>
 8002a38:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <osDelay+0x58>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d109      	bne.n	8002a54 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a40:	f3ef 8311 	mrs	r3, BASEPRI
 8002a44:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <osDelay+0x3c>
    stat = osErrorISR;
 8002a4c:	f06f 0305 	mvn.w	r3, #5
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e007      	b.n	8002a64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 ff3a 	bl	80038d8 <vTaskDelay>
    }
  }

  return (stat);
 8002a64:	697b      	ldr	r3, [r7, #20]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000154 	.word	0x20000154

08002a74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a06      	ldr	r2, [pc, #24]	@ (8002a9c <vApplicationGetIdleTaskMemory+0x28>)
 8002a84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2280      	movs	r2, #128	@ 0x80
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000158 	.word	0x20000158
 8002aa0:	200001b4 	.word	0x200001b4

08002aa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a07      	ldr	r2, [pc, #28]	@ (8002ad0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ab4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4a06      	ldr	r2, [pc, #24]	@ (8002ad4 <vApplicationGetTimerTaskMemory+0x30>)
 8002aba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	200003b4 	.word	0x200003b4
 8002ad4:	20000410 	.word	0x20000410

08002ad8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f103 0208 	add.w	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
 8002af0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f103 0208 	add.w	r2, r3, #8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f103 0208 	add.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d103      	bne.n	8002b94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e00c      	b.n	8002bae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3308      	adds	r3, #8
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	e002      	b.n	8002ba2 <vListInsert+0x2e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d2f6      	bcs.n	8002b9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6852      	ldr	r2, [r2, #4]
 8002c04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d103      	bne.n	8002c18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1e5a      	subs	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10b      	bne.n	8002c62 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	e7fd      	b.n	8002c5e <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c62:	f001 ff83 	bl	8004b6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6e:	68f9      	ldr	r1, [r7, #12]
 8002c70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	441a      	add	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	3b01      	subs	r3, #1
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	441a      	add	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22ff      	movs	r2, #255	@ 0xff
 8002ca6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	22ff      	movs	r2, #255	@ 0xff
 8002cae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00f      	beq.n	8002ce0 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3310      	adds	r3, #16
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 f89d 	bl	8003e04 <xTaskRemoveFromEventList>
 8002cca:	e009      	b.n	8002ce0 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3310      	adds	r3, #16
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff01 	bl	8002ad8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3324      	adds	r3, #36	@ 0x24
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fefc 	bl	8002ad8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ce0:	f001 ff74 	bl	8004bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ce4:	2301      	movs	r3, #1
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b08e      	sub	sp, #56	@ 0x38
 8002cf2:	af02      	add	r7, sp, #8
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	e7fd      	b.n	8002d16 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <xQueueGenericCreateStatic+0x56>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <xQueueGenericCreateStatic+0x5a>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <xQueueGenericCreateStatic+0x5c>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	623b      	str	r3, [r7, #32]
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <xQueueGenericCreateStatic+0x84>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <xQueueGenericCreateStatic+0x88>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <xQueueGenericCreateStatic+0x8a>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	61fb      	str	r3, [r7, #28]
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d94:	2350      	movs	r3, #80	@ 0x50
 8002d96:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b50      	cmp	r3, #80	@ 0x50
 8002d9c:	d00b      	beq.n	8002db6 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	61bb      	str	r3, [r7, #24]
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dc8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f805 	bl	8002de6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3730      	adds	r7, #48	@ 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e002      	b.n	8002e08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e14:	2101      	movs	r1, #1
 8002e16:	69b8      	ldr	r0, [r7, #24]
 8002e18:	f7ff ff0d 	bl	8002c36 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08e      	sub	sp, #56	@ 0x38
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <xQueueGenericSend+0x34>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <xQueueGenericSend+0x42>
 8002e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <xQueueGenericSend+0x46>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <xQueueGenericSend+0x48>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <xQueueGenericSend+0x64>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d103      	bne.n	8002e9e <xQueueGenericSend+0x72>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <xQueueGenericSend+0x76>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <xQueueGenericSend+0x78>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <xQueueGenericSend+0x94>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	623b      	str	r3, [r7, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ec0:	f001 f95e 	bl	8004180 <xTaskGetSchedulerState>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <xQueueGenericSend+0xa4>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <xQueueGenericSend+0xa8>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <xQueueGenericSend+0xaa>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	61fb      	str	r3, [r7, #28]
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	e7fd      	b.n	8002eee <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ef2:	f001 fe3b 	bl	8004b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <xQueueGenericSend+0xdc>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d112      	bne.n	8002f2e <xQueueGenericSend+0x102>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0e:	f000 f9eb 	bl	80032e8 <prvCopyDataToQueue>
 8002f12:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1e:	3324      	adds	r3, #36	@ 0x24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 ff6f 	bl	8003e04 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f26:	f001 fe51 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e062      	b.n	8002ff4 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f34:	f001 fe4a 	bl	8004bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e05b      	b.n	8002ff4 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 ffc0 	bl	8003ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f50:	f001 fe3c 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f54:	f000 fd5e 	bl	8003a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f58:	f001 fe08 	bl	8004b6c <vPortEnterCritical>
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d103      	bne.n	8002f72 <xQueueGenericSend+0x146>
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d103      	bne.n	8002f88 <xQueueGenericSend+0x15c>
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f88:	f001 fe20 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f8c:	1d3a      	adds	r2, r7, #4
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 ffaf 	bl	8003ef8 <xTaskCheckForTimeOut>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d123      	bne.n	8002fe8 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fa2:	f000 fa99 	bl	80034d8 <prvIsQueueFull>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d017      	beq.n	8002fdc <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fae:	3310      	adds	r3, #16
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fed3 	bl	8003d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fbc:	f000 fa24 	bl	8003408 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fc0:	f000 fd36 	bl	8003a30 <xTaskResumeAll>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d193      	bne.n	8002ef2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002fca:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <xQueueGenericSend+0x1d0>)
 8002fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	e78a      	b.n	8002ef2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fde:	f000 fa13 	bl	8003408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fe2:	f000 fd25 	bl	8003a30 <xTaskResumeAll>
 8002fe6:	e784      	b.n	8002ef2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fea:	f000 fa0d 	bl	8003408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fee:	f000 fd1f 	bl	8003a30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ff2:	2300      	movs	r3, #0
		}
	}
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3738      	adds	r7, #56	@ 0x38
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08e      	sub	sp, #56	@ 0x38
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <xQueueGenericSendFromISR+0x3e>
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <xQueueGenericSendFromISR+0x42>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <xQueueGenericSendFromISR+0x44>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	623b      	str	r3, [r7, #32]
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d103      	bne.n	800306e <xQueueGenericSendFromISR+0x6e>
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <xQueueGenericSendFromISR+0x72>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <xQueueGenericSendFromISR+0x74>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	61fb      	str	r3, [r7, #28]
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003090:	f001 fe2e 	bl	8004cf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003094:	f3ef 8211 	mrs	r2, BASEPRI
 8003098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	61ba      	str	r2, [r7, #24]
 80030aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d302      	bcc.n	80030c2 <xQueueGenericSendFromISR+0xc2>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d12c      	bne.n	800311c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030d2:	f000 f909 	bl	80032e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d112      	bne.n	8003106 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	3324      	adds	r3, #36	@ 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fe89 	bl	8003e04 <xTaskRemoveFromEventList>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00e      	beq.n	8003116 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e007      	b.n	8003116 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003106:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800310a:	3301      	adds	r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	b25a      	sxtb	r2, r3
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003116:	2301      	movs	r3, #1
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800311a:	e001      	b.n	8003120 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800311c:	2300      	movs	r3, #0
 800311e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003122:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800312a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800312c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800312e:	4618      	mov	r0, r3
 8003130:	3738      	adds	r7, #56	@ 0x38
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08c      	sub	sp, #48	@ 0x30
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <xQueueReceive+0x32>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	623b      	str	r3, [r7, #32]
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	e7fd      	b.n	8003166 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d103      	bne.n	8003178 <xQueueReceive+0x40>
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <xQueueReceive+0x44>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <xQueueReceive+0x46>
 800317c:	2300      	movs	r3, #0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <xQueueReceive+0x62>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	61fb      	str	r3, [r7, #28]
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800319a:	f000 fff1 	bl	8004180 <xTaskGetSchedulerState>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <xQueueReceive+0x72>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <xQueueReceive+0x76>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <xQueueReceive+0x78>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <xQueueReceive+0x94>
	__asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	61bb      	str	r3, [r7, #24]
}
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80031cc:	f001 fcce 	bl	8004b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031e0:	f000 f8ec 	bl	80033bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f6:	3310      	adds	r3, #16
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fe03 	bl	8003e04 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031fe:	f001 fce5 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 8003202:	2301      	movs	r3, #1
 8003204:	e069      	b.n	80032da <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800320c:	f001 fcde 	bl	8004bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003210:	2300      	movs	r3, #0
 8003212:	e062      	b.n	80032da <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fe54 	bl	8003ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003228:	f001 fcd0 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800322c:	f000 fbf2 	bl	8003a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003230:	f001 fc9c 	bl	8004b6c <vPortEnterCritical>
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800323a:	b25b      	sxtb	r3, r3
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d103      	bne.n	800324a <xQueueReceive+0x112>
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003250:	b25b      	sxtb	r3, r3
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d103      	bne.n	8003260 <xQueueReceive+0x128>
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003260:	f001 fcb4 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003264:	1d3a      	adds	r2, r7, #4
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fe43 	bl	8003ef8 <xTaskCheckForTimeOut>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d123      	bne.n	80032c0 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800327a:	f000 f917 	bl	80034ac <prvIsQueueEmpty>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d017      	beq.n	80032b4 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003286:	3324      	adds	r3, #36	@ 0x24
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd67 	bl	8003d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003294:	f000 f8b8 	bl	8003408 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003298:	f000 fbca 	bl	8003a30 <xTaskResumeAll>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d194      	bne.n	80031cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80032a2:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <xQueueReceive+0x1ac>)
 80032a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	e78b      	b.n	80031cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032b6:	f000 f8a7 	bl	8003408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ba:	f000 fbb9 	bl	8003a30 <xTaskResumeAll>
 80032be:	e785      	b.n	80031cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032c2:	f000 f8a1 	bl	8003408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032c6:	f000 fbb3 	bl	8003a30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032cc:	f000 f8ee 	bl	80034ac <prvIsQueueEmpty>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f43f af7a 	beq.w	80031cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3730      	adds	r7, #48	@ 0x30
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10d      	bne.n	8003322 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d14d      	bne.n	80033aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 ff52 	bl	80041bc <xTaskPriorityDisinherit>
 8003318:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	e043      	b.n	80033aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d119      	bne.n	800335c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6898      	ldr	r0, [r3, #8]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	461a      	mov	r2, r3
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	f001 ff26 	bl	8005184 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	441a      	add	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d32b      	bcc.n	80033aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	e026      	b.n	80033aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68d8      	ldr	r0, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	461a      	mov	r2, r3
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	f001 ff0c 	bl	8005184 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	425b      	negs	r3, r3
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d207      	bcs.n	8003398 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	425b      	negs	r3, r3
 8003392:	441a      	add	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d105      	bne.n	80033aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80033b2:	697b      	ldr	r3, [r7, #20]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d018      	beq.n	8003400 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	441a      	add	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d303      	bcc.n	80033f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68d9      	ldr	r1, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	461a      	mov	r2, r3
 80033fa:	6838      	ldr	r0, [r7, #0]
 80033fc:	f001 fec2 	bl	8005184 <memcpy>
	}
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003410:	f001 fbac 	bl	8004b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800341a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800341c:	e011      	b.n	8003442 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3324      	adds	r3, #36	@ 0x24
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fcea 	bl	8003e04 <xTaskRemoveFromEventList>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003436:	f000 fdc3 	bl	8003fc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3b01      	subs	r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	dce9      	bgt.n	800341e <prvUnlockQueue+0x16>
 800344a:	e000      	b.n	800344e <prvUnlockQueue+0x46>
					break;
 800344c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	22ff      	movs	r2, #255	@ 0xff
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003456:	f001 fbb9 	bl	8004bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800345a:	f001 fb87 	bl	8004b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003464:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003466:	e011      	b.n	800348c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d012      	beq.n	8003496 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3310      	adds	r3, #16
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fcc5 	bl	8003e04 <xTaskRemoveFromEventList>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003480:	f000 fd9e 	bl	8003fc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	3b01      	subs	r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800348c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003490:	2b00      	cmp	r3, #0
 8003492:	dce9      	bgt.n	8003468 <prvUnlockQueue+0x60>
 8003494:	e000      	b.n	8003498 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003496:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	22ff      	movs	r2, #255	@ 0xff
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034a0:	f001 fb94 	bl	8004bcc <vPortExitCritical>
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b4:	f001 fb5a 	bl	8004b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e001      	b.n	80034ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ca:	f001 fb7f 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 80034ce:	68fb      	ldr	r3, [r7, #12]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034e0:	f001 fb44 	bl	8004b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d102      	bne.n	80034f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e001      	b.n	80034fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034fa:	f001 fb67 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e014      	b.n	8003542 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003518:	4a0e      	ldr	r2, [pc, #56]	@ (8003554 <vQueueAddToRegistry+0x4c>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003524:	490b      	ldr	r1, [pc, #44]	@ (8003554 <vQueueAddToRegistry+0x4c>)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800352e:	4a09      	ldr	r2, [pc, #36]	@ (8003554 <vQueueAddToRegistry+0x4c>)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800353a:	e006      	b.n	800354a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b07      	cmp	r3, #7
 8003546:	d9e7      	bls.n	8003518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	20000810 	.word	0x20000810

08003558 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003568:	f001 fb00 	bl	8004b6c <vPortEnterCritical>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003572:	b25b      	sxtb	r3, r3
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d103      	bne.n	8003582 <vQueueWaitForMessageRestricted+0x2a>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003588:	b25b      	sxtb	r3, r3
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d103      	bne.n	8003598 <vQueueWaitForMessageRestricted+0x40>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003598:	f001 fb18 	bl	8004bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3324      	adds	r3, #36	@ 0x24
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fbfd 	bl	8003dac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	f7ff ff28 	bl	8003408 <prvUnlockQueue>
	}
 80035b8:	bf00      	nop
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08e      	sub	sp, #56	@ 0x38
 80035c4:	af04      	add	r7, sp, #16
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	623b      	str	r3, [r7, #32]
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <xTaskCreateStatic+0x4a>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	61fb      	str	r3, [r7, #28]
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800360a:	235c      	movs	r3, #92	@ 0x5c
 800360c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b5c      	cmp	r3, #92	@ 0x5c
 8003612:	d00b      	beq.n	800362c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	61bb      	str	r3, [r7, #24]
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800362c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01e      	beq.n	8003670 <xTaskCreateStatic+0xb0>
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01b      	beq.n	8003670 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	2202      	movs	r2, #2
 8003646:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800364a:	2300      	movs	r3, #0
 800364c:	9303      	str	r3, [sp, #12]
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	9302      	str	r3, [sp, #8]
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f850 	bl	8003708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003668:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800366a:	f000 f8d5 	bl	8003818 <prvAddNewTaskToReadyList>
 800366e:	e001      	b.n	8003674 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003674:	697b      	ldr	r3, [r7, #20]
	}
 8003676:	4618      	mov	r0, r3
 8003678:	3728      	adds	r7, #40	@ 0x28
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800367e:	b580      	push	{r7, lr}
 8003680:	b08c      	sub	sp, #48	@ 0x30
 8003682:	af04      	add	r7, sp, #16
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fb6c 	bl	8004d70 <pvPortMalloc>
 8003698:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036a0:	205c      	movs	r0, #92	@ 0x5c
 80036a2:	f001 fb65 	bl	8004d70 <pvPortMalloc>
 80036a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80036b4:	e005      	b.n	80036c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f001 fc22 	bl	8004f00 <vPortFree>
 80036bc:	e001      	b.n	80036c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	2300      	movs	r3, #0
 80036d4:	9303      	str	r3, [sp, #12]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	9302      	str	r3, [sp, #8]
 80036da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f80e 	bl	8003708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036ec:	69f8      	ldr	r0, [r7, #28]
 80036ee:	f000 f893 	bl	8003818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036f2:	2301      	movs	r3, #1
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e002      	b.n	80036fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
 80036fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	461a      	mov	r2, r3
 8003720:	21a5      	movs	r1, #165	@ 0xa5
 8003722:	f001 fd03 	bl	800512c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003730:	3b01      	subs	r3, #1
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f023 0307 	bic.w	r3, r3, #7
 800373e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	617b      	str	r3, [r7, #20]
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	e7fd      	b.n	800375e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e012      	b.n	800378e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	7819      	ldrb	r1, [r3, #0]
 8003770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	3334      	adds	r3, #52	@ 0x34
 8003778:	460a      	mov	r2, r1
 800377a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3301      	adds	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d9e9      	bls.n	8003768 <prvInitialiseNewTask+0x60>
 8003794:	e000      	b.n	8003798 <prvInitialiseNewTask+0x90>
		{
			break;
 8003796:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	2b37      	cmp	r3, #55	@ 0x37
 80037a4:	d901      	bls.n	80037aa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037a6:	2337      	movs	r3, #55	@ 0x37
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	2200      	movs	r2, #0
 80037ba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	3304      	adds	r3, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff f9a8 	bl	8002b16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	3318      	adds	r3, #24
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff f9a3 	bl	8002b16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	2200      	movs	r2, #0
 80037ea:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	69b8      	ldr	r0, [r7, #24]
 80037fa:	f001 f8c3 	bl	8004984 <pxPortInitialiseStack>
 80037fe:	4602      	mov	r2, r0
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800380e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003810:	bf00      	nop
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003820:	f001 f9a4 	bl	8004b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003824:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <prvAddNewTaskToReadyList+0xa8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	4a25      	ldr	r2, [pc, #148]	@ (80038c0 <prvAddNewTaskToReadyList+0xa8>)
 800382c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800382e:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <prvAddNewTaskToReadyList+0xac>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003836:	4a23      	ldr	r2, [pc, #140]	@ (80038c4 <prvAddNewTaskToReadyList+0xac>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800383c:	4b20      	ldr	r3, [pc, #128]	@ (80038c0 <prvAddNewTaskToReadyList+0xa8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d110      	bne.n	8003866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003844:	f000 fbda 	bl	8003ffc <prvInitialiseTaskLists>
 8003848:	e00d      	b.n	8003866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800384a:	4b1f      	ldr	r3, [pc, #124]	@ (80038c8 <prvAddNewTaskToReadyList+0xb0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003852:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <prvAddNewTaskToReadyList+0xac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d802      	bhi.n	8003866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003860:	4a18      	ldr	r2, [pc, #96]	@ (80038c4 <prvAddNewTaskToReadyList+0xac>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003866:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <prvAddNewTaskToReadyList+0xb4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3301      	adds	r3, #1
 800386c:	4a17      	ldr	r2, [pc, #92]	@ (80038cc <prvAddNewTaskToReadyList+0xb4>)
 800386e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <prvAddNewTaskToReadyList+0xb4>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800387c:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <prvAddNewTaskToReadyList+0xb8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d903      	bls.n	800388c <prvAddNewTaskToReadyList+0x74>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <prvAddNewTaskToReadyList+0xb8>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4a0e      	ldr	r2, [pc, #56]	@ (80038d4 <prvAddNewTaskToReadyList+0xbc>)
 800389a:	441a      	add	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f7ff f943 	bl	8002b2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038a8:	f001 f990 	bl	8004bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <prvAddNewTaskToReadyList+0xb0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <prvAddNewTaskToReadyList+0xac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000d24 	.word	0x20000d24
 80038c4:	20000850 	.word	0x20000850
 80038c8:	20000d30 	.word	0x20000d30
 80038cc:	20000d40 	.word	0x20000d40
 80038d0:	20000d2c 	.word	0x20000d2c
 80038d4:	20000854 	.word	0x20000854

080038d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038ea:	4b14      	ldr	r3, [pc, #80]	@ (800393c <vTaskDelay+0x64>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <vTaskDelay+0x32>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	60bb      	str	r3, [r7, #8]
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	e7fd      	b.n	8003906 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800390a:	f000 f883 	bl	8003a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800390e:	2100      	movs	r1, #0
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fcc3 	bl	800429c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003916:	f000 f88b 	bl	8003a30 <xTaskResumeAll>
 800391a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d107      	bne.n	8003932 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <vTaskDelay+0x68>)
 8003924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000d4c 	.word	0x20000d4c
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	@ 0x28
 8003948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003952:	463a      	mov	r2, r7
 8003954:	1d39      	adds	r1, r7, #4
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f88a 	bl	8002a74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003960:	6839      	ldr	r1, [r7, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	9202      	str	r2, [sp, #8]
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	2300      	movs	r3, #0
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	2300      	movs	r3, #0
 8003970:	460a      	mov	r2, r1
 8003972:	4922      	ldr	r1, [pc, #136]	@ (80039fc <vTaskStartScheduler+0xb8>)
 8003974:	4822      	ldr	r0, [pc, #136]	@ (8003a00 <vTaskStartScheduler+0xbc>)
 8003976:	f7ff fe23 	bl	80035c0 <xTaskCreateStatic>
 800397a:	4603      	mov	r3, r0
 800397c:	4a21      	ldr	r2, [pc, #132]	@ (8003a04 <vTaskStartScheduler+0xc0>)
 800397e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003980:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <vTaskStartScheduler+0xc0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e001      	b.n	8003992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d102      	bne.n	800399e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003998:	f000 fcd4 	bl	8004344 <xTimerCreateTimerTask>
 800399c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d116      	bne.n	80039d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	613b      	str	r3, [r7, #16]
}
 80039b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039b8:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <vTaskStartScheduler+0xc4>)
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295
 80039be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <vTaskStartScheduler+0xc8>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <vTaskStartScheduler+0xcc>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039cc:	f001 f85c 	bl	8004a88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039d0:	e00f      	b.n	80039f2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d10b      	bne.n	80039f2 <vTaskStartScheduler+0xae>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	60fb      	str	r3, [r7, #12]
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	e7fd      	b.n	80039ee <vTaskStartScheduler+0xaa>
}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	080051d4 	.word	0x080051d4
 8003a00:	08003fd9 	.word	0x08003fd9
 8003a04:	20000d48 	.word	0x20000d48
 8003a08:	20000d44 	.word	0x20000d44
 8003a0c:	20000d30 	.word	0x20000d30
 8003a10:	20000d28 	.word	0x20000d28

08003a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <vTaskSuspendAll+0x18>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a03      	ldr	r2, [pc, #12]	@ (8003a2c <vTaskSuspendAll+0x18>)
 8003a20:	6013      	str	r3, [r2, #0]
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000d4c 	.word	0x20000d4c

08003a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b30 <xTaskResumeAll+0x100>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10b      	bne.n	8003a5e <xTaskResumeAll+0x2e>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	603b      	str	r3, [r7, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	e7fd      	b.n	8003a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a5e:	f001 f885 	bl	8004b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a62:	4b33      	ldr	r3, [pc, #204]	@ (8003b30 <xTaskResumeAll+0x100>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	4a31      	ldr	r2, [pc, #196]	@ (8003b30 <xTaskResumeAll+0x100>)
 8003a6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6c:	4b30      	ldr	r3, [pc, #192]	@ (8003b30 <xTaskResumeAll+0x100>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d156      	bne.n	8003b22 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a74:	4b2f      	ldr	r3, [pc, #188]	@ (8003b34 <xTaskResumeAll+0x104>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d052      	beq.n	8003b22 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a7c:	e02f      	b.n	8003ade <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b38 <xTaskResumeAll+0x108>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3318      	adds	r3, #24
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f8aa 	bl	8002be4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff f8a5 	bl	8002be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9e:	4b27      	ldr	r3, [pc, #156]	@ (8003b3c <xTaskResumeAll+0x10c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d903      	bls.n	8003aae <xTaskResumeAll+0x7e>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	4a24      	ldr	r2, [pc, #144]	@ (8003b3c <xTaskResumeAll+0x10c>)
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4a21      	ldr	r2, [pc, #132]	@ (8003b40 <xTaskResumeAll+0x110>)
 8003abc:	441a      	add	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7ff f832 	bl	8002b2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ace:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <xTaskResumeAll+0x114>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d302      	bcc.n	8003ade <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <xTaskResumeAll+0x118>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ade:	4b16      	ldr	r3, [pc, #88]	@ (8003b38 <xTaskResumeAll+0x108>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1cb      	bne.n	8003a7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aec:	f000 fb24 	bl	8004138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003af0:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <xTaskResumeAll+0x11c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d010      	beq.n	8003b1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003afc:	f000 f836 	bl	8003b6c <xTaskIncrementTick>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <xTaskResumeAll+0x118>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f1      	bne.n	8003afc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003b18:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <xTaskResumeAll+0x11c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <xTaskResumeAll+0x118>)
 8003b20:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b22:	f001 f853 	bl	8004bcc <vPortExitCritical>

	return xAlreadyYielded;
 8003b26:	687b      	ldr	r3, [r7, #4]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000d4c 	.word	0x20000d4c
 8003b34:	20000d24 	.word	0x20000d24
 8003b38:	20000ce4 	.word	0x20000ce4
 8003b3c:	20000d2c 	.word	0x20000d2c
 8003b40:	20000854 	.word	0x20000854
 8003b44:	20000850 	.word	0x20000850
 8003b48:	20000d38 	.word	0x20000d38
 8003b4c:	20000d34 	.word	0x20000d34

08003b50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b56:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <xTaskGetTickCount+0x18>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b5c:	687b      	ldr	r3, [r7, #4]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	20000d28 	.word	0x20000d28

08003b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b76:	4b42      	ldr	r3, [pc, #264]	@ (8003c80 <xTaskIncrementTick+0x114>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d176      	bne.n	8003c6c <xTaskIncrementTick+0x100>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b7e:	4b41      	ldr	r3, [pc, #260]	@ (8003c84 <xTaskIncrementTick+0x118>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b86:	4a3f      	ldr	r2, [pc, #252]	@ (8003c84 <xTaskIncrementTick+0x118>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d121      	bne.n	8003bd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b92:	4b3d      	ldr	r3, [pc, #244]	@ (8003c88 <xTaskIncrementTick+0x11c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	603b      	str	r3, [r7, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <xTaskIncrementTick+0x44>
 8003bb4:	4b34      	ldr	r3, [pc, #208]	@ (8003c88 <xTaskIncrementTick+0x11c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b34      	ldr	r3, [pc, #208]	@ (8003c8c <xTaskIncrementTick+0x120>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a32      	ldr	r2, [pc, #200]	@ (8003c88 <xTaskIncrementTick+0x11c>)
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4a32      	ldr	r2, [pc, #200]	@ (8003c8c <xTaskIncrementTick+0x120>)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b31      	ldr	r3, [pc, #196]	@ (8003c90 <xTaskIncrementTick+0x124>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	4a30      	ldr	r2, [pc, #192]	@ (8003c90 <xTaskIncrementTick+0x124>)
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	f000 fab1 	bl	8004138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c94 <xTaskIncrementTick+0x128>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d34a      	bcc.n	8003c76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be0:	4b29      	ldr	r3, [pc, #164]	@ (8003c88 <xTaskIncrementTick+0x11c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <xTaskIncrementTick+0x82>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <xTaskIncrementTick+0x84>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf4:	4b27      	ldr	r3, [pc, #156]	@ (8003c94 <xTaskIncrementTick+0x128>)
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	601a      	str	r2, [r3, #0]
					break;
 8003bfc:	e03b      	b.n	8003c76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bfe:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <xTaskIncrementTick+0x11c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d203      	bcs.n	8003c1e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c16:	4a1f      	ldr	r2, [pc, #124]	@ (8003c94 <xTaskIncrementTick+0x128>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6013      	str	r3, [r2, #0]
						break;
 8003c1c:	e02b      	b.n	8003c76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe ffde 	bl	8002be4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3318      	adds	r3, #24
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe ffd5 	bl	8002be4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3e:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <xTaskIncrementTick+0x12c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d903      	bls.n	8003c4e <xTaskIncrementTick+0xe2>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4a:	4a13      	ldr	r2, [pc, #76]	@ (8003c98 <xTaskIncrementTick+0x12c>)
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a10      	ldr	r2, [pc, #64]	@ (8003c9c <xTaskIncrementTick+0x130>)
 8003c5c:	441a      	add	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7fe ff62 	bl	8002b2e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c6a:	e7b9      	b.n	8003be0 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <xTaskIncrementTick+0x134>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca0 <xTaskIncrementTick+0x134>)
 8003c74:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c76:	697b      	ldr	r3, [r7, #20]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000d4c 	.word	0x20000d4c
 8003c84:	20000d28 	.word	0x20000d28
 8003c88:	20000cdc 	.word	0x20000cdc
 8003c8c:	20000ce0 	.word	0x20000ce0
 8003c90:	20000d3c 	.word	0x20000d3c
 8003c94:	20000d44 	.word	0x20000d44
 8003c98:	20000d2c 	.word	0x20000d2c
 8003c9c:	20000854 	.word	0x20000854
 8003ca0:	20000d34 	.word	0x20000d34

08003ca4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003caa:	4b28      	ldr	r3, [pc, #160]	@ (8003d4c <vTaskSwitchContext+0xa8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cb2:	4b27      	ldr	r3, [pc, #156]	@ (8003d50 <vTaskSwitchContext+0xac>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cb8:	e042      	b.n	8003d40 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003cba:	4b25      	ldr	r3, [pc, #148]	@ (8003d50 <vTaskSwitchContext+0xac>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cc0:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <vTaskSwitchContext+0xb0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e011      	b.n	8003cec <vTaskSwitchContext+0x48>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <vTaskSwitchContext+0x42>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	607b      	str	r3, [r7, #4]
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	e7fd      	b.n	8003ce2 <vTaskSwitchContext+0x3e>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	491a      	ldr	r1, [pc, #104]	@ (8003d58 <vTaskSwitchContext+0xb4>)
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0e3      	beq.n	8003cc8 <vTaskSwitchContext+0x24>
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4a13      	ldr	r2, [pc, #76]	@ (8003d58 <vTaskSwitchContext+0xb4>)
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	3308      	adds	r3, #8
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d104      	bne.n	8003d30 <vTaskSwitchContext+0x8c>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <vTaskSwitchContext+0xb8>)
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4a06      	ldr	r2, [pc, #24]	@ (8003d54 <vTaskSwitchContext+0xb0>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000d4c 	.word	0x20000d4c
 8003d50:	20000d38 	.word	0x20000d38
 8003d54:	20000d2c 	.word	0x20000d2c
 8003d58:	20000854 	.word	0x20000854
 8003d5c:	20000850 	.word	0x20000850

08003d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
}
 8003d82:	bf00      	nop
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d88:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <vTaskPlaceOnEventList+0x48>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3318      	adds	r3, #24
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fe feef 	bl	8002b74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d96:	2101      	movs	r1, #1
 8003d98:	6838      	ldr	r0, [r7, #0]
 8003d9a:	f000 fa7f 	bl	800429c <prvAddCurrentTaskToDelayedList>
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000850 	.word	0x20000850

08003dac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	617b      	str	r3, [r7, #20]
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	e7fd      	b.n	8003dd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <vTaskPlaceOnEventListRestricted+0x54>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3318      	adds	r3, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7fe fea5 	bl	8002b2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	68b8      	ldr	r0, [r7, #8]
 8003df4:	f000 fa52 	bl	800429c <prvAddCurrentTaskToDelayedList>
	}
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000850 	.word	0x20000850

08003e04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60fb      	str	r3, [r7, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	e7fd      	b.n	8003e2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	3318      	adds	r3, #24
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fed4 	bl	8002be4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb4 <xTaskRemoveFromEventList+0xb0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d11d      	bne.n	8003e80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fecb 	bl	8002be4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e52:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <xTaskRemoveFromEventList+0xb4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d903      	bls.n	8003e62 <xTaskRemoveFromEventList+0x5e>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	4a16      	ldr	r2, [pc, #88]	@ (8003eb8 <xTaskRemoveFromEventList+0xb4>)
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4a13      	ldr	r2, [pc, #76]	@ (8003ebc <xTaskRemoveFromEventList+0xb8>)
 8003e70:	441a      	add	r2, r3
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7fe fe58 	bl	8002b2e <vListInsertEnd>
 8003e7e:	e005      	b.n	8003e8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	3318      	adds	r3, #24
 8003e84:	4619      	mov	r1, r3
 8003e86:	480e      	ldr	r0, [pc, #56]	@ (8003ec0 <xTaskRemoveFromEventList+0xbc>)
 8003e88:	f7fe fe51 	bl	8002b2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <xTaskRemoveFromEventList+0xc0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d905      	bls.n	8003ea6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <xTaskRemoveFromEventList+0xc4>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e001      	b.n	8003eaa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003eaa:	697b      	ldr	r3, [r7, #20]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000d4c 	.word	0x20000d4c
 8003eb8:	20000d2c 	.word	0x20000d2c
 8003ebc:	20000854 	.word	0x20000854
 8003ec0:	20000ce4 	.word	0x20000ce4
 8003ec4:	20000850 	.word	0x20000850
 8003ec8:	20000d38 	.word	0x20000d38

08003ecc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	@ (8003ef0 <vTaskInternalSetTimeOutState+0x24>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003edc:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <vTaskInternalSetTimeOutState+0x28>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	605a      	str	r2, [r3, #4]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000d3c 	.word	0x20000d3c
 8003ef4:	20000d28 	.word	0x20000d28

08003ef8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	613b      	str	r3, [r7, #16]
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	e7fd      	b.n	8003f1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60fb      	str	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	e7fd      	b.n	8003f3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f3e:	f000 fe15 	bl	8004b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f42:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <xTaskCheckForTimeOut+0xc0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d102      	bne.n	8003f62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	e023      	b.n	8003faa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b15      	ldr	r3, [pc, #84]	@ (8003fbc <xTaskCheckForTimeOut+0xc4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d007      	beq.n	8003f7e <xTaskCheckForTimeOut+0x86>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d302      	bcc.n	8003f7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e015      	b.n	8003faa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d20b      	bcs.n	8003fa0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	1ad2      	subs	r2, r2, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ff99 	bl	8003ecc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e004      	b.n	8003faa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003faa:	f000 fe0f 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 8003fae:	69fb      	ldr	r3, [r7, #28]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000d28 	.word	0x20000d28
 8003fbc:	20000d3c 	.word	0x20000d3c

08003fc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	@ (8003fd4 <vTaskMissedYield+0x14>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000d38 	.word	0x20000d38

08003fd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fe0:	f000 f84c 	bl	800407c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8003fe4:	4b04      	ldr	r3, [pc, #16]	@ (8003ff8 <prvIdleTask+0x20>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ff4:	bf00      	nop
 8003ff6:	e7f3      	b.n	8003fe0 <prvIdleTask+0x8>
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	e00c      	b.n	8004022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4a12      	ldr	r2, [pc, #72]	@ (800405c <prvInitialiseTaskLists+0x60>)
 8004014:	4413      	add	r3, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fd5e 	bl	8002ad8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3301      	adds	r3, #1
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b37      	cmp	r3, #55	@ 0x37
 8004026:	d9ef      	bls.n	8004008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004028:	480d      	ldr	r0, [pc, #52]	@ (8004060 <prvInitialiseTaskLists+0x64>)
 800402a:	f7fe fd55 	bl	8002ad8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800402e:	480d      	ldr	r0, [pc, #52]	@ (8004064 <prvInitialiseTaskLists+0x68>)
 8004030:	f7fe fd52 	bl	8002ad8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004034:	480c      	ldr	r0, [pc, #48]	@ (8004068 <prvInitialiseTaskLists+0x6c>)
 8004036:	f7fe fd4f 	bl	8002ad8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800403a:	480c      	ldr	r0, [pc, #48]	@ (800406c <prvInitialiseTaskLists+0x70>)
 800403c:	f7fe fd4c 	bl	8002ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004040:	480b      	ldr	r0, [pc, #44]	@ (8004070 <prvInitialiseTaskLists+0x74>)
 8004042:	f7fe fd49 	bl	8002ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004046:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <prvInitialiseTaskLists+0x78>)
 8004048:	4a05      	ldr	r2, [pc, #20]	@ (8004060 <prvInitialiseTaskLists+0x64>)
 800404a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800404c:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <prvInitialiseTaskLists+0x7c>)
 800404e:	4a05      	ldr	r2, [pc, #20]	@ (8004064 <prvInitialiseTaskLists+0x68>)
 8004050:	601a      	str	r2, [r3, #0]
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000854 	.word	0x20000854
 8004060:	20000cb4 	.word	0x20000cb4
 8004064:	20000cc8 	.word	0x20000cc8
 8004068:	20000ce4 	.word	0x20000ce4
 800406c:	20000cf8 	.word	0x20000cf8
 8004070:	20000d10 	.word	0x20000d10
 8004074:	20000cdc 	.word	0x20000cdc
 8004078:	20000ce0 	.word	0x20000ce0

0800407c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004082:	e019      	b.n	80040b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004084:	f000 fd72 	bl	8004b6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004088:	4b10      	ldr	r3, [pc, #64]	@ (80040cc <prvCheckTasksWaitingTermination+0x50>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4618      	mov	r0, r3
 8004096:	f7fe fda5 	bl	8002be4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800409a:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <prvCheckTasksWaitingTermination+0x54>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3b01      	subs	r3, #1
 80040a0:	4a0b      	ldr	r2, [pc, #44]	@ (80040d0 <prvCheckTasksWaitingTermination+0x54>)
 80040a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <prvCheckTasksWaitingTermination+0x58>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <prvCheckTasksWaitingTermination+0x58>)
 80040ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ae:	f000 fd8d 	bl	8004bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f810 	bl	80040d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <prvCheckTasksWaitingTermination+0x58>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e1      	bne.n	8004084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000cf8 	.word	0x20000cf8
 80040d0:	20000d24 	.word	0x20000d24
 80040d4:	20000d0c 	.word	0x20000d0c

080040d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d108      	bne.n	80040fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 ff06 	bl	8004f00 <vPortFree>
				vPortFree( pxTCB );
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 ff03 	bl	8004f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040fa:	e019      	b.n	8004130 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004102:	2b01      	cmp	r3, #1
 8004104:	d103      	bne.n	800410e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fefa 	bl	8004f00 <vPortFree>
	}
 800410c:	e010      	b.n	8004130 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004114:	2b02      	cmp	r3, #2
 8004116:	d00b      	beq.n	8004130 <prvDeleteTCB+0x58>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60fb      	str	r3, [r7, #12]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <prvDeleteTCB+0x54>
	}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413e:	4b0e      	ldr	r3, [pc, #56]	@ (8004178 <prvResetNextTaskUnblockTime+0x40>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <prvResetNextTaskUnblockTime+0x14>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <prvResetNextTaskUnblockTime+0x16>
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004152:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <prvResetNextTaskUnblockTime+0x44>)
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800415a:	e008      	b.n	800416e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <prvResetNextTaskUnblockTime+0x40>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4a04      	ldr	r2, [pc, #16]	@ (800417c <prvResetNextTaskUnblockTime+0x44>)
 800416c:	6013      	str	r3, [r2, #0]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	20000cdc 	.word	0x20000cdc
 800417c:	20000d44 	.word	0x20000d44

08004180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004186:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <xTaskGetSchedulerState+0x34>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800418e:	2301      	movs	r3, #1
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	e008      	b.n	80041a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004194:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <xTaskGetSchedulerState+0x38>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800419c:	2302      	movs	r3, #2
 800419e:	607b      	str	r3, [r7, #4]
 80041a0:	e001      	b.n	80041a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041a6:	687b      	ldr	r3, [r7, #4]
	}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000d30 	.word	0x20000d30
 80041b8:	20000d4c 	.word	0x20000d4c

080041bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d058      	beq.n	8004284 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <xTaskPriorityDisinherit+0xd4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d00b      	beq.n	80041f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60bb      	str	r3, [r7, #8]
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	e7fd      	b.n	8004210 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004226:	429a      	cmp	r2, r3
 8004228:	d02c      	beq.n	8004284 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422e:	2b00      	cmp	r3, #0
 8004230:	d128      	bne.n	8004284 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fcd4 	bl	8002be4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004254:	4b0f      	ldr	r3, [pc, #60]	@ (8004294 <xTaskPriorityDisinherit+0xd8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d903      	bls.n	8004264 <xTaskPriorityDisinherit+0xa8>
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	4a0c      	ldr	r2, [pc, #48]	@ (8004294 <xTaskPriorityDisinherit+0xd8>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4a09      	ldr	r2, [pc, #36]	@ (8004298 <xTaskPriorityDisinherit+0xdc>)
 8004272:	441a      	add	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7fe fc57 	bl	8002b2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004284:	697b      	ldr	r3, [r7, #20]
	}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000850 	.word	0x20000850
 8004294:	20000d2c 	.word	0x20000d2c
 8004298:	20000854 	.word	0x20000854

0800429c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042a6:	4b21      	ldr	r3, [pc, #132]	@ (800432c <prvAddCurrentTaskToDelayedList+0x90>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ac:	4b20      	ldr	r3, [pc, #128]	@ (8004330 <prvAddCurrentTaskToDelayedList+0x94>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fc96 	bl	8002be4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d10a      	bne.n	80042d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004330 <prvAddCurrentTaskToDelayedList+0x94>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4619      	mov	r1, r3
 80042ce:	4819      	ldr	r0, [pc, #100]	@ (8004334 <prvAddCurrentTaskToDelayedList+0x98>)
 80042d0:	f7fe fc2d 	bl	8002b2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042d4:	e026      	b.n	8004324 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042de:	4b14      	ldr	r3, [pc, #80]	@ (8004330 <prvAddCurrentTaskToDelayedList+0x94>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d209      	bcs.n	8004302 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ee:	4b12      	ldr	r3, [pc, #72]	@ (8004338 <prvAddCurrentTaskToDelayedList+0x9c>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004330 <prvAddCurrentTaskToDelayedList+0x94>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f7fe fc3a 	bl	8002b74 <vListInsert>
}
 8004300:	e010      	b.n	8004324 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004302:	4b0e      	ldr	r3, [pc, #56]	@ (800433c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <prvAddCurrentTaskToDelayedList+0x94>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f7fe fc30 	bl	8002b74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004314:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	429a      	cmp	r2, r3
 800431c:	d202      	bcs.n	8004324 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800431e:	4a08      	ldr	r2, [pc, #32]	@ (8004340 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6013      	str	r3, [r2, #0]
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000d28 	.word	0x20000d28
 8004330:	20000850 	.word	0x20000850
 8004334:	20000d10 	.word	0x20000d10
 8004338:	20000ce0 	.word	0x20000ce0
 800433c:	20000cdc 	.word	0x20000cdc
 8004340:	20000d44 	.word	0x20000d44

08004344 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	@ 0x28
 8004348:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800434e:	f000 fad9 	bl	8004904 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004352:	4b1d      	ldr	r3, [pc, #116]	@ (80043c8 <xTimerCreateTimerTask+0x84>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d021      	beq.n	800439e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004362:	1d3a      	adds	r2, r7, #4
 8004364:	f107 0108 	add.w	r1, r7, #8
 8004368:	f107 030c 	add.w	r3, r7, #12
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe fb99 	bl	8002aa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	9202      	str	r2, [sp, #8]
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	2302      	movs	r3, #2
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2300      	movs	r3, #0
 8004382:	460a      	mov	r2, r1
 8004384:	4911      	ldr	r1, [pc, #68]	@ (80043cc <xTimerCreateTimerTask+0x88>)
 8004386:	4812      	ldr	r0, [pc, #72]	@ (80043d0 <xTimerCreateTimerTask+0x8c>)
 8004388:	f7ff f91a 	bl	80035c0 <xTaskCreateStatic>
 800438c:	4603      	mov	r3, r0
 800438e:	4a11      	ldr	r2, [pc, #68]	@ (80043d4 <xTimerCreateTimerTask+0x90>)
 8004390:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004392:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <xTimerCreateTimerTask+0x90>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800439a:	2301      	movs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	613b      	str	r3, [r7, #16]
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043bc:	697b      	ldr	r3, [r7, #20]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000d80 	.word	0x20000d80
 80043cc:	080051dc 	.word	0x080051dc
 80043d0:	080044f9 	.word	0x080044f9
 80043d4:	20000d84 	.word	0x20000d84

080043d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	@ 0x28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <xTimerGenericCommand+0x30>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	623b      	str	r3, [r7, #32]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004408:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <xTimerGenericCommand+0x98>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02a      	beq.n	8004466 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b05      	cmp	r3, #5
 8004420:	dc18      	bgt.n	8004454 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004422:	f7ff fead 	bl	8004180 <xTaskGetSchedulerState>
 8004426:	4603      	mov	r3, r0
 8004428:	2b02      	cmp	r3, #2
 800442a:	d109      	bne.n	8004440 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800442c:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <xTimerGenericCommand+0x98>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	f107 0110 	add.w	r1, r7, #16
 8004434:	2300      	movs	r3, #0
 8004436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004438:	f7fe fcf8 	bl	8002e2c <xQueueGenericSend>
 800443c:	6278      	str	r0, [r7, #36]	@ 0x24
 800443e:	e012      	b.n	8004466 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <xTimerGenericCommand+0x98>)
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	f107 0110 	add.w	r1, r7, #16
 8004448:	2300      	movs	r3, #0
 800444a:	2200      	movs	r2, #0
 800444c:	f7fe fcee 	bl	8002e2c <xQueueGenericSend>
 8004450:	6278      	str	r0, [r7, #36]	@ 0x24
 8004452:	e008      	b.n	8004466 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004454:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <xTimerGenericCommand+0x98>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	f107 0110 	add.w	r1, r7, #16
 800445c:	2300      	movs	r3, #0
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	f7fe fdce 	bl	8003000 <xQueueGenericSendFromISR>
 8004464:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	@ 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000d80 	.word	0x20000d80

08004474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800447e:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <prvProcessExpiredTimer+0x80>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	3304      	adds	r3, #4
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fba9 	bl	8002be4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d123      	bne.n	80044e2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	18d1      	adds	r1, r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	6978      	ldr	r0, [r7, #20]
 80044a8:	f000 f8cc 	bl	8004644 <prvInsertTimerInActiveList>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d017      	beq.n	80044e2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	2100      	movs	r1, #0
 80044bc:	6978      	ldr	r0, [r7, #20]
 80044be:	f7ff ff8b 	bl	80043d8 <xTimerGenericCommand>
 80044c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60fb      	str	r3, [r7, #12]
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	e7fd      	b.n	80044de <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	4798      	blx	r3
}
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000d78 	.word	0x20000d78

080044f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004500:	f107 0308 	add.w	r3, r7, #8
 8004504:	4618      	mov	r0, r3
 8004506:	f000 f859 	bl	80045bc <prvGetNextExpireTime>
 800450a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4619      	mov	r1, r3
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f805 	bl	8004520 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004516:	f000 f8d7 	bl	80046c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800451a:	bf00      	nop
 800451c:	e7f0      	b.n	8004500 <prvTimerTask+0x8>
	...

08004520 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800452a:	f7ff fa73 	bl	8003a14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800452e:	f107 0308 	add.w	r3, r7, #8
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f866 	bl	8004604 <prvSampleTimeNow>
 8004538:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d130      	bne.n	80045a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <prvProcessTimerOrBlockTask+0x3c>
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	429a      	cmp	r2, r3
 800454c:	d806      	bhi.n	800455c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800454e:	f7ff fa6f 	bl	8003a30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff8d 	bl	8004474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800455a:	e024      	b.n	80045a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004562:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <prvProcessTimerOrBlockTask+0x90>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004574:	4b0f      	ldr	r3, [pc, #60]	@ (80045b4 <prvProcessTimerOrBlockTask+0x94>)
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	f7fe ffe9 	bl	8003558 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004586:	f7ff fa53 	bl	8003a30 <xTaskResumeAll>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <prvProcessTimerOrBlockTask+0x98>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
}
 80045a0:	e001      	b.n	80045a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045a2:	f7ff fa45 	bl	8003a30 <xTaskResumeAll>
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000d7c 	.word	0x20000d7c
 80045b4:	20000d80 	.word	0x20000d80
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <prvGetNextExpireTime+0x44>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045e2:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <prvGetNextExpireTime+0x44>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e001      	b.n	80045f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045f2:	68fb      	ldr	r3, [r7, #12]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000d78 	.word	0x20000d78

08004604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800460c:	f7ff faa0 	bl	8003b50 <xTaskGetTickCount>
 8004610:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004612:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <prvSampleTimeNow+0x3c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	429a      	cmp	r2, r3
 800461a:	d205      	bcs.n	8004628 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800461c:	f000 f910 	bl	8004840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e002      	b.n	800462e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800462e:	4a04      	ldr	r2, [pc, #16]	@ (8004640 <prvSampleTimeNow+0x3c>)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004634:	68fb      	ldr	r3, [r7, #12]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000d88 	.word	0x20000d88

08004644 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d812      	bhi.n	8004690 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004678:	2301      	movs	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e01b      	b.n	80046b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800467e:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <prvInsertTimerInActiveList+0x7c>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3304      	adds	r3, #4
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fe fa73 	bl	8002b74 <vListInsert>
 800468e:	e012      	b.n	80046b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d206      	bcs.n	80046a6 <prvInsertTimerInActiveList+0x62>
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e007      	b.n	80046b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046a6:	4b07      	ldr	r3, [pc, #28]	@ (80046c4 <prvInsertTimerInActiveList+0x80>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe fa5f 	bl	8002b74 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046b6:	697b      	ldr	r3, [r7, #20]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000d7c 	.word	0x20000d7c
 80046c4:	20000d78 	.word	0x20000d78

080046c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08e      	sub	sp, #56	@ 0x38
 80046cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046ce:	e0a5      	b.n	800481c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da19      	bge.n	800470a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046d6:	1d3b      	adds	r3, r7, #4
 80046d8:	3304      	adds	r3, #4
 80046da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61fb      	str	r3, [r7, #28]
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	e7fd      	b.n	80046f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004700:	6850      	ldr	r0, [r2, #4]
 8004702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004704:	6892      	ldr	r2, [r2, #8]
 8004706:	4611      	mov	r1, r2
 8004708:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f2c0 8085 	blt.w	800481c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fa5e 	bl	8002be4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004728:	463b      	mov	r3, r7
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ff6a 	bl	8004604 <prvSampleTimeNow>
 8004730:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b09      	cmp	r3, #9
 8004736:	d86c      	bhi.n	8004812 <prvProcessReceivedCommands+0x14a>
 8004738:	a201      	add	r2, pc, #4	@ (adr r2, 8004740 <prvProcessReceivedCommands+0x78>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004769 	.word	0x08004769
 8004744:	08004769 	.word	0x08004769
 8004748:	08004769 	.word	0x08004769
 800474c:	08004813 	.word	0x08004813
 8004750:	080047c7 	.word	0x080047c7
 8004754:	08004801 	.word	0x08004801
 8004758:	08004769 	.word	0x08004769
 800475c:	08004769 	.word	0x08004769
 8004760:	08004813 	.word	0x08004813
 8004764:	080047c7 	.word	0x080047c7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	18d1      	adds	r1, r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004776:	f7ff ff65 	bl	8004644 <prvInsertTimerInActiveList>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d04a      	beq.n	8004816 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004786:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d142      	bne.n	8004816 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	441a      	add	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2300      	movs	r3, #0
 800479e:	2100      	movs	r1, #0
 80047a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047a2:	f7ff fe19 	bl	80043d8 <xTimerGenericCommand>
 80047a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d133      	bne.n	8004816 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	61bb      	str	r3, [r7, #24]
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	e7fd      	b.n	80047c2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <prvProcessReceivedCommands+0x124>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	617b      	str	r3, [r7, #20]
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	18d1      	adds	r1, r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047fa:	f7ff ff23 	bl	8004644 <prvInsertTimerInActiveList>
					break;
 80047fe:	e00d      	b.n	800481c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d107      	bne.n	800481a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800480a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800480c:	f000 fb78 	bl	8004f00 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004810:	e003      	b.n	800481a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <prvProcessReceivedCommands+0x154>
					break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <prvProcessReceivedCommands+0x154>
					break;
 800481a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800481c:	4b07      	ldr	r3, [pc, #28]	@ (800483c <prvProcessReceivedCommands+0x174>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1d39      	adds	r1, r7, #4
 8004822:	2200      	movs	r2, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe fc87 	bl	8003138 <xQueueReceive>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f af4f 	bne.w	80046d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	3730      	adds	r7, #48	@ 0x30
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000d80 	.word	0x20000d80

08004840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004846:	e046      	b.n	80048d6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004848:	4b2c      	ldr	r3, [pc, #176]	@ (80048fc <prvSwitchTimerLists+0xbc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004852:	4b2a      	ldr	r3, [pc, #168]	@ (80048fc <prvSwitchTimerLists+0xbc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3304      	adds	r3, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe f9bf 	bl	8002be4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d12f      	bne.n	80048d6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	429a      	cmp	r2, r3
 8004886:	d90e      	bls.n	80048a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004894:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <prvSwitchTimerLists+0xbc>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f7fe f968 	bl	8002b74 <vListInsert>
 80048a4:	e017      	b.n	80048d6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a6:	2300      	movs	r3, #0
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	2100      	movs	r1, #0
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff fd91 	bl	80043d8 <xTimerGenericCommand>
 80048b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10b      	bne.n	80048d6 <prvSwitchTimerLists+0x96>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	603b      	str	r3, [r7, #0]
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	e7fd      	b.n	80048d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <prvSwitchTimerLists+0xbc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1b3      	bne.n	8004848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <prvSwitchTimerLists+0xbc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <prvSwitchTimerLists+0xc0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a04      	ldr	r2, [pc, #16]	@ (80048fc <prvSwitchTimerLists+0xbc>)
 80048ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048ee:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <prvSwitchTimerLists+0xc0>)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000d78 	.word	0x20000d78
 8004900:	20000d7c 	.word	0x20000d7c

08004904 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800490a:	f000 f92f 	bl	8004b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800490e:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <prvCheckForValidListAndQueue+0x60>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d120      	bne.n	8004958 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004916:	4814      	ldr	r0, [pc, #80]	@ (8004968 <prvCheckForValidListAndQueue+0x64>)
 8004918:	f7fe f8de 	bl	8002ad8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800491c:	4813      	ldr	r0, [pc, #76]	@ (800496c <prvCheckForValidListAndQueue+0x68>)
 800491e:	f7fe f8db 	bl	8002ad8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004922:	4b13      	ldr	r3, [pc, #76]	@ (8004970 <prvCheckForValidListAndQueue+0x6c>)
 8004924:	4a10      	ldr	r2, [pc, #64]	@ (8004968 <prvCheckForValidListAndQueue+0x64>)
 8004926:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004928:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <prvCheckForValidListAndQueue+0x70>)
 800492a:	4a10      	ldr	r2, [pc, #64]	@ (800496c <prvCheckForValidListAndQueue+0x68>)
 800492c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800492e:	2300      	movs	r3, #0
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4b11      	ldr	r3, [pc, #68]	@ (8004978 <prvCheckForValidListAndQueue+0x74>)
 8004934:	4a11      	ldr	r2, [pc, #68]	@ (800497c <prvCheckForValidListAndQueue+0x78>)
 8004936:	2110      	movs	r1, #16
 8004938:	200a      	movs	r0, #10
 800493a:	f7fe f9d8 	bl	8002cee <xQueueGenericCreateStatic>
 800493e:	4603      	mov	r3, r0
 8004940:	4a08      	ldr	r2, [pc, #32]	@ (8004964 <prvCheckForValidListAndQueue+0x60>)
 8004942:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004944:	4b07      	ldr	r3, [pc, #28]	@ (8004964 <prvCheckForValidListAndQueue+0x60>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800494c:	4b05      	ldr	r3, [pc, #20]	@ (8004964 <prvCheckForValidListAndQueue+0x60>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	490b      	ldr	r1, [pc, #44]	@ (8004980 <prvCheckForValidListAndQueue+0x7c>)
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fdd8 	bl	8003508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004958:	f000 f938 	bl	8004bcc <vPortExitCritical>
}
 800495c:	bf00      	nop
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000d80 	.word	0x20000d80
 8004968:	20000d50 	.word	0x20000d50
 800496c:	20000d64 	.word	0x20000d64
 8004970:	20000d78 	.word	0x20000d78
 8004974:	20000d7c 	.word	0x20000d7c
 8004978:	20000e2c 	.word	0x20000e2c
 800497c:	20000d8c 	.word	0x20000d8c
 8004980:	080051e4 	.word	0x080051e4

08004984 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3b04      	subs	r3, #4
 8004994:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800499c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3b04      	subs	r3, #4
 80049a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3b04      	subs	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049b4:	4a08      	ldr	r2, [pc, #32]	@ (80049d8 <pxPortInitialiseStack+0x54>)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3b14      	subs	r3, #20
 80049be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3b20      	subs	r3, #32
 80049ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049cc:	68fb      	ldr	r3, [r7, #12]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	080049dd 	.word	0x080049dd

080049dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049e6:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <prvTaskExitError+0x54>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d00b      	beq.n	8004a08 <prvTaskExitError+0x2c>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	60fb      	str	r3, [r7, #12]
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <prvTaskExitError+0x28>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60bb      	str	r3, [r7, #8]
}
 8004a1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a1c:	bf00      	nop
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0fc      	beq.n	8004a1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	2000000c 	.word	0x2000000c
	...

08004a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a40:	4b07      	ldr	r3, [pc, #28]	@ (8004a60 <pxCurrentTCBConst2>)
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	6808      	ldr	r0, [r1, #0]
 8004a46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a4a:	f380 8809 	msr	PSP, r0
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8811 	msr	BASEPRI, r0
 8004a5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a5e:	4770      	bx	lr

08004a60 <pxCurrentTCBConst2>:
 8004a60:	20000850 	.word	0x20000850
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop

08004a68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a68:	4806      	ldr	r0, [pc, #24]	@ (8004a84 <prvPortStartFirstTask+0x1c>)
 8004a6a:	6800      	ldr	r0, [r0, #0]
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	f380 8808 	msr	MSP, r0
 8004a72:	b662      	cpsie	i
 8004a74:	b661      	cpsie	f
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	df00      	svc	0
 8004a80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a82:	bf00      	nop
 8004a84:	e000ed08 	.word	0xe000ed08

08004a88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a8e:	4b32      	ldr	r3, [pc, #200]	@ (8004b58 <xPortStartScheduler+0xd0>)
 8004a90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	22ff      	movs	r2, #255	@ 0xff
 8004a9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b5c <xPortStartScheduler+0xd4>)
 8004ab4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ab8:	2207      	movs	r2, #7
 8004aba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004abc:	e009      	b.n	8004ad2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004abe:	4b28      	ldr	r3, [pc, #160]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	4a26      	ldr	r2, [pc, #152]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ac6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b80      	cmp	r3, #128	@ 0x80
 8004adc:	d0ef      	beq.n	8004abe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ade:	4b20      	ldr	r3, [pc, #128]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d00b      	beq.n	8004b02 <xPortStartScheduler+0x7a>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60bb      	str	r3, [r7, #8]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b02:	4b17      	ldr	r3, [pc, #92]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b0c:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b14:	4a12      	ldr	r2, [pc, #72]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b20:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0f      	ldr	r2, [pc, #60]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0c      	ldr	r2, [pc, #48]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b38:	f000 f8b8 	bl	8004cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <xPortStartScheduler+0xe0>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b42:	f7ff ff91 	bl	8004a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b46:	f7ff f8ad 	bl	8003ca4 <vTaskSwitchContext>
	prvTaskExitError();
 8004b4a:	f7ff ff47 	bl	80049dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	e000e400 	.word	0xe000e400
 8004b5c:	20000e7c 	.word	0x20000e7c
 8004b60:	20000e80 	.word	0x20000e80
 8004b64:	e000ed20 	.word	0xe000ed20
 8004b68:	2000000c 	.word	0x2000000c

08004b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	607b      	str	r3, [r7, #4]
}
 8004b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d110      	bne.n	8004bba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b98:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <vPortEnterCritical+0x5c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <vPortEnterCritical+0x4e>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	603b      	str	r3, [r7, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <vPortEnterCritical+0x4a>
	}
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	2000000c 	.word	0x2000000c
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bd2:	4b12      	ldr	r3, [pc, #72]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <vPortExitCritical+0x26>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	607b      	str	r3, [r7, #4]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	4a08      	ldr	r2, [pc, #32]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bfc:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <vPortExitCritical+0x44>
 8004c04:	2300      	movs	r3, #0
 8004c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f383 8811 	msr	BASEPRI, r3
}
 8004c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c20:	f3ef 8009 	mrs	r0, PSP
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <pxCurrentTCBConst>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c30:	6010      	str	r0, [r2, #0]
 8004c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c3a:	f380 8811 	msr	BASEPRI, r0
 8004c3e:	f7ff f831 	bl	8003ca4 <vTaskSwitchContext>
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c56:	f380 8809 	msr	PSP, r0
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	4770      	bx	lr

08004c60 <pxCurrentTCBConst>:
 8004c60:	20000850 	.word	0x20000850
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c82:	f7fe ff73 	bl	8003b6c <xTaskIncrementTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <SysTick_Handler+0x40>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <vPortSetupTimerInterrupt+0x30>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <vPortSetupTimerInterrupt+0x38>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <vPortSetupTimerInterrupt+0x3c>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <vPortSetupTimerInterrupt+0x40>)
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cce:	4b03      	ldr	r3, [pc, #12]	@ (8004cdc <vPortSetupTimerInterrupt+0x30>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	e000e010 	.word	0xe000e010
 8004ce0:	e000e018 	.word	0xe000e018
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	10624dd3 	.word	0x10624dd3
 8004cec:	e000e014 	.word	0xe000e014

08004cf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cf6:	f3ef 8305 	mrs	r3, IPSR
 8004cfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	d915      	bls.n	8004d2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d02:	4a17      	ldr	r2, [pc, #92]	@ (8004d60 <vPortValidateInterruptPriority+0x70>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d0c:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <vPortValidateInterruptPriority+0x74>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	7afa      	ldrb	r2, [r7, #11]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d20b      	bcs.n	8004d2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	607b      	str	r3, [r7, #4]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <vPortValidateInterruptPriority+0x78>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d36:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <vPortValidateInterruptPriority+0x7c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d90b      	bls.n	8004d56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	603b      	str	r3, [r7, #0]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <vPortValidateInterruptPriority+0x62>
	}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr
 8004d60:	e000e3f0 	.word	0xe000e3f0
 8004d64:	20000e7c 	.word	0x20000e7c
 8004d68:	e000ed0c 	.word	0xe000ed0c
 8004d6c:	20000e80 	.word	0x20000e80

08004d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	@ 0x28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d7c:	f7fe fe4a 	bl	8003a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d80:	4b5a      	ldr	r3, [pc, #360]	@ (8004eec <pvPortMalloc+0x17c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d88:	f000 f916 	bl	8004fb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d8c:	4b58      	ldr	r3, [pc, #352]	@ (8004ef0 <pvPortMalloc+0x180>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 8090 	bne.w	8004eba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01e      	beq.n	8004dde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004da0:	2208      	movs	r2, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d015      	beq.n	8004dde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	3308      	adds	r3, #8
 8004dba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <pvPortMalloc+0x6e>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	617b      	str	r3, [r7, #20]
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d06a      	beq.n	8004eba <pvPortMalloc+0x14a>
 8004de4:	4b43      	ldr	r3, [pc, #268]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d865      	bhi.n	8004eba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dee:	4b42      	ldr	r3, [pc, #264]	@ (8004ef8 <pvPortMalloc+0x188>)
 8004df0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004df2:	4b41      	ldr	r3, [pc, #260]	@ (8004ef8 <pvPortMalloc+0x188>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004df8:	e004      	b.n	8004e04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d903      	bls.n	8004e16 <pvPortMalloc+0xa6>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f1      	bne.n	8004dfa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e16:	4b35      	ldr	r3, [pc, #212]	@ (8004eec <pvPortMalloc+0x17c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d04c      	beq.n	8004eba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2208      	movs	r2, #8
 8004e26:	4413      	add	r3, r2
 8004e28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d920      	bls.n	8004e84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <pvPortMalloc+0xfc>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	613b      	str	r3, [r7, #16]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1ad2      	subs	r2, r2, r3
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e7e:	69b8      	ldr	r0, [r7, #24]
 8004e80:	f000 f8fc 	bl	800507c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e84:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	4a19      	ldr	r2, [pc, #100]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004e90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e92:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b19      	ldr	r3, [pc, #100]	@ (8004efc <pvPortMalloc+0x18c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d203      	bcs.n	8004ea6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a16      	ldr	r2, [pc, #88]	@ (8004efc <pvPortMalloc+0x18c>)
 8004ea4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4b11      	ldr	r3, [pc, #68]	@ (8004ef0 <pvPortMalloc+0x180>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004eba:	f7fe fdb9 	bl	8003a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <pvPortMalloc+0x170>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	60fb      	str	r3, [r7, #12]
}
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <pvPortMalloc+0x16c>
	return pvReturn;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3728      	adds	r7, #40	@ 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20001a8c 	.word	0x20001a8c
 8004ef0:	20001a98 	.word	0x20001a98
 8004ef4:	20001a90 	.word	0x20001a90
 8004ef8:	20001a84 	.word	0x20001a84
 8004efc:	20001a94 	.word	0x20001a94

08004f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d04a      	beq.n	8004fa8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f12:	2308      	movs	r3, #8
 8004f14:	425b      	negs	r3, r3
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4413      	add	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	4b22      	ldr	r3, [pc, #136]	@ (8004fb0 <vPortFree+0xb0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <vPortFree+0x46>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60fb      	str	r3, [r7, #12]
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	e7fd      	b.n	8004f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <vPortFree+0x66>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	60bb      	str	r3, [r7, #8]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	4b11      	ldr	r3, [pc, #68]	@ (8004fb0 <vPortFree+0xb0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d019      	beq.n	8004fa8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d115      	bne.n	8004fa8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb0 <vPortFree+0xb0>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	401a      	ands	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f8c:	f7fe fd42 	bl	8003a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4b07      	ldr	r3, [pc, #28]	@ (8004fb4 <vPortFree+0xb4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	4a06      	ldr	r2, [pc, #24]	@ (8004fb4 <vPortFree+0xb4>)
 8004f9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f9e:	6938      	ldr	r0, [r7, #16]
 8004fa0:	f000 f86c 	bl	800507c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fa4:	f7fe fd44 	bl	8003a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fa8:	bf00      	nop
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20001a98 	.word	0x20001a98
 8004fb4:	20001a90 	.word	0x20001a90

08004fb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fbe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004fc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fc4:	4b27      	ldr	r3, [pc, #156]	@ (8005064 <prvHeapInit+0xac>)
 8004fc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00c      	beq.n	8004fec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3307      	adds	r3, #7
 8004fd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0307 	bic.w	r3, r3, #7
 8004fde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8005064 <prvHeapInit+0xac>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8005068 <prvHeapInit+0xb0>)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8005068 <prvHeapInit+0xb0>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4413      	add	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005004:	2208      	movs	r2, #8
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0307 	bic.w	r3, r3, #7
 8005012:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a15      	ldr	r2, [pc, #84]	@ (800506c <prvHeapInit+0xb4>)
 8005018:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800501a:	4b14      	ldr	r3, [pc, #80]	@ (800506c <prvHeapInit+0xb4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005022:	4b12      	ldr	r3, [pc, #72]	@ (800506c <prvHeapInit+0xb4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005038:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <prvHeapInit+0xb4>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a0a      	ldr	r2, [pc, #40]	@ (8005070 <prvHeapInit+0xb8>)
 8005046:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a09      	ldr	r2, [pc, #36]	@ (8005074 <prvHeapInit+0xbc>)
 800504e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005050:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <prvHeapInit+0xc0>)
 8005052:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005056:	601a      	str	r2, [r3, #0]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000e84 	.word	0x20000e84
 8005068:	20001a84 	.word	0x20001a84
 800506c:	20001a8c 	.word	0x20001a8c
 8005070:	20001a94 	.word	0x20001a94
 8005074:	20001a90 	.word	0x20001a90
 8005078:	20001a98 	.word	0x20001a98

0800507c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005084:	4b27      	ldr	r3, [pc, #156]	@ (8005124 <prvInsertBlockIntoFreeList+0xa8>)
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e002      	b.n	8005090 <prvInsertBlockIntoFreeList+0x14>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d8f7      	bhi.n	800508a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	4413      	add	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d108      	bne.n	80050be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	441a      	add	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	441a      	add	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d118      	bne.n	8005104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b14      	ldr	r3, [pc, #80]	@ (8005128 <prvInsertBlockIntoFreeList+0xac>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d00d      	beq.n	80050fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e008      	b.n	800510c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <prvInsertBlockIntoFreeList+0xac>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e003      	b.n	800510c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d002      	beq.n	800511a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr
 8005124:	20001a84 	.word	0x20001a84
 8005128:	20001a8c 	.word	0x20001a8c

0800512c <memset>:
 800512c:	4603      	mov	r3, r0
 800512e:	4402      	add	r2, r0
 8005130:	4293      	cmp	r3, r2
 8005132:	d100      	bne.n	8005136 <memset+0xa>
 8005134:	4770      	bx	lr
 8005136:	f803 1b01 	strb.w	r1, [r3], #1
 800513a:	e7f9      	b.n	8005130 <memset+0x4>

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	2600      	movs	r6, #0
 8005140:	4d0c      	ldr	r5, [pc, #48]	@ (8005174 <__libc_init_array+0x38>)
 8005142:	4c0d      	ldr	r4, [pc, #52]	@ (8005178 <__libc_init_array+0x3c>)
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	42a6      	cmp	r6, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	f000 f828 	bl	80051a0 <_init>
 8005150:	2600      	movs	r6, #0
 8005152:	4d0a      	ldr	r5, [pc, #40]	@ (800517c <__libc_init_array+0x40>)
 8005154:	4c0a      	ldr	r4, [pc, #40]	@ (8005180 <__libc_init_array+0x44>)
 8005156:	1b64      	subs	r4, r4, r5
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	42a6      	cmp	r6, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f855 3b04 	ldr.w	r3, [r5], #4
 8005164:	4798      	blx	r3
 8005166:	3601      	adds	r6, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f855 3b04 	ldr.w	r3, [r5], #4
 800516e:	4798      	blx	r3
 8005170:	3601      	adds	r6, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	0800523c 	.word	0x0800523c
 8005178:	0800523c 	.word	0x0800523c
 800517c:	0800523c 	.word	0x0800523c
 8005180:	08005240 	.word	0x08005240

08005184 <memcpy>:
 8005184:	440a      	add	r2, r1
 8005186:	4291      	cmp	r1, r2
 8005188:	f100 33ff 	add.w	r3, r0, #4294967295
 800518c:	d100      	bne.n	8005190 <memcpy+0xc>
 800518e:	4770      	bx	lr
 8005190:	b510      	push	{r4, lr}
 8005192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005196:	4291      	cmp	r1, r2
 8005198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800519c:	d1f9      	bne.n	8005192 <memcpy+0xe>
 800519e:	bd10      	pop	{r4, pc}

080051a0 <_init>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr

080051ac <_fini>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr
