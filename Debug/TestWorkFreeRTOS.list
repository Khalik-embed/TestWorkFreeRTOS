
TestWorkFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006258  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08006368  08006368  00007368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c4  080065c4  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080065c4  080065c4  000075c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065cc  080065cc  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065cc  080065cc  000075cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065d0  080065d0  000075d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080065d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002800  2000006c  08006640  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000286c  08006640  0000886c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a40  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386b  00000000  00000000  0001bad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0001f340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed7  00000000  00000000  00020690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019766  00000000  00000000  00021567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177f5  00000000  00000000  0003accd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009367c  00000000  00000000  000524c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5b3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  000e5b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000eaeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006350 	.word	0x08006350

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08006350 	.word	0x08006350

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <bsp_get_time_stamp>:

#include "stm32f1xx_hal.h"

#include "time_bsp.h"

uint32_t bsp_get_time_stamp(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000164:	f000 ffe6 	bl	8001134 <HAL_GetTick>
 8000168:	4603      	mov	r3, r0
}
 800016a:	4618      	mov	r0, r3
 800016c:	bd80      	pop	{r7, pc}
	...

08000170 <bsp_print_log>:

uint8_t *get_test_data(void){
	return &uart_disp_data;
}

status_t bsp_print_log(log_message_t * message){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	static log_message_t message_buf;
	message_buf.size = message->size;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a0d      	ldr	r2, [pc, #52]	@ (80001b4 <bsp_print_log+0x44>)
 800017e:	6013      	str	r3, [r2, #0]
	strcpy (message_buf.message, message->message);
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	3304      	adds	r3, #4
 8000184:	4619      	mov	r1, r3
 8000186:	480c      	ldr	r0, [pc, #48]	@ (80001b8 <bsp_print_log+0x48>)
 8000188:	f005 fc7e 	bl	8005a88 <strcpy>
	result = HAL_UART_Transmit_IT (&huart1, message_buf.message, message_buf.size);
 800018c:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <bsp_print_log+0x44>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	b29b      	uxth	r3, r3
 8000192:	461a      	mov	r2, r3
 8000194:	4908      	ldr	r1, [pc, #32]	@ (80001b8 <bsp_print_log+0x48>)
 8000196:	4809      	ldr	r0, [pc, #36]	@ (80001bc <bsp_print_log+0x4c>)
 8000198:	f002 f9ec 	bl	8002574 <HAL_UART_Transmit_IT>
 800019c:	4603      	mov	r3, r0
 800019e:	73fb      	strb	r3, [r7, #15]
	if (result == HAL_OK) {

	}
	return result == HAL_OK ? BSP_OK : BSP_ERROR;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	bf14      	ite	ne
 80001a6:	2301      	movne	r3, #1
 80001a8:	2300      	moveq	r3, #0
 80001aa:	b2db      	uxtb	r3, r3
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000094 	.word	0x20000094
 80001b8:	20000098 	.word	0x20000098
 80001bc:	200004fc 	.word	0x200004fc

080001c0 <bsp_transmit_uart_left>:


status_t bsp_transmit_uart_left(uint8_t data_byte){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result;
	result = HAL_UART_Transmit_IT (&huart2, &data_byte, AMOUNT_OF_BYTES_FOR_ISR_UART_UART_LEFT);
 80001ca:	1dfb      	adds	r3, r7, #7
 80001cc:	2201      	movs	r2, #1
 80001ce:	4619      	mov	r1, r3
 80001d0:	4807      	ldr	r0, [pc, #28]	@ (80001f0 <bsp_transmit_uart_left+0x30>)
 80001d2:	f002 f9cf 	bl	8002574 <HAL_UART_Transmit_IT>
 80001d6:	4603      	mov	r3, r0
 80001d8:	73fb      	strb	r3, [r7, #15]
	if (result == HAL_OK) {

	}
	return result == HAL_OK ? BSP_OK : BSP_ERROR;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	bf14      	ite	ne
 80001e0:	2301      	movne	r3, #1
 80001e2:	2300      	moveq	r3, #0
 80001e4:	b2db      	uxtb	r3, r3
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000544 	.word	0x20000544

080001f4 <bsp_transmit_uart_right>:

status_t bsp_transmit_uart_right(uint8_t data_byte){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result;
	result = HAL_UART_Transmit_IT (&huart3, &data_byte, AMOUNT_OF_BYTES_FOR_ISR_UART_UART_RIGHT);
 80001fe:	1dfb      	adds	r3, r7, #7
 8000200:	2201      	movs	r2, #1
 8000202:	4619      	mov	r1, r3
 8000204:	4807      	ldr	r0, [pc, #28]	@ (8000224 <bsp_transmit_uart_right+0x30>)
 8000206:	f002 f9b5 	bl	8002574 <HAL_UART_Transmit_IT>
 800020a:	4603      	mov	r3, r0
 800020c:	73fb      	strb	r3, [r7, #15]
	if (result == HAL_OK) {

	}
	return result == HAL_OK ? BSP_OK : BSP_ERROR;
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	2b00      	cmp	r3, #0
 8000212:	bf14      	ite	ne
 8000214:	2301      	movne	r3, #1
 8000216:	2300      	moveq	r3, #0
 8000218:	b2db      	uxtb	r3, r3
}
 800021a:	4618      	mov	r0, r3
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	2000058c 	.word	0x2000058c

08000228 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart){
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance){
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b17      	ldr	r3, [pc, #92]	@ (8000294 <HAL_UART_TxCpltCallback+0x6c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d108      	bne.n	800024e <HAL_UART_TxCpltCallback+0x26>
		osSignalSet(get_set_mem_log_thread_id(NULL), LOG_SIGNAL_TX);
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f9e9 	bl	8000614 <get_set_mem_log_thread_id>
 8000242:	4603      	mov	r3, r0
 8000244:	2101      	movs	r1, #1
 8000246:	4618      	mov	r0, r3
 8000248:	f002 ff84 	bl	8003154 <osSignalSet>
	} else if (huart->Instance == huart2.Instance){
		osSignalSet(get_set_uart_right_queue_id(NULL), UART_RIGHT_SIGNAL_TX);
	} else if (huart->Instance == huart3.Instance){
		osSignalSet(get_set_uart_left_queue_id(NULL), UART_LEFT_SIGNAL_TX);
	}
};
 800024c:	e01e      	b.n	800028c <HAL_UART_TxCpltCallback+0x64>
	} else if (huart->Instance == huart2.Instance){
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <HAL_UART_TxCpltCallback+0x70>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	429a      	cmp	r2, r3
 8000258:	d109      	bne.n	800026e <HAL_UART_TxCpltCallback+0x46>
		osSignalSet(get_set_uart_right_queue_id(NULL), UART_RIGHT_SIGNAL_TX);
 800025a:	2000      	movs	r0, #0
 800025c:	f000 fa16 	bl	800068c <get_set_uart_right_queue_id>
 8000260:	4603      	mov	r3, r0
 8000262:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000266:	4618      	mov	r0, r3
 8000268:	f002 ff74 	bl	8003154 <osSignalSet>
};
 800026c:	e00e      	b.n	800028c <HAL_UART_TxCpltCallback+0x64>
	} else if (huart->Instance == huart3.Instance){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <HAL_UART_TxCpltCallback+0x74>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	d108      	bne.n	800028c <HAL_UART_TxCpltCallback+0x64>
		osSignalSet(get_set_uart_left_queue_id(NULL), UART_LEFT_SIGNAL_TX);
 800027a:	2000      	movs	r0, #0
 800027c:	f000 f9f2 	bl	8000664 <get_set_uart_left_queue_id>
 8000280:	4603      	mov	r3, r0
 8000282:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000286:	4618      	mov	r0, r3
 8000288:	f002 ff64 	bl	8003154 <osSignalSet>
};
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200004fc 	.word	0x200004fc
 8000298:	20000544 	.word	0x20000544
 800029c:	2000058c 	.word	0x2000058c

080002a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b28      	ldr	r3, [pc, #160]	@ (8000350 <HAL_UART_RxCpltCallback+0xb0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d114      	bne.n	80002de <HAL_UART_RxCpltCallback+0x3e>
		uart_disp_data[1] = uart_disp_data[0];
 80002b4:	4b27      	ldr	r3, [pc, #156]	@ (8000354 <HAL_UART_RxCpltCallback+0xb4>)
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	4b26      	ldr	r3, [pc, #152]	@ (8000354 <HAL_UART_RxCpltCallback+0xb4>)
 80002ba:	705a      	strb	r2, [r3, #1]
		HAL_UART_Receive_IT (&huart1, uart_disp_data, AMOUNT_OF_BYTES_FOR_ISR_UART_DISP_LOG);
 80002bc:	2201      	movs	r2, #1
 80002be:	4925      	ldr	r1, [pc, #148]	@ (8000354 <HAL_UART_RxCpltCallback+0xb4>)
 80002c0:	4823      	ldr	r0, [pc, #140]	@ (8000350 <HAL_UART_RxCpltCallback+0xb0>)
 80002c2:	f002 f98c 	bl	80025de <HAL_UART_Receive_IT>
		osMessagePut(get_set_dispatcher_queue_id(NULL), (uint8_t)uart_disp_data[1], 0x00);
 80002c6:	2000      	movs	r0, #0
 80002c8:	f000 f9b8 	bl	800063c <get_set_dispatcher_queue_id>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a21      	ldr	r2, [pc, #132]	@ (8000354 <HAL_UART_RxCpltCallback+0xb4>)
 80002d0:	7852      	ldrb	r2, [r2, #1]
 80002d2:	4611      	mov	r1, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 f8f0 	bl	80034bc <osMessagePut>
	} else if (huart->Instance == huart3.Instance){
		uart_right_data[1] = uart_right_data[0];
		HAL_UART_Receive_IT (&huart3, uart_right_data, AMOUNT_OF_BYTES_FOR_ISR_UART_UART_RIGHT);
		osMessagePut(get_set_uart_right_queue_id(NULL), (uint8_t)uart_right_data[1], 0x00);
	}
}
 80002dc:	e034      	b.n	8000348 <HAL_UART_RxCpltCallback+0xa8>
	} else if (huart->Instance == huart2.Instance){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <HAL_UART_RxCpltCallback+0xb8>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d114      	bne.n	8000314 <HAL_UART_RxCpltCallback+0x74>
		uart_left_data[1] = uart_left_data[0];
 80002ea:	4b1c      	ldr	r3, [pc, #112]	@ (800035c <HAL_UART_RxCpltCallback+0xbc>)
 80002ec:	781a      	ldrb	r2, [r3, #0]
 80002ee:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <HAL_UART_RxCpltCallback+0xbc>)
 80002f0:	705a      	strb	r2, [r3, #1]
		HAL_UART_Receive_IT (&huart2, uart_left_data, AMOUNT_OF_BYTES_FOR_ISR_UART_UART_LEFT);
 80002f2:	2201      	movs	r2, #1
 80002f4:	4919      	ldr	r1, [pc, #100]	@ (800035c <HAL_UART_RxCpltCallback+0xbc>)
 80002f6:	4818      	ldr	r0, [pc, #96]	@ (8000358 <HAL_UART_RxCpltCallback+0xb8>)
 80002f8:	f002 f971 	bl	80025de <HAL_UART_Receive_IT>
		osMessagePut(get_set_uart_left_queue_id(NULL), (uint8_t)uart_left_data[1], 0x00);
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 f9b1 	bl	8000664 <get_set_uart_left_queue_id>
 8000302:	4603      	mov	r3, r0
 8000304:	4a15      	ldr	r2, [pc, #84]	@ (800035c <HAL_UART_RxCpltCallback+0xbc>)
 8000306:	7852      	ldrb	r2, [r2, #1]
 8000308:	4611      	mov	r1, r2
 800030a:	2200      	movs	r2, #0
 800030c:	4618      	mov	r0, r3
 800030e:	f003 f8d5 	bl	80034bc <osMessagePut>
}
 8000312:	e019      	b.n	8000348 <HAL_UART_RxCpltCallback+0xa8>
	} else if (huart->Instance == huart3.Instance){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <HAL_UART_RxCpltCallback+0xc0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	429a      	cmp	r2, r3
 800031e:	d113      	bne.n	8000348 <HAL_UART_RxCpltCallback+0xa8>
		uart_right_data[1] = uart_right_data[0];
 8000320:	4b10      	ldr	r3, [pc, #64]	@ (8000364 <HAL_UART_RxCpltCallback+0xc4>)
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <HAL_UART_RxCpltCallback+0xc4>)
 8000326:	705a      	strb	r2, [r3, #1]
		HAL_UART_Receive_IT (&huart3, uart_right_data, AMOUNT_OF_BYTES_FOR_ISR_UART_UART_RIGHT);
 8000328:	2201      	movs	r2, #1
 800032a:	490e      	ldr	r1, [pc, #56]	@ (8000364 <HAL_UART_RxCpltCallback+0xc4>)
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <HAL_UART_RxCpltCallback+0xc0>)
 800032e:	f002 f956 	bl	80025de <HAL_UART_Receive_IT>
		osMessagePut(get_set_uart_right_queue_id(NULL), (uint8_t)uart_right_data[1], 0x00);
 8000332:	2000      	movs	r0, #0
 8000334:	f000 f9aa 	bl	800068c <get_set_uart_right_queue_id>
 8000338:	4603      	mov	r3, r0
 800033a:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <HAL_UART_RxCpltCallback+0xc4>)
 800033c:	7852      	ldrb	r2, [r2, #1]
 800033e:	4611      	mov	r1, r2
 8000340:	2200      	movs	r2, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f003 f8ba 	bl	80034bc <osMessagePut>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200004fc 	.word	0x200004fc
 8000354:	20000090 	.word	0x20000090
 8000358:	20000544 	.word	0x20000544
 800035c:	20000088 	.word	0x20000088
 8000360:	2000058c 	.word	0x2000058c
 8000364:	2000008c 	.word	0x2000008c

08000368 <init_isr_uarts>:


void init_isr_uarts(void){
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT (&huart1, &uart_disp_data, AMOUNT_OF_BYTES_FOR_ISR_UART_DISP_LOG);
 800036c:	2201      	movs	r2, #1
 800036e:	4908      	ldr	r1, [pc, #32]	@ (8000390 <init_isr_uarts+0x28>)
 8000370:	4808      	ldr	r0, [pc, #32]	@ (8000394 <init_isr_uarts+0x2c>)
 8000372:	f002 f934 	bl	80025de <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT (&huart2, &uart_left_data, AMOUNT_OF_BYTES_FOR_ISR_UART_UART_LEFT);
 8000376:	2201      	movs	r2, #1
 8000378:	4907      	ldr	r1, [pc, #28]	@ (8000398 <init_isr_uarts+0x30>)
 800037a:	4808      	ldr	r0, [pc, #32]	@ (800039c <init_isr_uarts+0x34>)
 800037c:	f002 f92f 	bl	80025de <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT (&huart3, &uart_right_data, AMOUNT_OF_BYTES_FOR_ISR_UART_UART_RIGHT);
 8000380:	2201      	movs	r2, #1
 8000382:	4907      	ldr	r1, [pc, #28]	@ (80003a0 <init_isr_uarts+0x38>)
 8000384:	4807      	ldr	r0, [pc, #28]	@ (80003a4 <init_isr_uarts+0x3c>)
 8000386:	f002 f92a 	bl	80025de <HAL_UART_Receive_IT>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000090 	.word	0x20000090
 8000394:	200004fc 	.word	0x200004fc
 8000398:	20000088 	.word	0x20000088
 800039c:	20000544 	.word	0x20000544
 80003a0:	2000008c 	.word	0x2000008c
 80003a4:	2000058c 	.word	0x2000058c

080003a8 <log_print>:

log_message_t message_item;

uint8_t message_buf[MAX_LOG_INFO_WIDTH];

void log_print(LogLevel_t log_level, const char* message){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af02      	add	r7, sp, #8
 80003ae:	4603      	mov	r3, r0
 80003b0:	6039      	str	r1, [r7, #0]
 80003b2:	71fb      	strb	r3, [r7, #7]
	if (log_level >= LOG_LEVEL) {
		uint32_t time_stamp =  bsp_get_time_stamp();
 80003b4:	f7ff fed4 	bl	8000160 <bsp_get_time_stamp>
 80003b8:	60f8      	str	r0, [r7, #12]
		sprintf((char *)message_item.message, LOG_MESSAGE_TEMPLATE,
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <log_print+0x48>)
 80003be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	4613      	mov	r3, r2
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	490a      	ldr	r1, [pc, #40]	@ (80003f4 <log_print+0x4c>)
 80003cc:	480a      	ldr	r0, [pc, #40]	@ (80003f8 <log_print+0x50>)
 80003ce:	f005 faf5 	bl	80059bc <siprintf>
	         (unsigned int)time_stamp,
			 log_level_string[log_level], message);
		message_item.size = strlen((char *)message_item.message);
 80003d2:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <log_print+0x50>)
 80003d4:	f7ff febc 	bl	8000150 <strlen>
 80003d8:	4603      	mov	r3, r0
 80003da:	461a      	mov	r2, r3
 80003dc:	4b07      	ldr	r3, [pc, #28]	@ (80003fc <log_print+0x54>)
 80003de:	601a      	str	r2, [r3, #0]
		bsp_print_log(&message_item);
 80003e0:	4806      	ldr	r0, [pc, #24]	@ (80003fc <log_print+0x54>)
 80003e2:	f7ff fec5 	bl	8000170 <bsp_print_log>
	}
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000
 80003f4:	0800638c 	.word	0x0800638c
 80003f8:	2000011c 	.word	0x2000011c
 80003fc:	20000118 	.word	0x20000118

08000400 <log_print_from_Queue>:

void log_print_from_Queue(log_message_t * log_message){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	bsp_print_log((log_message_t *)log_message);
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f7ff feb1 	bl	8000170 <bsp_print_log>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <log_Queue_put>:


uint32_t log_Queue_put(LogLevel_t log_level, const uint8_t * message){
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
	uint32_t result;
	if (log_level >= LOG_LEVEL) {
		log_message_t    *message_item_ptr;
		message_item_ptr = osPoolAlloc(get_set_log_pool_id(NULL));
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f945 	bl	80006b4 <get_set_log_pool_id>
 800042a:	4603      	mov	r3, r0
 800042c:	4618      	mov	r0, r3
 800042e:	f002 ff7a 	bl	8003326 <osPoolAlloc>
 8000432:	6178      	str	r0, [r7, #20]
		uint32_t time_stamp =  bsp_get_time_stamp();
 8000434:	f7ff fe94 	bl	8000160 <bsp_get_time_stamp>
 8000438:	6138      	str	r0, [r7, #16]
		sprintf((char *)message_item_ptr->message, LOG_MESSAGE_TEMPLATE,
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	1d18      	adds	r0, r3, #4
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4a10      	ldr	r2, [pc, #64]	@ (8000484 <log_Queue_put+0x6c>)
 8000442:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	4613      	mov	r3, r2
 800044c:	693a      	ldr	r2, [r7, #16]
 800044e:	490e      	ldr	r1, [pc, #56]	@ (8000488 <log_Queue_put+0x70>)
 8000450:	f005 fab4 	bl	80059bc <siprintf>
	         (unsigned int)time_stamp,
			 log_level_string[log_level], message);
		message_item_ptr->size = strlen((char *)message_item_ptr->message);
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	3304      	adds	r3, #4
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff fe79 	bl	8000150 <strlen>
 800045e:	4603      	mov	r3, r0
 8000460:	461a      	mov	r2, r3
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	601a      	str	r2, [r3, #0]
		result = (uint32_t)osMessagePut(get_set_log_queue_id(NULL), (uint32_t)message_item_ptr, osWaitForever);
 8000466:	2000      	movs	r0, #0
 8000468:	f000 f938 	bl	80006dc <get_set_log_queue_id>
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	f04f 32ff 	mov.w	r2, #4294967295
 8000472:	4619      	mov	r1, r3
 8000474:	f003 f822 	bl	80034bc <osMessagePut>
 8000478:	60f8      	str	r0, [r7, #12]
	}
	return result;
 800047a:	68fb      	ldr	r3, [r7, #12]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000000 	.word	0x20000000
 8000488:	0800638c 	.word	0x0800638c

0800048c <assembly_str_until_end>:
#include "log.h"
#include "bsp.h"

uint8_t command_line[MAX_LOG_INFO_WIDTH];
uint8_t test_string[40];
status_assembly_t assembly_str_until_end(uint8_t data_byte){
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
	status_assembly_t result = READING;
 8000496:	2300      	movs	r3, #0
 8000498:	73fb      	strb	r3, [r7, #15]
	static uint8_t size = 0;
	if ((size < MAX_LOG_INFO_WIDTH)
 800049a:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <assembly_str_until_end+0x78>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	db1b      	blt.n	80004dc <assembly_str_until_end+0x50>
		&& (data_byte != END_OF_STR)
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d018      	beq.n	80004dc <assembly_str_until_end+0x50>
		&& (data_byte != CR_SYMBOL)
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b0d      	cmp	r3, #13
 80004ae:	d015      	beq.n	80004dc <assembly_str_until_end+0x50>
		&& (data_byte != LF_SYMBOL)) {
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b0a      	cmp	r3, #10
 80004b4:	d012      	beq.n	80004dc <assembly_str_until_end+0x50>
		command_line[size] = data_byte;
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <assembly_str_until_end+0x78>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4619      	mov	r1, r3
 80004bc:	4a12      	ldr	r2, [pc, #72]	@ (8000508 <assembly_str_until_end+0x7c>)
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	5453      	strb	r3, [r2, r1]
		command_line[size+1] = 0;
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <assembly_str_until_end+0x78>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	3301      	adds	r3, #1
 80004c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000508 <assembly_str_until_end+0x7c>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	54d1      	strb	r1, [r2, r3]
		size ++;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <assembly_str_until_end+0x78>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	3301      	adds	r3, #1
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <assembly_str_until_end+0x78>)
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	e00c      	b.n	80004f6 <assembly_str_until_end+0x6a>
	} else if (size == MAX_LOG_INFO_WIDTH){
 80004dc:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <assembly_str_until_end+0x78>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b80      	cmp	r3, #128	@ 0x80
 80004e2:	d103      	bne.n	80004ec <assembly_str_until_end+0x60>
		size = 0;
 80004e4:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <assembly_str_until_end+0x78>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e004      	b.n	80004f6 <assembly_str_until_end+0x6a>
	} else {
		result = COMMAND_READY;
 80004ec:	2301      	movs	r3, #1
 80004ee:	73fb      	strb	r3, [r7, #15]
		size = 0;
 80004f0:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <assembly_str_until_end+0x78>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
	}
	return result;
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000021c 	.word	0x2000021c
 8000508:	2000019c 	.word	0x2000019c

0800050c <read_until_end>:

void read_until_end(uint8_t * data_ptr, osMessageQId queue_id) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	while(*data_ptr != 0){
 8000516:	e00a      	b.n	800052e <read_until_end+0x22>
		osMessagePut(queue_id, (uint8_t)*data_ptr, osWaitForever);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	f04f 32ff 	mov.w	r2, #4294967295
 8000520:	4619      	mov	r1, r3
 8000522:	6838      	ldr	r0, [r7, #0]
 8000524:	f002 ffca 	bl	80034bc <osMessagePut>
		data_ptr++;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3301      	adds	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
	while(*data_ptr != 0){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1f0      	bne.n	8000518 <read_until_end+0xc>
	}
}
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <command_parser>:


void command_parser(uint8_t data_byte){
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	commands_t command;
	uint8_t * data_str_ptr;
	status_assembly_t status_assembly;
	status_assembly = assembly_str_until_end(data_byte);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ff9d 	bl	800048c <assembly_str_until_end>
 8000552:	4603      	mov	r3, r0
 8000554:	73fb      	strb	r3, [r7, #15]
	//log_Queue_put(LOG_INFO, (uint8_t *)command_line);
	if (status_assembly == COMMAND_READY) {
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d147      	bne.n	80005ec <command_parser+0xac>
		log_Queue_put(LOG_INFO, command_line);
 800055c:	4925      	ldr	r1, [pc, #148]	@ (80005f4 <command_parser+0xb4>)
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ff5a 	bl	8000418 <log_Queue_put>
		if (strncmp(command_line, COMMAND_SEND_UART_LEFT, strlen(COMMAND_SEND_UART_LEFT)-1) == 0) {
 8000564:	2209      	movs	r2, #9
 8000566:	4924      	ldr	r1, [pc, #144]	@ (80005f8 <command_parser+0xb8>)
 8000568:	4822      	ldr	r0, [pc, #136]	@ (80005f4 <command_parser+0xb4>)
 800056a:	f005 fa4f 	bl	8005a0c <strncmp>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10c      	bne.n	800058e <command_parser+0x4e>
			log_Queue_put(LOG_INFO, (uint8_t *)"Get command left");
 8000574:	4921      	ldr	r1, [pc, #132]	@ (80005fc <command_parser+0xbc>)
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff ff4e 	bl	8000418 <log_Queue_put>
			command = UART_LEFT_SEND;
 800057c:	2300      	movs	r3, #0
 800057e:	75fb      	strb	r3, [r7, #23]
			data_str_ptr = &command_line[strlen(COMMAND_SEND_UART_LEFT)];
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <command_parser+0xc0>)
 8000582:	613b      	str	r3, [r7, #16]
			log_Queue_put(LOG_INFO, (uint8_t *)data_str_ptr);
 8000584:	6939      	ldr	r1, [r7, #16]
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff ff46 	bl	8000418 <log_Queue_put>
 800058c:	e00e      	b.n	80005ac <command_parser+0x6c>
		} else if (strncmp(command_line, COMMAND_SEND_UART_RIGHT, strlen(COMMAND_SEND_UART_RIGHT)) == 0){
 800058e:	220b      	movs	r2, #11
 8000590:	491c      	ldr	r1, [pc, #112]	@ (8000604 <command_parser+0xc4>)
 8000592:	4818      	ldr	r0, [pc, #96]	@ (80005f4 <command_parser+0xb4>)
 8000594:	f005 fa3a 	bl	8005a0c <strncmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d104      	bne.n	80005a8 <command_parser+0x68>
			command = UART_RIGHT_SEND;
 800059e:	2301      	movs	r3, #1
 80005a0:	75fb      	strb	r3, [r7, #23]
			data_str_ptr = &command_line[strlen(COMMAND_SEND_UART_RIGHT)];
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <command_parser+0xc8>)
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	e001      	b.n	80005ac <command_parser+0x6c>
		} else {
			command = NO_COMMAND;
 80005a8:	2302      	movs	r3, #2
 80005aa:	75fb      	strb	r3, [r7, #23]
		}

		if (command == UART_LEFT_SEND) {
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d10c      	bne.n	80005cc <command_parser+0x8c>
			read_until_end(data_str_ptr, get_set_uart_left_queue_id(NULL));
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f856 	bl	8000664 <get_set_uart_left_queue_id>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4619      	mov	r1, r3
 80005bc:	6938      	ldr	r0, [r7, #16]
 80005be:	f7ff ffa5 	bl	800050c <read_until_end>
			log_Queue_put(LOG_INFO, (uint8_t *)"Send left");
 80005c2:	4912      	ldr	r1, [pc, #72]	@ (800060c <command_parser+0xcc>)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff ff27 	bl	8000418 <log_Queue_put>
			read_until_end(data_str_ptr, get_set_uart_right_queue_id(NULL));
		} else{
			log_Queue_put(LOG_ERROR, (uint8_t *)"ERROR PARSE COMMAND");
		}
	}
}
 80005ca:	e00f      	b.n	80005ec <command_parser+0xac>
		} else if ( command == UART_RIGHT_SEND) {
 80005cc:	7dfb      	ldrb	r3, [r7, #23]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d108      	bne.n	80005e4 <command_parser+0xa4>
			read_until_end(data_str_ptr, get_set_uart_right_queue_id(NULL));
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f85a 	bl	800068c <get_set_uart_right_queue_id>
 80005d8:	4603      	mov	r3, r0
 80005da:	4619      	mov	r1, r3
 80005dc:	6938      	ldr	r0, [r7, #16]
 80005de:	f7ff ff95 	bl	800050c <read_until_end>
}
 80005e2:	e003      	b.n	80005ec <command_parser+0xac>
			log_Queue_put(LOG_ERROR, (uint8_t *)"ERROR PARSE COMMAND");
 80005e4:	490a      	ldr	r1, [pc, #40]	@ (8000610 <command_parser+0xd0>)
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff ff16 	bl	8000418 <log_Queue_put>
}
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000019c 	.word	0x2000019c
 80005f8:	080063b8 	.word	0x080063b8
 80005fc:	080063c4 	.word	0x080063c4
 8000600:	200001a6 	.word	0x200001a6
 8000604:	080063d8 	.word	0x080063d8
 8000608:	200001a7 	.word	0x200001a7
 800060c:	080063e4 	.word	0x080063e4
 8000610:	080063f0 	.word	0x080063f0

08000614 <get_set_mem_log_thread_id>:
 *      Author: outlet
 */

#include "set_get.h"

osThreadId get_set_mem_log_thread_id(osThreadId thread_id){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	static osThreadId log_osThreadId;
	if (thread_id != NULL) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <get_set_mem_log_thread_id+0x14>
		log_osThreadId = thread_id;
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <get_set_mem_log_thread_id+0x24>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6013      	str	r3, [r2, #0]
	}
	return log_osThreadId;
 8000628:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <get_set_mem_log_thread_id+0x24>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000220 	.word	0x20000220

0800063c <get_set_dispatcher_queue_id>:

osThreadId get_set_dispatcher_queue_id(osThreadId queue_id){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	static osThreadId dispatcher_queueId;
	if (queue_id != NULL) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <get_set_dispatcher_queue_id+0x14>
		dispatcher_queueId = queue_id;
 800064a:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <get_set_dispatcher_queue_id+0x24>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6013      	str	r3, [r2, #0]
	}
	return dispatcher_queueId;
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <get_set_dispatcher_queue_id+0x24>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000224 	.word	0x20000224

08000664 <get_set_uart_left_queue_id>:

osThreadId get_set_uart_left_queue_id(osThreadId queue_id){
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	static osThreadId uart_left_queueId;
	if (queue_id != NULL) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <get_set_uart_left_queue_id+0x14>
		uart_left_queueId = queue_id;
 8000672:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <get_set_uart_left_queue_id+0x24>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6013      	str	r3, [r2, #0]
	}
	return uart_left_queueId;
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <get_set_uart_left_queue_id+0x24>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000228 	.word	0x20000228

0800068c <get_set_uart_right_queue_id>:

osThreadId get_set_uart_right_queue_id(osThreadId queue_id){
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	static osThreadId uart_right_queueId;
	if (queue_id != NULL) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <get_set_uart_right_queue_id+0x14>
		uart_right_queueId = queue_id;
 800069a:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <get_set_uart_right_queue_id+0x24>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6013      	str	r3, [r2, #0]
	}
	return uart_right_queueId;
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <get_set_uart_right_queue_id+0x24>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000022c 	.word	0x2000022c

080006b4 <get_set_log_pool_id>:

osPoolId get_set_log_pool_id(osPoolId pool_id_new){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	static osPoolId pool_id = NULL;
	if (pool_id_new != NULL){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <get_set_log_pool_id+0x14>
		pool_id = pool_id_new;
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <get_set_log_pool_id+0x24>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6013      	str	r3, [r2, #0]
	}
	return pool_id;
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <get_set_log_pool_id+0x24>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000230 	.word	0x20000230

080006dc <get_set_log_queue_id>:

osMessageQId get_set_log_queue_id(osMessageQId queue_id_new){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	static osPoolId queue_id = NULL;
	if (queue_id_new != NULL){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <get_set_log_queue_id+0x14>
		queue_id = queue_id_new;
 80006ea:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <get_set_log_queue_id+0x24>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6013      	str	r3, [r2, #0]
	}
	return queue_id;
 80006f0:	4b03      	ldr	r3, [pc, #12]	@ (8000700 <get_set_log_queue_id+0x24>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000234 	.word	0x20000234

08000704 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4a06      	ldr	r2, [pc, #24]	@ (800072c <vApplicationGetIdleTaskMemory+0x28>)
 8000714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4a05      	ldr	r2, [pc, #20]	@ (8000730 <vApplicationGetIdleTaskMemory+0x2c>)
 800071a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	2000025c 	.word	0x2000025c
 8000730:	200002b0 	.word	0x200002b0

08000734 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b0ac      	sub	sp, #176	@ 0xb0
 8000738:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LogQueue */
  osMessageQDef(LogQueue, 8, uint32_t);
 800073a:	4b57      	ldr	r3, [pc, #348]	@ (8000898 <MX_FREERTOS_Init+0x164>)
 800073c:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8000740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LogQueueHandle = osMessageCreate(osMessageQ(LogQueue), NULL);
 8000746:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fe8c 	bl	800346a <osMessageCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a51      	ldr	r2, [pc, #324]	@ (800089c <MX_FREERTOS_Init+0x168>)
 8000756:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartLeft */
  osMessageQDef(UartLeft, 128, uint8_t);
 8000758:	4b51      	ldr	r3, [pc, #324]	@ (80008a0 <MX_FREERTOS_Init+0x16c>)
 800075a:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800075e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartLeftHandle = osMessageCreate(osMessageQ(UartLeft), NULL);
 8000764:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fe7d 	bl	800346a <osMessageCreate>
 8000770:	4603      	mov	r3, r0
 8000772:	4a4c      	ldr	r2, [pc, #304]	@ (80008a4 <MX_FREERTOS_Init+0x170>)
 8000774:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartRight */
  osMessageQDef(UartRight, 128, uint8_t);
 8000776:	4b4a      	ldr	r3, [pc, #296]	@ (80008a0 <MX_FREERTOS_Init+0x16c>)
 8000778:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 800077c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartRightHandle = osMessageCreate(osMessageQ(UartRight), NULL);
 8000782:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fe6e 	bl	800346a <osMessageCreate>
 800078e:	4603      	mov	r3, r0
 8000790:	4a45      	ldr	r2, [pc, #276]	@ (80008a8 <MX_FREERTOS_Init+0x174>)
 8000792:	6013      	str	r3, [r2, #0]

  /* definition and creation of DispQueue */
  osMessageQDef(DispQueue, 128, uint8_t);
 8000794:	4b42      	ldr	r3, [pc, #264]	@ (80008a0 <MX_FREERTOS_Init+0x16c>)
 8000796:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800079a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800079c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DispQueueHandle = osMessageCreate(osMessageQ(DispQueue), NULL);
 80007a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fe5f 	bl	800346a <osMessageCreate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a3f      	ldr	r2, [pc, #252]	@ (80008ac <MX_FREERTOS_Init+0x178>)
 80007b0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DispatcherTask */
  osThreadDef(DispatcherTask, StartDispacherTask, osPriorityNormal, 0, 256);
 80007b2:	4b3f      	ldr	r3, [pc, #252]	@ (80008b0 <MX_FREERTOS_Init+0x17c>)
 80007b4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80007b8:	461d      	mov	r5, r3
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DispatcherTaskHandle = osThreadCreate(osThread(DispatcherTask), NULL);
 80007c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fc62 	bl	8003096 <osThreadCreate>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a37      	ldr	r2, [pc, #220]	@ (80008b4 <MX_FREERTOS_Init+0x180>)
 80007d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LogTask */
  osThreadDef(LogTask, StartLogTask, osPriorityLow, 0, 512);
 80007d8:	4b37      	ldr	r3, [pc, #220]	@ (80008b8 <MX_FREERTOS_Init+0x184>)
 80007da:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80007de:	461d      	mov	r5, r3
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LogTaskHandle = osThreadCreate(osThread(LogTask), NULL);
 80007ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fc4f 	bl	8003096 <osThreadCreate>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4a30      	ldr	r2, [pc, #192]	@ (80008bc <MX_FREERTOS_Init+0x188>)
 80007fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTLeftTask */
  osThreadDef(UARTLeftTask, StartUARTLeftTask, osPriorityLow, 0, 128);
 80007fe:	4b30      	ldr	r3, [pc, #192]	@ (80008c0 <MX_FREERTOS_Init+0x18c>)
 8000800:	f107 041c 	add.w	r4, r7, #28
 8000804:	461d      	mov	r5, r3
 8000806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800080e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTLeftTaskHandle = osThreadCreate(osThread(UARTLeftTask), NULL);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fc3c 	bl	8003096 <osThreadCreate>
 800081e:	4603      	mov	r3, r0
 8000820:	4a28      	ldr	r2, [pc, #160]	@ (80008c4 <MX_FREERTOS_Init+0x190>)
 8000822:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTRightTask */
  osThreadDef(UARTRightTask, StartUARTRightTask, osPriorityLow, 0, 128);
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <MX_FREERTOS_Init+0x194>)
 8000826:	463c      	mov	r4, r7
 8000828:	461d      	mov	r5, r3
 800082a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTRightTaskHandle = osThreadCreate(osThread(UARTRightTask), NULL);
 8000836:	463b      	mov	r3, r7
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fc2b 	bl	8003096 <osThreadCreate>
 8000840:	4603      	mov	r3, r0
 8000842:	4a22      	ldr	r2, [pc, #136]	@ (80008cc <MX_FREERTOS_Init+0x198>)
 8000844:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  LogMemHandle = osPoolCreate(osPool(LogMem));
 8000846:	4822      	ldr	r0, [pc, #136]	@ (80008d0 <MX_FREERTOS_Init+0x19c>)
 8000848:	f002 fd10 	bl	800326c <osPoolCreate>
 800084c:	4603      	mov	r3, r0
 800084e:	4a21      	ldr	r2, [pc, #132]	@ (80008d4 <MX_FREERTOS_Init+0x1a0>)
 8000850:	6013      	str	r3, [r2, #0]
  get_set_log_pool_id(LogMemHandle);
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_FREERTOS_Init+0x1a0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff2c 	bl	80006b4 <get_set_log_pool_id>
  get_set_log_queue_id(LogQueueHandle);
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_FREERTOS_Init+0x168>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff3b 	bl	80006dc <get_set_log_queue_id>
  get_set_dispatcher_queue_id(DispQueueHandle);
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_FREERTOS_Init+0x178>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fee6 	bl	800063c <get_set_dispatcher_queue_id>
  get_set_uart_left_queue_id(UartLeftHandle);
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_FREERTOS_Init+0x170>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fef5 	bl	8000664 <get_set_uart_left_queue_id>
  get_set_uart_right_queue_id(UartRightHandle);
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_FREERTOS_Init+0x174>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff04 	bl	800068c <get_set_uart_right_queue_id>

  get_set_mem_log_thread_id(LogTaskHandle);
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_FREERTOS_Init+0x188>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fec3 	bl	8000614 <get_set_mem_log_thread_id>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800088e:	bf00      	nop
 8000890:	37b0      	adds	r7, #176	@ 0xb0
 8000892:	46bd      	mov	sp, r7
 8000894:	bdb0      	pop	{r4, r5, r7, pc}
 8000896:	bf00      	nop
 8000898:	08006404 	.word	0x08006404
 800089c:	2000024c 	.word	0x2000024c
 80008a0:	08006414 	.word	0x08006414
 80008a4:	20000250 	.word	0x20000250
 80008a8:	20000254 	.word	0x20000254
 80008ac:	20000258 	.word	0x20000258
 80008b0:	08006434 	.word	0x08006434
 80008b4:	2000023c 	.word	0x2000023c
 80008b8:	08006458 	.word	0x08006458
 80008bc:	20000240 	.word	0x20000240
 80008c0:	08006484 	.word	0x08006484
 80008c4:	20000244 	.word	0x20000244
 80008c8:	080064b0 	.word	0x080064b0
 80008cc:	20000248 	.word	0x20000248
 80008d0:	08006558 	.word	0x08006558
 80008d4:	20000238 	.word	0x20000238

080008d8 <StartDispacherTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDispacherTask */
void StartDispacherTask(void const * argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispacherTask */
	osEvent  queue_evt;
	init_isr_uarts();
 80008e0:	f7ff fd42 	bl	8000368 <init_isr_uarts>
	log_Queue_put(LOG_INFO, (uint8_t *)" ");
 80008e4:	4911      	ldr	r1, [pc, #68]	@ (800092c <StartDispacherTask+0x54>)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fd96 	bl	8000418 <log_Queue_put>
	log_Queue_put(LOG_INFO, (uint8_t *)"Start work, you can send:");
 80008ec:	4910      	ldr	r1, [pc, #64]	@ (8000930 <StartDispacherTask+0x58>)
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fd92 	bl	8000418 <log_Queue_put>
	log_Queue_put(LOG_INFO, (uint8_t *)"LEFT SEND:\"SOME_DATA\"");
 80008f4:	490f      	ldr	r1, [pc, #60]	@ (8000934 <StartDispacherTask+0x5c>)
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff fd8e 	bl	8000418 <log_Queue_put>
	log_Queue_put(LOG_INFO, (uint8_t *)"RIGHT SEND:\"SOME_DATA\"");
 80008fc:	490e      	ldr	r1, [pc, #56]	@ (8000938 <StartDispacherTask+0x60>)
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fd8a 	bl	8000418 <log_Queue_put>
  /* Infinite loop */
  for(;;)
  {
	queue_evt = osMessageGet(DispQueueHandle, osWaitForever);
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <StartDispacherTask+0x64>)
 8000906:	6819      	ldr	r1, [r3, #0]
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fe13 	bl	800353c <osMessageGet>
	//start_isr_uart_disp();
	if (queue_evt.status == osEventMessage){
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b10      	cmp	r3, #16
 800091a:	d104      	bne.n	8000926 <StartDispacherTask+0x4e>
		command_parser((uint8_t)queue_evt.value.p);
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe0d 	bl	8000540 <command_parser>
	}
	osThreadYield();
 8000926:	f002 fc03 	bl	8003130 <osThreadYield>
	queue_evt = osMessageGet(DispQueueHandle, osWaitForever);
 800092a:	e7eb      	b.n	8000904 <StartDispacherTask+0x2c>
 800092c:	080064cc 	.word	0x080064cc
 8000930:	080064d0 	.word	0x080064d0
 8000934:	080064ec 	.word	0x080064ec
 8000938:	08006504 	.word	0x08006504
 800093c:	20000258 	.word	0x20000258

08000940 <StartLogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogTask */
void StartLogTask(void const * argument)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	osEvent  signal_evt;

  /* Infinite loop */
  for(;;)
  {
	  queue_evt = osMessageGet(LogQueueHandle, osWaitForever);
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <StartLogTask+0x50>)
 800094a:	6819      	ldr	r1, [r3, #0]
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fdf1 	bl	800353c <osMessageGet>
    if (queue_evt.status == osEventMessage) {
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	2b10      	cmp	r3, #16
 800095e:	d103      	bne.n	8000968 <StartLogTask+0x28>
    	log_print_from_Queue(queue_evt.value.p);
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fd4c 	bl	8000400 <log_print_from_Queue>
    }
    signal_evt = osSignalWait (LOG_SIGNAL_TX, osWaitForever);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	2101      	movs	r1, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f002 fc2e 	bl	80031d4 <osSignalWait>
    if(signal_evt.status == osEventSignal){
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	2b08      	cmp	r3, #8
 800097c:	d1e4      	bne.n	8000948 <StartLogTask+0x8>
    	osPoolFree(LogMemHandle, queue_evt.value.p);
 800097e:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <StartLogTask+0x54>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f002 fd2f 	bl	80033ea <osPoolFree>
	  queue_evt = osMessageGet(LogQueueHandle, osWaitForever);
 800098c:	e7dc      	b.n	8000948 <StartLogTask+0x8>
 800098e:	bf00      	nop
 8000990:	2000024c 	.word	0x2000024c
 8000994:	20000238 	.word	0x20000238

08000998 <StartUARTLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTLeftTask */
void StartUARTLeftTask(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartUARTLeftTask */
	osEvent  queue_evt;
  /* Infinite loop */
  for(;;)
  {
	 queue_evt = osMessageGet(UartLeftHandle, osWaitForever);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <StartUARTLeftTask+0x44>)
 80009a2:	6819      	ldr	r1, [r3, #0]
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 fdc5 	bl	800353c <osMessageGet>
	 if (queue_evt.status == osEventMessage){
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	2b10      	cmp	r3, #16
 80009b6:	d108      	bne.n	80009ca <StartUARTLeftTask+0x32>
		 bsp_transmit_uart_right((uint8_t)queue_evt.value.p);
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc19 	bl	80001f4 <bsp_transmit_uart_right>
		 log_Queue_put(LOG_INFO, (uint8_t *)"GET DATA LEFT");
 80009c2:	4907      	ldr	r1, [pc, #28]	@ (80009e0 <StartUARTLeftTask+0x48>)
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fd27 	bl	8000418 <log_Queue_put>
	  }
	 osSignalWait (UART_RIGHT_SIGNAL_TX, osWaitForever); // wait until send
 80009ca:	463b      	mov	r3, r7
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 fbfd 	bl	80031d4 <osSignalWait>
	 queue_evt = osMessageGet(UartLeftHandle, osWaitForever);
 80009da:	e7e1      	b.n	80009a0 <StartUARTLeftTask+0x8>
 80009dc:	20000250 	.word	0x20000250
 80009e0:	0800651c 	.word	0x0800651c

080009e4 <StartUARTRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTRightTask */
void StartUARTRightTask(void const * argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartUARTRightTask */
	osEvent  queue_evt;
  /* Infinite loop */
  for(;;)
  {
	  queue_evt = osMessageGet(UartRightHandle, osWaitForever);
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <StartUARTRightTask+0x44>)
 80009ee:	6819      	ldr	r1, [r3, #0]
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fd9f 	bl	800353c <osMessageGet>
	  if (queue_evt.status == osEventMessage){
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	2b10      	cmp	r3, #16
 8000a02:	d108      	bne.n	8000a16 <StartUARTRightTask+0x32>
		  	  bsp_transmit_uart_left((uint8_t)queue_evt.value.p);
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fbd9 	bl	80001c0 <bsp_transmit_uart_left>
		  	  log_Queue_put(LOG_INFO, (uint8_t *)"GET DATA RIGHT");
 8000a0e:	4907      	ldr	r1, [pc, #28]	@ (8000a2c <StartUARTRightTask+0x48>)
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fd01 	bl	8000418 <log_Queue_put>
		  }
	  osSignalWait (UART_LEFT_SIGNAL_TX, osWaitForever); // wait until send
 8000a16:	463b      	mov	r3, r7
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fbd7 	bl	80031d4 <osSignalWait>
	  queue_evt = osMessageGet(UartRightHandle, osWaitForever);
 8000a26:	e7e1      	b.n	80009ec <StartUARTRightTask+0x8>
 8000a28:	20000254 	.word	0x20000254
 8000a2c:	0800652c 	.word	0x0800652c

08000a30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a13      	ldr	r2, [pc, #76]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0320 	and.w	r3, r3, #32
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	4a07      	ldr	r2, [pc, #28]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6193      	str	r3, [r2, #24]
 8000a72:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <MX_GPIO_Init+0x58>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fb28 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f814 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f7ff ffca 	bl	8000a30 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a9c:	f000 f9a6 	bl	8000dec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aa0:	f000 f9ce 	bl	8000e40 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000aa4:	f000 f9f6 	bl	8000e94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  log_print(LOG_INFO, "BSP INIT COMPLETE");
 8000aa8:	4904      	ldr	r1, [pc, #16]	@ (8000abc <main+0x30>)
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fc7c 	bl	80003a8 <log_print>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ab0:	f7ff fe40 	bl	8000734 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ab4:	f002 fae8 	bl	8003088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <main+0x2c>
 8000abc:	0800653c 	.word	0x0800653c

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b090      	sub	sp, #64	@ 0x40
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	2228      	movs	r2, #40	@ 0x28
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 ff94 	bl	80059fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000afe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fe33 	bl	8001774 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b14:	f000 f82e 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2102      	movs	r1, #2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f8a0 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b3e:	f000 f819 	bl	8000b74 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000b42:	f001 f983 	bl	8001e4c <HAL_RCC_EnableCSS>
}
 8000b46:	bf00      	nop
 8000b48:	3740      	adds	r7, #64	@ 0x40
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 fad5 	bl	8001110 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40000800 	.word	0x40000800

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <Error_Handler+0x8>

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_MspInit+0x68>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <HAL_MspInit+0x68>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6193      	str	r3, [r2, #24]
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_MspInit+0x68>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_MspInit+0x68>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4a11      	ldr	r2, [pc, #68]	@ (8000be8 <HAL_MspInit+0x68>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	61d3      	str	r3, [r2, #28]
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_MspInit+0x68>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210f      	movs	r1, #15
 8000bba:	f06f 0001 	mvn.w	r0, #1
 8000bbe:	f000 fb78 	bl	80012b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_MspInit+0x6c>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <HAL_MspInit+0x6c>)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010000 	.word	0x40010000

08000bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	@ 0x38
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	@ (8000cd8 <HAL_InitTick+0xe8>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a33      	ldr	r2, [pc, #204]	@ (8000cd8 <HAL_InitTick+0xe8>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <HAL_InitTick+0xe8>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1e:	f107 0210 	add.w	r2, r7, #16
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 f9a1 	bl	8001f70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c38:	f001 f972 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8000c3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c3e:	e004      	b.n	8000c4a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c40:	f001 f96e 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8000c44:	4603      	mov	r3, r0
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c4c:	4a23      	ldr	r2, [pc, #140]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9b      	lsrs	r3, r3, #18
 8000c54:	3b01      	subs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000c58:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <HAL_InitTick+0xf4>)
 8000c5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c64:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000c66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c6a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000c7e:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c80:	f001 f9de 	bl	8002040 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d11b      	bne.n	8000cca <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000c92:	4813      	ldr	r0, [pc, #76]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c94:	f001 fa2c 	bl	80020f0 <HAL_TIM_Base_Start_IT>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d111      	bne.n	8000cca <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ca6:	201e      	movs	r0, #30
 8000ca8:	f000 fb1f 	bl	80012ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d808      	bhi.n	8000cc4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	201e      	movs	r0, #30
 8000cb8:	f000 fafb 	bl	80012b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_InitTick+0xf8>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e002      	b.n	8000cca <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3738      	adds	r7, #56	@ 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	200004b0 	.word	0x200004b0
 8000ce4:	40000800 	.word	0x40000800
 8000ce8:	20000010 	.word	0x20000010

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000cf0:	f001 f96e 	bl	8001fd0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <NMI_Handler+0x8>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d28:	4802      	ldr	r0, [pc, #8]	@ (8000d34 <TIM4_IRQHandler+0x10>)
 8000d2a:	f001 fa33 	bl	8002194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200004b0 	.word	0x200004b0

08000d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	@ (8000d48 <USART1_IRQHandler+0x10>)
 8000d3e:	f001 fc73 	bl	8002628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200004fc 	.word	0x200004fc

08000d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <USART2_IRQHandler+0x10>)
 8000d52:	f001 fc69 	bl	8002628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000544 	.word	0x20000544

08000d60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <USART3_IRQHandler+0x10>)
 8000d66:	f001 fc5f 	bl	8002628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000058c 	.word	0x2000058c

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f004 fe44 	bl	8005a30 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20005000 	.word	0x20005000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	200004f8 	.word	0x200004f8
 8000ddc:	20002870 	.word	0x20002870

08000de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <MX_USART1_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f001 fb56 	bl	80024d4 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f7ff fea1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200004fc 	.word	0x200004fc
 8000e3c:	40013800 	.word	0x40013800

08000e40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <MX_USART2_UART_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e78:	f001 fb2c 	bl	80024d4 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e82:	f7ff fe77 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000544 	.word	0x20000544
 8000e90:	40004400 	.word	0x40004400

08000e94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <MX_USART3_UART_Init+0x50>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_USART3_UART_Init+0x4c>)
 8000ecc:	f001 fb02 	bl	80024d4 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ed6:	f7ff fe4d 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000058c 	.word	0x2000058c
 8000ee4:	40004800 	.word	0x40004800

08000ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	@ 0x30
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a5f      	ldr	r2, [pc, #380]	@ (8001080 <HAL_UART_MspInit+0x198>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d13a      	bne.n	8000f7e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f08:	4b5e      	ldr	r3, [pc, #376]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b5b      	ldr	r3, [pc, #364]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b58      	ldr	r3, [pc, #352]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a57      	ldr	r2, [pc, #348]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b55      	ldr	r3, [pc, #340]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	484e      	ldr	r0, [pc, #312]	@ (8001088 <HAL_UART_MspInit+0x1a0>)
 8000f4e:	f000 fa8d 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	4619      	mov	r1, r3
 8000f66:	4848      	ldr	r0, [pc, #288]	@ (8001088 <HAL_UART_MspInit+0x1a0>)
 8000f68:	f000 fa80 	bl	800146c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2105      	movs	r1, #5
 8000f70:	2025      	movs	r0, #37	@ 0x25
 8000f72:	f000 f99e 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f76:	2025      	movs	r0, #37	@ 0x25
 8000f78:	f000 f9b7 	bl	80012ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f7c:	e07c      	b.n	8001078 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a42      	ldr	r2, [pc, #264]	@ (800108c <HAL_UART_MspInit+0x1a4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d138      	bne.n	8000ffa <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f88:	4b3e      	ldr	r3, [pc, #248]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b3b      	ldr	r3, [pc, #236]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b38      	ldr	r3, [pc, #224]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a37      	ldr	r2, [pc, #220]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b35      	ldr	r3, [pc, #212]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4619      	mov	r1, r3
 8000fca:	482f      	ldr	r0, [pc, #188]	@ (8001088 <HAL_UART_MspInit+0x1a0>)
 8000fcc:	f000 fa4e 	bl	800146c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4829      	ldr	r0, [pc, #164]	@ (8001088 <HAL_UART_MspInit+0x1a0>)
 8000fe4:	f000 fa42 	bl	800146c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2105      	movs	r1, #5
 8000fec:	2026      	movs	r0, #38	@ 0x26
 8000fee:	f000 f960 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ff2:	2026      	movs	r0, #38	@ 0x26
 8000ff4:	f000 f979 	bl	80012ea <HAL_NVIC_EnableIRQ>
}
 8000ff8:	e03e      	b.n	8001078 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <HAL_UART_MspInit+0x1a8>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d139      	bne.n	8001078 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 800100a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800100e:	61d3      	str	r3, [r2, #28]
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_UART_MspInit+0x19c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	4619      	mov	r1, r3
 8001048:	4812      	ldr	r0, [pc, #72]	@ (8001094 <HAL_UART_MspInit+0x1ac>)
 800104a:	f000 fa0f 	bl	800146c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800104e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	@ (8001094 <HAL_UART_MspInit+0x1ac>)
 8001064:	f000 fa02 	bl	800146c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2105      	movs	r1, #5
 800106c:	2027      	movs	r0, #39	@ 0x27
 800106e:	f000 f920 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001072:	2027      	movs	r0, #39	@ 0x27
 8001074:	f000 f939 	bl	80012ea <HAL_NVIC_EnableIRQ>
}
 8001078:	bf00      	nop
 800107a:	3730      	adds	r7, #48	@ 0x30
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40013800 	.word	0x40013800
 8001084:	40021000 	.word	0x40021000
 8001088:	40010800 	.word	0x40010800
 800108c:	40004400 	.word	0x40004400
 8001090:	40004800 	.word	0x40004800
 8001094:	40010c00 	.word	0x40010c00

08001098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001098:	f7ff fea2 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480b      	ldr	r0, [pc, #44]	@ (80010cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800109e:	490c      	ldr	r1, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010a0:	4a0c      	ldr	r2, [pc, #48]	@ (80010d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010b4:	4c09      	ldr	r4, [pc, #36]	@ (80010dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f004 fcbb 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c6:	f7ff fce1 	bl	8000a8c <main>
  bx lr
 80010ca:	4770      	bx	lr
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010d4:	080065d4 	.word	0x080065d4
  ldr r2, =_sbss
 80010d8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010dc:	2000286c 	.word	0x2000286c

080010e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_2_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <HAL_Init+0x28>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	@ (800110c <HAL_Init+0x28>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f8d1 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f7ff fd78 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fd3e 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a03      	ldr	r2, [pc, #12]	@ (8001130 <HAL_IncTick+0x20>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000014 	.word	0x20000014
 8001130:	200005d4 	.word	0x200005d4

08001134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	@ (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	200005d4 	.word	0x200005d4

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4906      	ldr	r1, [pc, #24]	@ (80011e0 <__NVIC_EnableIRQ+0x34>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff4f 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff64 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ffb2 	bl	8001238 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff81 	bl	80011e4 <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff57 	bl	80011ac <__NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d008      	beq.n	8001330 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2204      	movs	r2, #4
 8001322:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e020      	b.n	8001372 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 020e 	bic.w	r2, r2, #14
 800133e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d005      	beq.n	80013a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2204      	movs	r2, #4
 8001398:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e051      	b.n	8001444 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 020e 	bic.w	r2, r2, #14
 80013ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a22      	ldr	r2, [pc, #136]	@ (8001450 <HAL_DMA_Abort_IT+0xd4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d029      	beq.n	800141e <HAL_DMA_Abort_IT+0xa2>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <HAL_DMA_Abort_IT+0xd8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d022      	beq.n	800141a <HAL_DMA_Abort_IT+0x9e>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001458 <HAL_DMA_Abort_IT+0xdc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01a      	beq.n	8001414 <HAL_DMA_Abort_IT+0x98>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <HAL_DMA_Abort_IT+0xe0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d012      	beq.n	800140e <HAL_DMA_Abort_IT+0x92>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <HAL_DMA_Abort_IT+0xe4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00a      	beq.n	8001408 <HAL_DMA_Abort_IT+0x8c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_DMA_Abort_IT+0xe8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d102      	bne.n	8001402 <HAL_DMA_Abort_IT+0x86>
 80013fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001400:	e00e      	b.n	8001420 <HAL_DMA_Abort_IT+0xa4>
 8001402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001406:	e00b      	b.n	8001420 <HAL_DMA_Abort_IT+0xa4>
 8001408:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800140c:	e008      	b.n	8001420 <HAL_DMA_Abort_IT+0xa4>
 800140e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001412:	e005      	b.n	8001420 <HAL_DMA_Abort_IT+0xa4>
 8001414:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001418:	e002      	b.n	8001420 <HAL_DMA_Abort_IT+0xa4>
 800141a:	2310      	movs	r3, #16
 800141c:	e000      	b.n	8001420 <HAL_DMA_Abort_IT+0xa4>
 800141e:	2301      	movs	r3, #1
 8001420:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <HAL_DMA_Abort_IT+0xec>)
 8001422:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
    } 
  }
  return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40020008 	.word	0x40020008
 8001454:	4002001c 	.word	0x4002001c
 8001458:	40020030 	.word	0x40020030
 800145c:	40020044 	.word	0x40020044
 8001460:	40020058 	.word	0x40020058
 8001464:	4002006c 	.word	0x4002006c
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b08b      	sub	sp, #44	@ 0x2c
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e169      	b.n	8001754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001480:	2201      	movs	r2, #1
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	429a      	cmp	r2, r3
 800149a:	f040 8158 	bne.w	800174e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a9a      	ldr	r2, [pc, #616]	@ (800170c <HAL_GPIO_Init+0x2a0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d05e      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014a8:	4a98      	ldr	r2, [pc, #608]	@ (800170c <HAL_GPIO_Init+0x2a0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d875      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014ae:	4a98      	ldr	r2, [pc, #608]	@ (8001710 <HAL_GPIO_Init+0x2a4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d058      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014b4:	4a96      	ldr	r2, [pc, #600]	@ (8001710 <HAL_GPIO_Init+0x2a4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d86f      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014ba:	4a96      	ldr	r2, [pc, #600]	@ (8001714 <HAL_GPIO_Init+0x2a8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d052      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014c0:	4a94      	ldr	r2, [pc, #592]	@ (8001714 <HAL_GPIO_Init+0x2a8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d869      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014c6:	4a94      	ldr	r2, [pc, #592]	@ (8001718 <HAL_GPIO_Init+0x2ac>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d04c      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014cc:	4a92      	ldr	r2, [pc, #584]	@ (8001718 <HAL_GPIO_Init+0x2ac>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d863      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014d2:	4a92      	ldr	r2, [pc, #584]	@ (800171c <HAL_GPIO_Init+0x2b0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d046      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014d8:	4a90      	ldr	r2, [pc, #576]	@ (800171c <HAL_GPIO_Init+0x2b0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d85d      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d82a      	bhi.n	8001538 <HAL_GPIO_Init+0xcc>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d859      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014e6:	a201      	add	r2, pc, #4	@ (adr r2, 80014ec <HAL_GPIO_Init+0x80>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	08001567 	.word	0x08001567
 80014f0:	08001541 	.word	0x08001541
 80014f4:	08001553 	.word	0x08001553
 80014f8:	08001595 	.word	0x08001595
 80014fc:	0800159b 	.word	0x0800159b
 8001500:	0800159b 	.word	0x0800159b
 8001504:	0800159b 	.word	0x0800159b
 8001508:	0800159b 	.word	0x0800159b
 800150c:	0800159b 	.word	0x0800159b
 8001510:	0800159b 	.word	0x0800159b
 8001514:	0800159b 	.word	0x0800159b
 8001518:	0800159b 	.word	0x0800159b
 800151c:	0800159b 	.word	0x0800159b
 8001520:	0800159b 	.word	0x0800159b
 8001524:	0800159b 	.word	0x0800159b
 8001528:	0800159b 	.word	0x0800159b
 800152c:	0800159b 	.word	0x0800159b
 8001530:	08001549 	.word	0x08001549
 8001534:	0800155d 	.word	0x0800155d
 8001538:	4a79      	ldr	r2, [pc, #484]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800153e:	e02c      	b.n	800159a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e029      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	3304      	adds	r3, #4
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	e024      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	3308      	adds	r3, #8
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e01f      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	330c      	adds	r3, #12
 8001562:	623b      	str	r3, [r7, #32]
          break;
 8001564:	e01a      	b.n	800159c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156e:	2304      	movs	r3, #4
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e013      	b.n	800159c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800157c:	2308      	movs	r3, #8
 800157e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	611a      	str	r2, [r3, #16]
          break;
 8001586:	e009      	b.n	800159c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001588:	2308      	movs	r3, #8
 800158a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	615a      	str	r2, [r3, #20]
          break;
 8001592:	e003      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
          break;
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x130>
          break;
 800159a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2bff      	cmp	r3, #255	@ 0xff
 80015a0:	d801      	bhi.n	80015a6 <HAL_GPIO_Init+0x13a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	e001      	b.n	80015aa <HAL_GPIO_Init+0x13e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3304      	adds	r3, #4
 80015aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2bff      	cmp	r3, #255	@ 0xff
 80015b0:	d802      	bhi.n	80015b8 <HAL_GPIO_Init+0x14c>
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x152>
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	3b08      	subs	r3, #8
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	210f      	movs	r1, #15
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	6a39      	ldr	r1, [r7, #32]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	431a      	orrs	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80b1 	beq.w	800174e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001604:	4a48      	ldr	r2, [pc, #288]	@ (8001728 <HAL_GPIO_Init+0x2bc>)
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a40      	ldr	r2, [pc, #256]	@ (800172c <HAL_GPIO_Init+0x2c0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d013      	beq.n	8001658 <HAL_GPIO_Init+0x1ec>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a3f      	ldr	r2, [pc, #252]	@ (8001730 <HAL_GPIO_Init+0x2c4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00d      	beq.n	8001654 <HAL_GPIO_Init+0x1e8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3e      	ldr	r2, [pc, #248]	@ (8001734 <HAL_GPIO_Init+0x2c8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_Init+0x1e4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3d      	ldr	r2, [pc, #244]	@ (8001738 <HAL_GPIO_Init+0x2cc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_GPIO_Init+0x1e0>
 8001648:	2303      	movs	r3, #3
 800164a:	e006      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 800164c:	2304      	movs	r3, #4
 800164e:	e004      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001650:	2302      	movs	r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001658:	2300      	movs	r3, #0
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	f002 0203 	and.w	r2, r2, #3
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	4093      	lsls	r3, r2
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800166a:	492f      	ldr	r1, [pc, #188]	@ (8001728 <HAL_GPIO_Init+0x2bc>)
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001684:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	492c      	ldr	r1, [pc, #176]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	4928      	ldr	r1, [pc, #160]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 800169c:	4013      	ands	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ac:	4b23      	ldr	r3, [pc, #140]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	4922      	ldr	r1, [pc, #136]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	491e      	ldr	r1, [pc, #120]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4918      	ldr	r1, [pc, #96]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4914      	ldr	r1, [pc, #80]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d021      	beq.n	8001740 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016fc:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	490e      	ldr	r1, [pc, #56]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	e021      	b.n	800174e <HAL_GPIO_Init+0x2e2>
 800170a:	bf00      	nop
 800170c:	10320000 	.word	0x10320000
 8001710:	10310000 	.word	0x10310000
 8001714:	10220000 	.word	0x10220000
 8001718:	10210000 	.word	0x10210000
 800171c:	10120000 	.word	0x10120000
 8001720:	10110000 	.word	0x10110000
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000
 800172c:	40010800 	.word	0x40010800
 8001730:	40010c00 	.word	0x40010c00
 8001734:	40011000 	.word	0x40011000
 8001738:	40011400 	.word	0x40011400
 800173c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_GPIO_Init+0x304>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	43db      	mvns	r3, r3
 8001748:	4909      	ldr	r1, [pc, #36]	@ (8001770 <HAL_GPIO_Init+0x304>)
 800174a:	4013      	ands	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	3301      	adds	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	f47f ae8e 	bne.w	8001480 <HAL_GPIO_Init+0x14>
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	372c      	adds	r7, #44	@ 0x2c
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e272      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8087 	beq.w	80018a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001794:	4b92      	ldr	r3, [pc, #584]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b04      	cmp	r3, #4
 800179e:	d00c      	beq.n	80017ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a0:	4b8f      	ldr	r3, [pc, #572]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d112      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
 80017ac:	4b8c      	ldr	r3, [pc, #560]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	4b89      	ldr	r3, [pc, #548]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d06c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x12c>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d168      	bne.n	80018a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e24c      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x76>
 80017dc:	4b80      	ldr	r3, [pc, #512]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a7f      	ldr	r2, [pc, #508]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e02e      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x98>
 80017f2:	4b7b      	ldr	r3, [pc, #492]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7a      	ldr	r2, [pc, #488]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b78      	ldr	r3, [pc, #480]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a77      	ldr	r2, [pc, #476]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0xbc>
 8001816:	4b72      	ldr	r3, [pc, #456]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a71      	ldr	r2, [pc, #452]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b6f      	ldr	r3, [pc, #444]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6e      	ldr	r2, [pc, #440]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 8001830:	4b6b      	ldr	r3, [pc, #428]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a6a      	ldr	r2, [pc, #424]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b68      	ldr	r3, [pc, #416]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a67      	ldr	r2, [pc, #412]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001846:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fc70 	bl	8001134 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fc6c 	bl	8001134 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	@ 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e200      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b5d      	ldr	r3, [pc, #372]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xe4>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fc5c 	bl	8001134 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fc58 	bl	8001134 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1ec      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b53      	ldr	r3, [pc, #332]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x10c>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ae:	4b4c      	ldr	r3, [pc, #304]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ba:	4b49      	ldr	r3, [pc, #292]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d11c      	bne.n	8001900 <HAL_RCC_OscConfig+0x18c>
 80018c6:	4b46      	ldr	r3, [pc, #280]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	4b43      	ldr	r3, [pc, #268]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x176>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1c0      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4939      	ldr	r1, [pc, #228]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	e03a      	b.n	8001976 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001908:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <HAL_RCC_OscConfig+0x270>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fc11 	bl	8001134 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fc0d 	bl	8001134 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1a1      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4b2d      	ldr	r3, [pc, #180]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4927      	ldr	r1, [pc, #156]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <HAL_RCC_OscConfig+0x270>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fbf0 	bl	8001134 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff fbec 	bl	8001134 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e180      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03a      	beq.n	80019f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d019      	beq.n	80019be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <HAL_RCC_OscConfig+0x274>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7ff fbd0 	bl	8001134 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff fbcc 	bl	8001134 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e160      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 fb1e 	bl	8001ff8 <RCC_Delay>
 80019bc:	e01c      	b.n	80019f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_RCC_OscConfig+0x274>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fbb6 	bl	8001134 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ca:	e00f      	b.n	80019ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fbb2 	bl	8001134 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d908      	bls.n	80019ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e146      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	42420000 	.word	0x42420000
 80019e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	4b92      	ldr	r3, [pc, #584]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e9      	bne.n	80019cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a6 	beq.w	8001b52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b88      	ldr	r3, [pc, #544]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a87      	ldr	r2, [pc, #540]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b85      	ldr	r3, [pc, #532]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b82      	ldr	r3, [pc, #520]	@ (8001c3c <HAL_RCC_OscConfig+0x4c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c3c <HAL_RCC_OscConfig+0x4c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a7e      	ldr	r2, [pc, #504]	@ (8001c3c <HAL_RCC_OscConfig+0x4c8>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fb73 	bl	8001134 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff fb6f 	bl	8001134 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	@ 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e103      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b75      	ldr	r3, [pc, #468]	@ (8001c3c <HAL_RCC_OscConfig+0x4c8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x312>
 8001a78:	4b6f      	ldr	r3, [pc, #444]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e02d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x334>
 8001a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a69      	ldr	r2, [pc, #420]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	4b67      	ldr	r3, [pc, #412]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a66      	ldr	r2, [pc, #408]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	e01c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x356>
 8001ab0:	4b61      	ldr	r3, [pc, #388]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a60      	ldr	r2, [pc, #384]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	4b5e      	ldr	r3, [pc, #376]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001aca:	4b5b      	ldr	r3, [pc, #364]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a5a      	ldr	r2, [pc, #360]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b58      	ldr	r3, [pc, #352]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a57      	ldr	r2, [pc, #348]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d015      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb23 	bl	8001134 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff fb1f 	bl	8001134 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0b1      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	4b4b      	ldr	r3, [pc, #300]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ee      	beq.n	8001af2 <HAL_RCC_OscConfig+0x37e>
 8001b14:	e014      	b.n	8001b40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb0d 	bl	8001134 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fb09 	bl	8001134 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e09b      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	4b40      	ldr	r3, [pc, #256]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d105      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b46:	4b3c      	ldr	r3, [pc, #240]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8087 	beq.w	8001c6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d061      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d146      	bne.n	8001bfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <HAL_RCC_OscConfig+0x4cc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff fadd 	bl	8001134 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff fad9 	bl	8001134 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e06d      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4921      	ldr	r1, [pc, #132]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a19      	ldr	r1, [r3, #32]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	491b      	ldr	r1, [pc, #108]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_RCC_OscConfig+0x4cc>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff faad 	bl	8001134 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff faa9 	bl	8001134 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e03d      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x46a>
 8001bfc:	e035      	b.n	8001c6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <HAL_RCC_OscConfig+0x4cc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fa96 	bl	8001134 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff fa92 	bl	8001134 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e026      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x498>
 8001c2a:	e01e      	b.n	8001c6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e019      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_RCC_OscConfig+0x500>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0d0      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d910      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b67      	ldr	r3, [pc, #412]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4965      	ldr	r1, [pc, #404]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b63      	ldr	r3, [pc, #396]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b8      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd4:	4b59      	ldr	r3, [pc, #356]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a58      	ldr	r2, [pc, #352]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cec:	4b53      	ldr	r3, [pc, #332]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a52      	ldr	r2, [pc, #328]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf8:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	494d      	ldr	r1, [pc, #308]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d040      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b47      	ldr	r3, [pc, #284]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e07f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e073      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e06b      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b39      	ldr	r3, [pc, #228]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4936      	ldr	r1, [pc, #216]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7ff f9e4 	bl	8001134 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff f9e0 	bl	8001134 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e053      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b27      	ldr	r3, [pc, #156]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d210      	bcs.n	8001dc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	4922      	ldr	r1, [pc, #136]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b20      	ldr	r3, [pc, #128]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e032      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4916      	ldr	r1, [pc, #88]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df2:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	490e      	ldr	r1, [pc, #56]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e06:	f000 f82d 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	490a      	ldr	r1, [pc, #40]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e18:	5ccb      	ldrb	r3, [r1, r3]
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	4a09      	ldr	r2, [pc, #36]	@ (8001e44 <HAL_RCC_ClockConfig+0x1cc>)
 8001e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_RCC_ClockConfig+0x1d0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fee2 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08006564 	.word	0x08006564
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	20000010 	.word	0x20000010

08001e4c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <HAL_RCC_EnableCSS+0x14>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	4242004c 	.word	0x4242004c

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x30>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x36>
 8001e92:	e027      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001e96:	613b      	str	r3, [r7, #16]
      break;
 8001e98:	e027      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0c9b      	lsrs	r3, r3, #18
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d010      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	0c5b      	lsrs	r3, r3, #17
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	4a11      	ldr	r2, [pc, #68]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec6:	fb03 f202 	mul.w	r2, r3, r2
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e004      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	613b      	str	r3, [r7, #16]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee6:	613b      	str	r3, [r7, #16]
      break;
 8001ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eea:	693b      	ldr	r3, [r7, #16]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	0800657c 	.word	0x0800657c
 8001f04:	0800658c 	.word	0x0800658c
 8001f08:	003d0900 	.word	0x003d0900

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b02      	ldr	r3, [pc, #8]	@ (8001f1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	2000000c 	.word	0x2000000c

08001f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f24:	f7ff fff2 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	@ (8001f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08006574 	.word	0x08006574

08001f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0adb      	lsrs	r3, r3, #11
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	@ (8001f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08006574 	.word	0x08006574

08001f70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_RCC_GetClockConfig+0x58>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0203 	and.w	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <HAL_RCC_GetClockConfig+0x58>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_RCC_GetClockConfig+0x58>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <HAL_RCC_GetClockConfig+0x58>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_RCC_GetClockConfig+0x5c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0207 	and.w	r2, r3, #7
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fdc:	2b80      	cmp	r3, #128	@ 0x80
 8001fde:	d104      	bne.n	8001fea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001fe0:	f000 f828 	bl	8002034 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001fe4:	4b03      	ldr	r3, [pc, #12]	@ (8001ff4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001fe6:	2280      	movs	r2, #128	@ 0x80
 8001fe8:	701a      	strb	r2, [r3, #0]
  }
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	4002100a 	.word	0x4002100a

08001ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <RCC_Delay+0x34>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <RCC_Delay+0x38>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a5b      	lsrs	r3, r3, #9
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002014:	bf00      	nop
  }
  while (Delay --);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	60fa      	str	r2, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <RCC_Delay+0x1c>
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	2000000c 	.word	0x2000000c
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e041      	b.n	80020d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f839 	bl	80020de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f000 f9b4 	bl	80023ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d001      	beq.n	8002108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e03a      	b.n	800217e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a18      	ldr	r2, [pc, #96]	@ (8002188 <HAL_TIM_Base_Start_IT+0x98>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00e      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x58>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002132:	d009      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x58>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a14      	ldr	r2, [pc, #80]	@ (800218c <HAL_TIM_Base_Start_IT+0x9c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d004      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x58>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a13      	ldr	r2, [pc, #76]	@ (8002190 <HAL_TIM_Base_Start_IT+0xa0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d111      	bne.n	800216c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b06      	cmp	r3, #6
 8002158:	d010      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216a:	e007      	b.n	800217c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40000400 	.word	0x40000400
 8002190:	40000800 	.word	0x40000800

08002194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d122      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d11b      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0202 	mvn.w	r2, #2
 80021c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8ed 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8e0 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f8ef 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d122      	bne.n	8002244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d11b      	bne.n	8002244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0204 	mvn.w	r2, #4
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8c3 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f8b6 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f8c5 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b08      	cmp	r3, #8
 8002250:	d122      	bne.n	8002298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b08      	cmp	r3, #8
 800225e:	d11b      	bne.n	8002298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0208 	mvn.w	r2, #8
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2204      	movs	r2, #4
 800226e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f899 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f88c 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f89b 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d122      	bne.n	80022ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d11b      	bne.n	80022ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0210 	mvn.w	r2, #16
 80022bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2208      	movs	r2, #8
 80022c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f86f 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
 80022d8:	e005      	b.n	80022e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f862 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f871 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0201 	mvn.w	r2, #1
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fc1c 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002322:	2b80      	cmp	r3, #128	@ 0x80
 8002324:	d10e      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002330:	2b80      	cmp	r3, #128	@ 0x80
 8002332:	d107      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8bf 	bl	80024c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234e:	2b40      	cmp	r3, #64	@ 0x40
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235c:	2b40      	cmp	r3, #64	@ 0x40
 800235e:	d107      	bne.n	8002370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f835 	bl	80023da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b20      	cmp	r3, #32
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b20      	cmp	r3, #32
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f88a 	bl	80024b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a29      	ldr	r2, [pc, #164]	@ (80024a4 <TIM_Base_SetConfig+0xb8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00b      	beq.n	800241c <TIM_Base_SetConfig+0x30>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240a:	d007      	beq.n	800241c <TIM_Base_SetConfig+0x30>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a26      	ldr	r2, [pc, #152]	@ (80024a8 <TIM_Base_SetConfig+0xbc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <TIM_Base_SetConfig+0x30>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a25      	ldr	r2, [pc, #148]	@ (80024ac <TIM_Base_SetConfig+0xc0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d108      	bne.n	800242e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1c      	ldr	r2, [pc, #112]	@ (80024a4 <TIM_Base_SetConfig+0xb8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00b      	beq.n	800244e <TIM_Base_SetConfig+0x62>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800243c:	d007      	beq.n	800244e <TIM_Base_SetConfig+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <TIM_Base_SetConfig+0xbc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d003      	beq.n	800244e <TIM_Base_SetConfig+0x62>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a18      	ldr	r2, [pc, #96]	@ (80024ac <TIM_Base_SetConfig+0xc0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d108      	bne.n	8002460 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a07      	ldr	r2, [pc, #28]	@ (80024a4 <TIM_Base_SetConfig+0xb8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d103      	bne.n	8002494 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	615a      	str	r2, [r3, #20]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800

080024b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e042      	b.n	800256c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fcf4 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2224      	movs	r2, #36	@ 0x24
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fcff 	bl	8002f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800252c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800253c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800254c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b20      	cmp	r3, #32
 800258c:	d121      	bne.n	80025d2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_UART_Transmit_IT+0x26>
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e01a      	b.n	80025d4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	@ 0x21
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	4613      	mov	r3, r2
 80025ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d112      	bne.n	800261e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_UART_Receive_IT+0x26>
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e00b      	b.n	8002620 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	461a      	mov	r2, r3
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 faad 	bl	8002b74 <UART_Start_Receive_IT>
 800261a:	4603      	mov	r3, r0
 800261c:	e000      	b.n	8002620 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0ba      	sub	sp, #232	@ 0xe8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_UART_IRQHandler+0x66>
 800267a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fb8a 	bl	8002da0 <UART_Receive_IT>
      return;
 800268c:	e25b      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800268e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80de 	beq.w	8002854 <HAL_UART_IRQHandler+0x22c>
 8002698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80d1 	beq.w	8002854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_UART_IRQHandler+0xae>
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_UART_IRQHandler+0xd2>
 80026e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_UART_IRQHandler+0xf6>
 8002706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <HAL_UART_IRQHandler+0x126>
 800272a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f043 0208 	orr.w	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 81f2 	beq.w	8002b3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_UART_IRQHandler+0x14e>
 8002764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fb15 	bl	8002da0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_UART_IRQHandler+0x17a>
 800279a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04f      	beq.n	8002842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa1f 	bl	8002be6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d041      	beq.n	800283a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80027e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80027e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80027ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80027fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1d9      	bne.n	80027b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a08 <HAL_UART_IRQHandler+0x3e0>)
 8002810:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fdb0 	bl	800137c <HAL_DMA_Abort_IT>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002830:	e00e      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f98a 	bl	8002b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	e00a      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f986 	bl	8002b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	e006      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f982 	bl	8002b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800284e:	e175      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	bf00      	nop
    return;
 8002852:	e173      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	2b01      	cmp	r3, #1
 800285a:	f040 814f 	bne.w	8002afc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8148 	beq.w	8002afc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800286c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8141 	beq.w	8002afc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80b6 	beq.w	8002a0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8145 	beq.w	8002b40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028be:	429a      	cmp	r2, r3
 80028c0:	f080 813e 	bcs.w	8002b40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	f000 8088 	beq.w	80029e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028e6:	e853 3f00 	ldrex	r3, [r3]
 80028ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80028ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002904:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002908:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002910:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800291c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1d9      	bne.n	80028d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800292e:	e853 3f00 	ldrex	r3, [r3]
 8002932:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002934:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002948:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800294c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002950:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002954:	e841 2300 	strex	r3, r2, [r1]
 8002958:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800295a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e1      	bne.n	8002924 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3314      	adds	r3, #20
 8002966:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3314      	adds	r3, #20
 8002980:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002984:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002986:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002988:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800298a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800298c:	e841 2300 	strex	r3, r2, [r1]
 8002990:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e3      	bne.n	8002960 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b8:	f023 0310 	bic.w	r3, r3, #16
 80029bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e3      	bne.n	80029a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fc8f 	bl	8001306 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8ad 	bl	8002b5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a04:	e09c      	b.n	8002b40 <HAL_UART_IRQHandler+0x518>
 8002a06:	bf00      	nop
 8002a08:	08002cab 	.word	0x08002cab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 808e 	beq.w	8002b44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8089 	beq.w	8002b44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a56:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e3      	bne.n	8002a32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	623b      	str	r3, [r7, #32]
   return(result);
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e3      	bne.n	8002a6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	e853 3f00 	ldrex	r3, [r3]
 8002abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0310 	bic.w	r3, r3, #16
 8002ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ad4:	61fa      	str	r2, [r7, #28]
 8002ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e3      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f832 	bl	8002b5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002afa:	e023      	b.n	8002b44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HAL_UART_IRQHandler+0x4f4>
 8002b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8dc 	bl	8002cd2 <UART_Transmit_IT>
    return;
 8002b1a:	e014      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <HAL_UART_IRQHandler+0x51e>
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f91b 	bl	8002d70 <UART_EndTransmit_IT>
    return;
 8002b3a:	e004      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b3c:	bf00      	nop
 8002b3e:	e002      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b44:	bf00      	nop
  }
}
 8002b46:	37e8      	adds	r7, #232	@ 0xe8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2222      	movs	r2, #34	@ 0x22
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0220 	orr.w	r2, r2, #32
 8002bd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b095      	sub	sp, #84	@ 0x54
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e5      	bne.n	8002bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3314      	adds	r3, #20
 8002c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3314      	adds	r3, #20
 8002c40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d119      	bne.n	8002c92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f023 0310 	bic.w	r3, r3, #16
 8002c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c7e:	61ba      	str	r2, [r7, #24]
 8002c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c82:	6979      	ldr	r1, [r7, #20]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e5      	bne.n	8002c5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ca0:	bf00      	nop
 8002ca2:	3754      	adds	r7, #84	@ 0x54
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7ff ff41 	bl	8002b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b21      	cmp	r3, #33	@ 0x21
 8002ce4:	d13e      	bne.n	8002d64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cee:	d114      	bne.n	8002d1a <UART_Transmit_IT+0x48>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d110      	bne.n	8002d1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	1c9a      	adds	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	621a      	str	r2, [r3, #32]
 8002d18:	e008      	b.n	8002d2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6211      	str	r1, [r2, #32]
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10f      	bne.n	8002d60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e000      	b.n	8002d66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd fa49 	bl	8000228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	@ 0x30
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b22      	cmp	r3, #34	@ 0x22
 8002db2:	f040 80ae 	bne.w	8002f12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dbe:	d117      	bne.n	8002df0 <UART_Receive_IT+0x50>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d113      	bne.n	8002df0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dee:	e026      	b.n	8002e3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e02:	d007      	beq.n	8002e14 <UART_Receive_IT+0x74>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <UART_Receive_IT+0x82>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e008      	b.n	8002e34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d15d      	bne.n	8002f0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0220 	bic.w	r2, r2, #32
 8002e60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d135      	bne.n	8002f04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	613b      	str	r3, [r7, #16]
   return(result);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f023 0310 	bic.w	r3, r3, #16
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebe:	623a      	str	r2, [r7, #32]
 8002ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	69f9      	ldr	r1, [r7, #28]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e5      	bne.n	8002e9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d10a      	bne.n	8002ef6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fe2e 	bl	8002b5e <HAL_UARTEx_RxEventCallback>
 8002f02:	e002      	b.n	8002f0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fd f9cb 	bl	80002a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e002      	b.n	8002f14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3730      	adds	r7, #48	@ 0x30
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f56:	f023 030c 	bic.w	r3, r3, #12
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003030 <UART_SetConfig+0x114>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d103      	bne.n	8002f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7fe ffe0 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	e002      	b.n	8002f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7fe ffc8 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009a      	lsls	r2, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <UART_SetConfig+0x118>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	0119      	lsls	r1, r3, #4
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009a      	lsls	r2, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <UART_SetConfig+0x118>)
 8002fca:	fba3 0302 	umull	r0, r3, r3, r2
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2064      	movs	r0, #100	@ 0x64
 8002fd2:	fb00 f303 	mul.w	r3, r0, r3
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	3332      	adds	r3, #50	@ 0x32
 8002fdc:	4a15      	ldr	r2, [pc, #84]	@ (8003034 <UART_SetConfig+0x118>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe8:	4419      	add	r1, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <UART_SetConfig+0x118>)
 8003002:	fba3 0302 	umull	r0, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2064      	movs	r0, #100	@ 0x64
 800300a:	fb00 f303 	mul.w	r3, r0, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	3332      	adds	r3, #50	@ 0x32
 8003014:	4a07      	ldr	r2, [pc, #28]	@ (8003034 <UART_SetConfig+0x118>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	440a      	add	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40013800 	.word	0x40013800
 8003034:	51eb851f 	.word	0x51eb851f

08003038 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304a:	2b84      	cmp	r3, #132	@ 0x84
 800304c:	d005      	beq.n	800305a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800304e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	3303      	adds	r3, #3
 8003058:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800305a:	68fb      	ldr	r3, [r7, #12]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800306c:	f3ef 8305 	mrs	r3, IPSR
 8003070:	607b      	str	r3, [r7, #4]
  return(result);
 8003072:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800308c:	f001 fa20 	bl	80044d0 <vTaskStartScheduler>
  
  return osOK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	bd80      	pop	{r7, pc}

08003096 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003098:	b089      	sub	sp, #36	@ 0x24
 800309a:	af04      	add	r7, sp, #16
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <osThreadCreate+0x54>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01c      	beq.n	80030ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685c      	ldr	r4, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691e      	ldr	r6, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ffb8 	bl	8003038 <makeFreeRtosPriority>
 80030c8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030d2:	9202      	str	r2, [sp, #8]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	9100      	str	r1, [sp, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4632      	mov	r2, r6
 80030dc:	4629      	mov	r1, r5
 80030de:	4620      	mov	r0, r4
 80030e0:	f001 f876 	bl	80041d0 <xTaskCreateStatic>
 80030e4:	4603      	mov	r3, r0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e01c      	b.n	8003124 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685c      	ldr	r4, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030f6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ff9a 	bl	8003038 <makeFreeRtosPriority>
 8003104:	4602      	mov	r2, r0
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	9200      	str	r2, [sp, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	4632      	mov	r2, r6
 8003112:	4629      	mov	r1, r5
 8003114:	4620      	mov	r0, r4
 8003116:	f001 f8ba 	bl	800428e <xTaskCreate>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d001      	beq.n	8003124 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003124:	68fb      	ldr	r3, [r7, #12]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003130 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  taskYIELD();
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <osThreadYield+0x20>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af02      	add	r7, sp, #8
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8003166:	f7ff ff7e 	bl	8003066 <inHandlerMode>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01c      	beq.n	80031aa <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8003170:	6839      	ldr	r1, [r7, #0]
 8003172:	f107 0208 	add.w	r2, r7, #8
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	2201      	movs	r2, #1
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f001 ff17 	bl	8004fb4 <xTaskGenericNotifyFromISR>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d002      	beq.n	8003192 <osSignalSet+0x3e>
      return 0x80000000;
 800318c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003190:	e019      	b.n	80031c6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d015      	beq.n	80031c4 <osSignalSet+0x70>
 8003198:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <osSignalSet+0x7c>)
 800319a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	e00c      	b.n	80031c4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	f107 0308 	add.w	r3, r7, #8
 80031b0:	2201      	movs	r2, #1
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f001 fe68 	bl	8004e88 <xTaskGenericNotify>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <osSignalSet+0x70>
    return 0x80000000;
 80031be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80031c2:	e000      	b.n	80031c6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80031c4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000ed04 	.word	0xe000ed04

080031d4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b089      	sub	sp, #36	@ 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d103      	bne.n	80031f8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e009      	b.n	800320c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d006      	beq.n	800320c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <osSignalWait+0x38>
      ticks = 1;
 8003208:	2301      	movs	r3, #1
 800320a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800320c:	f7ff ff2b 	bl	8003066 <inHandlerMode>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8003216:	2382      	movs	r3, #130	@ 0x82
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e01b      	b.n	8003254 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2000      	movs	r0, #0
 8003228:	f001 fdd4 	bl	8004dd4 <xTaskNotifyWait>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d008      	beq.n	8003244 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <osSignalWait+0x6a>
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e00a      	b.n	8003254 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800323e:	2340      	movs	r3, #64	@ 0x40
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	e007      	b.n	8003254 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da02      	bge.n	8003250 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800324a:	2386      	movs	r3, #134	@ 0x86
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	e001      	b.n	8003254 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8003250:	2308      	movs	r3, #8
 8003252:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	461c      	mov	r4, r3
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	3724      	adds	r7, #36	@ 0x24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd90      	pop	{r4, r7, pc}

0800326c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	3303      	adds	r3, #3
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003280:	2014      	movs	r0, #20
 8003282:	f002 f9bd 	bl	8005600 <pvPortMalloc>
 8003286:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d046      	beq.n	800331c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f002 f9aa 	bl	8005600 <pvPortMalloc>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02b      	beq.n	8003312 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 f99b 	bl	8005600 <pvPortMalloc>
 80032ca:	4602      	mov	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d011      	beq.n	80032fc <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	e008      	b.n	80032f0 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3301      	adds	r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d3f1      	bcc.n	80032de <osPoolCreate+0x72>
 80032fa:	e00f      	b.n	800331c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4618      	mov	r0, r3
 8003302:	f002 fa45 	bl	8005790 <vPortFree>
        vPortFree(thePool);
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f002 fa42 	bl	8005790 <vPortFree>
        thePool = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e004      	b.n	800331c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003312:	6978      	ldr	r0, [r7, #20]
 8003314:	f002 fa3c 	bl	8005790 <vPortFree>
      thePool = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800331c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b08a      	sub	sp, #40	@ 0x28
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003336:	f7ff fe96 	bl	8003066 <inHandlerMode>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003340:	f3ef 8211 	mrs	r2, BASEPRI
 8003344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	617a      	str	r2, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003358:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800335a:	627b      	str	r3, [r7, #36]	@ 0x24
 800335c:	e001      	b.n	8003362 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800335e:	f002 f84d 	bl	80053fc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e029      	b.n	80033bc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6892      	ldr	r2, [r2, #8]
 8003374:	fbb3 f1f2 	udiv	r1, r3, r2
 8003378:	fb01 f202 	mul.w	r2, r1, r2
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d113      	bne.n	80033b6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	4413      	add	r3, r2
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	440b      	add	r3, r1
 80033ac:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	611a      	str	r2, [r3, #16]
      break;
 80033b4:	e007      	b.n	80033c6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d3d0      	bcc.n	8003368 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80033c6:	f7ff fe4e 	bl	8003066 <inHandlerMode>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033da:	e001      	b.n	80033e0 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80033dc:	f002 f83e 	bl	800545c <vPortExitCritical>
  }
  
  return p;
 80033e0:	6a3b      	ldr	r3, [r7, #32]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3728      	adds	r7, #40	@ 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <osPoolFree+0x14>
    return osErrorParameter;
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	e030      	b.n	8003460 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <osPoolFree+0x1e>
    return osErrorParameter;
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	e02b      	b.n	8003460 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d201      	bcs.n	8003416 <osPoolFree+0x2c>
    return osErrorParameter;
 8003412:	2380      	movs	r3, #128	@ 0x80
 8003414:	e024      	b.n	8003460 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	fbb3 f1f2 	udiv	r1, r3, r2
 800342a:	fb01 f202 	mul.w	r2, r1, r2
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <osPoolFree+0x4e>
    return osErrorParameter;
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	e013      	b.n	8003460 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	429a      	cmp	r2, r3
 800344c:	d301      	bcc.n	8003452 <osPoolFree+0x68>
    return osErrorParameter;
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	e006      	b.n	8003460 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4413      	add	r3, r2
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800346a:	b590      	push	{r4, r7, lr}
 800346c:	b085      	sub	sp, #20
 800346e:	af02      	add	r7, sp, #8
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d011      	beq.n	80034a0 <osMessageCreate+0x36>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2400      	movs	r4, #0
 8003496:	9400      	str	r4, [sp, #0]
 8003498:	f000 f9cf 	bl	800383a <xQueueGenericCreateStatic>
 800349c:	4603      	mov	r3, r0
 800349e:	e008      	b.n	80034b2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	4619      	mov	r1, r3
 80034ac:	f000 fa41 	bl	8003932 <xQueueGenericCreate>
 80034b0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}
	...

080034bc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <osMessagePut+0x1e>
    ticks = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80034da:	f7ff fdc4 	bl	8003066 <inHandlerMode>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d018      	beq.n	8003516 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80034e4:	f107 0210 	add.w	r2, r7, #16
 80034e8:	f107 0108 	add.w	r1, r7, #8
 80034ec:	2300      	movs	r3, #0
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fb68 	bl	8003bc4 <xQueueGenericSendFromISR>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <osMessagePut+0x42>
      return osErrorOS;
 80034fa:	23ff      	movs	r3, #255	@ 0xff
 80034fc:	e018      	b.n	8003530 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d014      	beq.n	800352e <osMessagePut+0x72>
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <osMessagePut+0x7c>)
 8003506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	e00b      	b.n	800352e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003516:	f107 0108 	add.w	r1, r7, #8
 800351a:	2300      	movs	r3, #0
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fa66 	bl	80039f0 <xQueueGenericSend>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <osMessagePut+0x72>
      return osErrorOS;
 800352a:	23ff      	movs	r3, #255	@ 0xff
 800352c:	e000      	b.n	8003530 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b08b      	sub	sp, #44	@ 0x2c
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003556:	2380      	movs	r3, #128	@ 0x80
 8003558:	617b      	str	r3, [r7, #20]
    return event;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	461c      	mov	r4, r3
 800355e:	f107 0314 	add.w	r3, r7, #20
 8003562:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800356a:	e054      	b.n	8003616 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800356c:	2300      	movs	r3, #0
 800356e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d103      	bne.n	8003584 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
 8003582:	e009      	b.n	8003598 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <osMessageGet+0x5c>
      ticks = 1;
 8003594:	2301      	movs	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003598:	f7ff fd65 	bl	8003066 <inHandlerMode>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d01c      	beq.n	80035dc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80035a2:	f107 0220 	add.w	r2, r7, #32
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	3304      	adds	r3, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	68b8      	ldr	r0, [r7, #8]
 80035b0:	f000 fc7c 	bl	8003eac <xQueueReceiveFromISR>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80035ba:	2310      	movs	r3, #16
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e001      	b.n	80035c4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01d      	beq.n	8003606 <osMessageGet+0xca>
 80035ca:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <osMessageGet+0xe4>)
 80035cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	e014      	b.n	8003606 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	3304      	adds	r3, #4
 80035e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e4:	4619      	mov	r1, r3
 80035e6:	68b8      	ldr	r0, [r7, #8]
 80035e8:	f000 fb88 	bl	8003cfc <xQueueReceive>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d102      	bne.n	80035f8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80035f2:	2310      	movs	r3, #16
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e006      	b.n	8003606 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <osMessageGet+0xc6>
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <osMessageGet+0xc8>
 8003602:	2340      	movs	r3, #64	@ 0x40
 8003604:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	461c      	mov	r4, r3
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	372c      	adds	r7, #44	@ 0x2c
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}
 800361e:	bf00      	nop
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f103 0208 	add.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f103 0208 	add.w	r2, r3, #8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f103 0208 	add.w	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d103      	bne.n	80036e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e00c      	b.n	80036fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3308      	adds	r3, #8
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e002      	b.n	80036ee <vListInsert+0x2e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d2f6      	bcs.n	80036e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d103      	bne.n	8003764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1e5a      	subs	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr

08003782 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <xQueueGenericReset+0x2c>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	60bb      	str	r3, [r7, #8]
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	e7fd      	b.n	80037aa <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037ae:	f001 fe25 	bl	80053fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ba:	68f9      	ldr	r1, [r7, #12]
 80037bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	3b01      	subs	r3, #1
 80037e0:	68f9      	ldr	r1, [r7, #12]
 80037e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	22ff      	movs	r2, #255	@ 0xff
 80037f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	22ff      	movs	r2, #255	@ 0xff
 80037fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00f      	beq.n	800382c <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3310      	adds	r3, #16
 8003810:	4618      	mov	r0, r3
 8003812:	f001 f87b 	bl	800490c <xTaskRemoveFromEventList>
 8003816:	e009      	b.n	800382c <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	3310      	adds	r3, #16
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff01 	bl	8003624 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3324      	adds	r3, #36	@ 0x24
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fefc 	bl	8003624 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800382c:	f001 fe16 	bl	800545c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003830:	2301      	movs	r3, #1
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800383a:	b580      	push	{r7, lr}
 800383c:	b08e      	sub	sp, #56	@ 0x38
 800383e:	af02      	add	r7, sp, #8
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10b      	bne.n	8003866 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	e7fd      	b.n	8003862 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <xQueueGenericCreateStatic+0x56>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <xQueueGenericCreateStatic+0x5a>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <xQueueGenericCreateStatic+0x5c>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	623b      	str	r3, [r7, #32]
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	e7fd      	b.n	80038ae <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <xQueueGenericCreateStatic+0x84>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <xQueueGenericCreateStatic+0x88>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueGenericCreateStatic+0x8a>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61fb      	str	r3, [r7, #28]
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038e0:	2348      	movs	r3, #72	@ 0x48
 80038e2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b48      	cmp	r3, #72	@ 0x48
 80038e8:	d00b      	beq.n	8003902 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	61bb      	str	r3, [r7, #24]
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003914:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f844 	bl	80039b0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800392a:	4618      	mov	r0, r3
 800392c:	3730      	adds	r7, #48	@ 0x30
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003932:	b580      	push	{r7, lr}
 8003934:	b08a      	sub	sp, #40	@ 0x28
 8003936:	af02      	add	r7, sp, #8
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	4613      	mov	r3, r2
 800393e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10b      	bne.n	800395e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	613b      	str	r3, [r7, #16]
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	e7fd      	b.n	800395a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e004      	b.n	8003974 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	3348      	adds	r3, #72	@ 0x48
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fe41 	bl	8005600 <pvPortMalloc>
 800397e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00f      	beq.n	80039a6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	3348      	adds	r3, #72	@ 0x48
 800398a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f805 	bl	80039b0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80039a6:	69bb      	ldr	r3, [r7, #24]
	}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e002      	b.n	80039d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039de:	2101      	movs	r1, #1
 80039e0:	69b8      	ldr	r0, [r7, #24]
 80039e2:	f7ff fece 	bl	8003782 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	@ 0x38
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039fe:	2300      	movs	r3, #0
 8003a00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <xQueueGenericSend+0x34>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <xQueueGenericSend+0x42>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <xQueueGenericSend+0x46>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <xQueueGenericSend+0x48>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10b      	bne.n	8003a54 <xQueueGenericSend+0x64>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d103      	bne.n	8003a62 <xQueueGenericSend+0x72>
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <xQueueGenericSend+0x76>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <xQueueGenericSend+0x78>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <xQueueGenericSend+0x94>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	623b      	str	r3, [r7, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a84:	f001 f900 	bl	8004c88 <xTaskGetSchedulerState>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <xQueueGenericSend+0xa4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <xQueueGenericSend+0xa8>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <xQueueGenericSend+0xaa>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <xQueueGenericSend+0xc6>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	61fb      	str	r3, [r7, #28]
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	e7fd      	b.n	8003ab2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab6:	f001 fca1 	bl	80053fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <xQueueGenericSend+0xdc>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d112      	bne.n	8003af2 <xQueueGenericSend+0x102>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ad2:	f000 fa6d 	bl	8003fb0 <prvCopyDataToQueue>
 8003ad6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	3324      	adds	r3, #36	@ 0x24
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ff11 	bl	800490c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003aea:	f001 fcb7 	bl	800545c <vPortExitCritical>
				return pdPASS;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e062      	b.n	8003bb8 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003af8:	f001 fcb0 	bl	800545c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e05b      	b.n	8003bb8 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 ff62 	bl	80049d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b14:	f001 fca2 	bl	800545c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b18:	f000 fd3c 	bl	8004594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b1c:	f001 fc6e 	bl	80053fc <vPortEnterCritical>
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d103      	bne.n	8003b36 <xQueueGenericSend+0x146>
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b3c:	b25b      	sxtb	r3, r3
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d103      	bne.n	8003b4c <xQueueGenericSend+0x15c>
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b4c:	f001 fc86 	bl	800545c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b50:	1d3a      	adds	r2, r7, #4
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 ff51 	bl	8004a00 <xTaskCheckForTimeOut>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d123      	bne.n	8003bac <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b66:	f000 fb1b 	bl	80041a0 <prvIsQueueFull>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d017      	beq.n	8003ba0 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	3310      	adds	r3, #16
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fea1 	bl	80048c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b80:	f000 faa6 	bl	80040d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b84:	f000 fd14 	bl	80045b0 <xTaskResumeAll>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d193      	bne.n	8003ab6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <xQueueGenericSend+0x1d0>)
 8003b90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	e78a      	b.n	8003ab6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ba2:	f000 fa95 	bl	80040d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ba6:	f000 fd03 	bl	80045b0 <xTaskResumeAll>
 8003baa:	e784      	b.n	8003ab6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bae:	f000 fa8f 	bl	80040d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bb2:	f000 fcfd 	bl	80045b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bb6:	2300      	movs	r3, #0
		}
	}
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3738      	adds	r7, #56	@ 0x38
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08e      	sub	sp, #56	@ 0x38
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <xQueueGenericSendFromISR+0x3e>
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <xQueueGenericSendFromISR+0x42>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <xQueueGenericSendFromISR+0x44>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	623b      	str	r3, [r7, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d103      	bne.n	8003c32 <xQueueGenericSendFromISR+0x6e>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <xQueueGenericSendFromISR+0x72>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <xQueueGenericSendFromISR+0x74>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	61fb      	str	r3, [r7, #28]
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	e7fd      	b.n	8003c50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c54:	f001 fc94 	bl	8005580 <vPortValidateInterruptPriority>
	__asm volatile
 8003c58:	f3ef 8211 	mrs	r2, BASEPRI
 8003c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	61ba      	str	r2, [r7, #24]
 8003c6e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d302      	bcc.n	8003c86 <xQueueGenericSendFromISR+0xc2>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d12c      	bne.n	8003ce0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c96:	f000 f98b 	bl	8003fb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d112      	bne.n	8003cca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d016      	beq.n	8003cda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	3324      	adds	r3, #36	@ 0x24
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fe2b 	bl	800490c <xTaskRemoveFromEventList>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e007      	b.n	8003cda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cce:	3301      	adds	r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	b25a      	sxtb	r2, r3
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003cde:	e001      	b.n	8003ce4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f383 8811 	msr	BASEPRI, r3
}
 8003cee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3738      	adds	r7, #56	@ 0x38
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	@ 0x30
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <xQueueReceive+0x32>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	623b      	str	r3, [r7, #32]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <xQueueReceive+0x40>
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <xQueueReceive+0x44>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <xQueueReceive+0x46>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <xQueueReceive+0x62>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61fb      	str	r3, [r7, #28]
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	e7fd      	b.n	8003d5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d5e:	f000 ff93 	bl	8004c88 <xTaskGetSchedulerState>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <xQueueReceive+0x72>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <xQueueReceive+0x76>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <xQueueReceive+0x78>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <xQueueReceive+0x94>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	61bb      	str	r3, [r7, #24]
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d90:	f001 fb34 	bl	80053fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d014      	beq.n	8003dca <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003da4:	f000 f96e 	bl	8004084 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	1e5a      	subs	r2, r3, #1
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dba:	3310      	adds	r3, #16
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fda5 	bl	800490c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dc2:	f001 fb4b 	bl	800545c <vPortExitCritical>
				return pdPASS;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e069      	b.n	8003e9e <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dd0:	f001 fb44 	bl	800545c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e062      	b.n	8003e9e <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fdf6 	bl	80049d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dec:	f001 fb36 	bl	800545c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003df0:	f000 fbd0 	bl	8004594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003df4:	f001 fb02 	bl	80053fc <vPortEnterCritical>
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d103      	bne.n	8003e0e <xQueueReceive+0x112>
 8003e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e14:	b25b      	sxtb	r3, r3
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d103      	bne.n	8003e24 <xQueueReceive+0x128>
 8003e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e24:	f001 fb1a 	bl	800545c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e28:	1d3a      	adds	r2, r7, #4
 8003e2a:	f107 0310 	add.w	r3, r7, #16
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fde5 	bl	8004a00 <xTaskCheckForTimeOut>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d123      	bne.n	8003e84 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e3e:	f000 f999 	bl	8004174 <prvIsQueueEmpty>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d017      	beq.n	8003e78 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	3324      	adds	r3, #36	@ 0x24
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fd35 	bl	80048c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e58:	f000 f93a 	bl	80040d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e5c:	f000 fba8 	bl	80045b0 <xTaskResumeAll>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d194      	bne.n	8003d90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003e66:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <xQueueReceive+0x1ac>)
 8003e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	e78b      	b.n	8003d90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e7a:	f000 f929 	bl	80040d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e7e:	f000 fb97 	bl	80045b0 <xTaskResumeAll>
 8003e82:	e785      	b.n	8003d90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e86:	f000 f923 	bl	80040d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e8a:	f000 fb91 	bl	80045b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e90:	f000 f970 	bl	8004174 <prvIsQueueEmpty>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f43f af7a 	beq.w	8003d90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3730      	adds	r7, #48	@ 0x30
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	@ 0x38
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	623b      	str	r3, [r7, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	e7fd      	b.n	8003ed6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <xQueueReceiveFromISR+0x3c>
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <xQueueReceiveFromISR+0x40>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <xQueueReceiveFromISR+0x42>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	61fb      	str	r3, [r7, #28]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f0a:	f001 fb39 	bl	8005580 <vPortValidateInterruptPriority>
	__asm volatile
 8003f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	61ba      	str	r2, [r7, #24]
 8003f24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02f      	beq.n	8003f96 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f44:	f000 f89e 	bl	8004084 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d112      	bne.n	8003f80 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	3310      	adds	r3, #16
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fcd0 	bl	800490c <xTaskRemoveFromEventList>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00e      	beq.n	8003f90 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e007      	b.n	8003f90 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f84:	3301      	adds	r3, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	b25a      	sxtb	r2, r3
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003f90:	2301      	movs	r3, #1
 8003f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f94:	e001      	b.n	8003f9a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f383 8811 	msr	BASEPRI, r3
}
 8003fa4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3738      	adds	r7, #56	@ 0x38
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d14d      	bne.n	8004072 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fe72 	bl	8004cc4 <xTaskPriorityDisinherit>
 8003fe0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	e043      	b.n	8004072 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d119      	bne.n	8004024 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6898      	ldr	r0, [r3, #8]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	f001 fd4c 	bl	8005a98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	441a      	add	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	429a      	cmp	r2, r3
 8004018:	d32b      	bcc.n	8004072 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	e026      	b.n	8004072 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68d8      	ldr	r0, [r3, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	461a      	mov	r2, r3
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	f001 fd32 	bl	8005a98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	425b      	negs	r3, r3
 800403e:	441a      	add	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d207      	bcs.n	8004060 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	425b      	negs	r3, r3
 800405a:	441a      	add	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d105      	bne.n	8004072 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	3b01      	subs	r3, #1
 8004070:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800407a:	697b      	ldr	r3, [r7, #20]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d018      	beq.n	80040c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	441a      	add	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d303      	bcc.n	80040b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68d9      	ldr	r1, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	461a      	mov	r2, r3
 80040c2:	6838      	ldr	r0, [r7, #0]
 80040c4:	f001 fce8 	bl	8005a98 <memcpy>
	}
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040d8:	f001 f990 	bl	80053fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040e4:	e011      	b.n	800410a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d012      	beq.n	8004114 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3324      	adds	r3, #36	@ 0x24
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fc0a 	bl	800490c <xTaskRemoveFromEventList>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040fe:	f000 fce3 	bl	8004ac8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	3b01      	subs	r3, #1
 8004106:	b2db      	uxtb	r3, r3
 8004108:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800410a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	dce9      	bgt.n	80040e6 <prvUnlockQueue+0x16>
 8004112:	e000      	b.n	8004116 <prvUnlockQueue+0x46>
					break;
 8004114:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	22ff      	movs	r2, #255	@ 0xff
 800411a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800411e:	f001 f99d 	bl	800545c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004122:	f001 f96b 	bl	80053fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800412c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800412e:	e011      	b.n	8004154 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d012      	beq.n	800415e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3310      	adds	r3, #16
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fbe5 	bl	800490c <xTaskRemoveFromEventList>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004148:	f000 fcbe 	bl	8004ac8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800414c:	7bbb      	ldrb	r3, [r7, #14]
 800414e:	3b01      	subs	r3, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004158:	2b00      	cmp	r3, #0
 800415a:	dce9      	bgt.n	8004130 <prvUnlockQueue+0x60>
 800415c:	e000      	b.n	8004160 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800415e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	22ff      	movs	r2, #255	@ 0xff
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004168:	f001 f978 	bl	800545c <vPortExitCritical>
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800417c:	f001 f93e 	bl	80053fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004188:	2301      	movs	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e001      	b.n	8004192 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004192:	f001 f963 	bl	800545c <vPortExitCritical>

	return xReturn;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041a8:	f001 f928 	bl	80053fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d102      	bne.n	80041be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e001      	b.n	80041c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041c2:	f001 f94b 	bl	800545c <vPortExitCritical>

	return xReturn;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	@ 0x38
 80041d4:	af04      	add	r7, sp, #16
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	623b      	str	r3, [r7, #32]
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	61fb      	str	r3, [r7, #28]
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	e7fd      	b.n	8004216 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800421a:	2354      	movs	r3, #84	@ 0x54
 800421c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b54      	cmp	r3, #84	@ 0x54
 8004222:	d00b      	beq.n	800423c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	61bb      	str	r3, [r7, #24]
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800423c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01e      	beq.n	8004280 <xTaskCreateStatic+0xb0>
 8004242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01b      	beq.n	8004280 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004250:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	2202      	movs	r2, #2
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800425a:	2300      	movs	r3, #0
 800425c:	9303      	str	r3, [sp, #12]
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f850 	bl	8004318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004278:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800427a:	f000 f8cd 	bl	8004418 <prvAddNewTaskToReadyList>
 800427e:	e001      	b.n	8004284 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004284:	697b      	ldr	r3, [r7, #20]
	}
 8004286:	4618      	mov	r0, r3
 8004288:	3728      	adds	r7, #40	@ 0x28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800428e:	b580      	push	{r7, lr}
 8004290:	b08c      	sub	sp, #48	@ 0x30
 8004292:	af04      	add	r7, sp, #16
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f9ac 	bl	8005600 <pvPortMalloc>
 80042a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80042b0:	2054      	movs	r0, #84	@ 0x54
 80042b2:	f001 f9a5 	bl	8005600 <pvPortMalloc>
 80042b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80042c4:	e005      	b.n	80042d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f001 fa62 	bl	8005790 <vPortFree>
 80042cc:	e001      	b.n	80042d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d017      	beq.n	8004308 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	2300      	movs	r3, #0
 80042e4:	9303      	str	r3, [sp, #12]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	9302      	str	r3, [sp, #8]
 80042ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f80e 	bl	8004318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042fc:	69f8      	ldr	r0, [r7, #28]
 80042fe:	f000 f88b 	bl	8004418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004302:	2301      	movs	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	e002      	b.n	800430e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800430e:	69bb      	ldr	r3, [r7, #24]
	}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004330:	3b01      	subs	r3, #1
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f023 0307 	bic.w	r3, r3, #7
 800433e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	617b      	str	r3, [r7, #20]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e012      	b.n	800438e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	7819      	ldrb	r1, [r3, #0]
 8004370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	3334      	adds	r3, #52	@ 0x34
 8004378:	460a      	mov	r2, r1
 800437a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d006      	beq.n	8004396 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	3301      	adds	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d9e9      	bls.n	8004368 <prvInitialiseNewTask+0x50>
 8004394:	e000      	b.n	8004398 <prvInitialiseNewTask+0x80>
		{
			break;
 8004396:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d901      	bls.n	80043aa <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043a6:	2306      	movs	r3, #6
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043b4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	2200      	movs	r2, #0
 80043ba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	3304      	adds	r3, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff f94e 	bl	8003662 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	3318      	adds	r3, #24
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff f949 	bl	8003662 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	f1c3 0207 	rsb	r2, r3, #7
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	2200      	movs	r2, #0
 80043ea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	69b8      	ldr	r0, [r7, #24]
 80043fa:	f000 ff0d 	bl	8005218 <pxPortInitialiseStack>
 80043fe:	4602      	mov	r2, r0
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800440e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004410:	bf00      	nop
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004420:	f000 ffec 	bl	80053fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004424:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <prvAddNewTaskToReadyList+0xa0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	4a23      	ldr	r2, [pc, #140]	@ (80044b8 <prvAddNewTaskToReadyList+0xa0>)
 800442c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800442e:	4b23      	ldr	r3, [pc, #140]	@ (80044bc <prvAddNewTaskToReadyList+0xa4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004436:	4a21      	ldr	r2, [pc, #132]	@ (80044bc <prvAddNewTaskToReadyList+0xa4>)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800443c:	4b1e      	ldr	r3, [pc, #120]	@ (80044b8 <prvAddNewTaskToReadyList+0xa0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d110      	bne.n	8004466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004444:	f000 fb5e 	bl	8004b04 <prvInitialiseTaskLists>
 8004448:	e00d      	b.n	8004466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800444a:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <prvAddNewTaskToReadyList+0xa8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004452:	4b1a      	ldr	r3, [pc, #104]	@ (80044bc <prvAddNewTaskToReadyList+0xa4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	429a      	cmp	r2, r3
 800445e:	d802      	bhi.n	8004466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004460:	4a16      	ldr	r2, [pc, #88]	@ (80044bc <prvAddNewTaskToReadyList+0xa4>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004466:	4b17      	ldr	r3, [pc, #92]	@ (80044c4 <prvAddNewTaskToReadyList+0xac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <prvAddNewTaskToReadyList+0xac>)
 800446e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	2201      	movs	r2, #1
 8004476:	409a      	lsls	r2, r3
 8004478:	4b13      	ldr	r3, [pc, #76]	@ (80044c8 <prvAddNewTaskToReadyList+0xb0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	4a12      	ldr	r2, [pc, #72]	@ (80044c8 <prvAddNewTaskToReadyList+0xb0>)
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4a0f      	ldr	r2, [pc, #60]	@ (80044cc <prvAddNewTaskToReadyList+0xb4>)
 8004490:	441a      	add	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f7ff f8ee 	bl	800367a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800449e:	f000 ffdd 	bl	800545c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <prvAddNewTaskToReadyList+0xa8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044aa:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <prvAddNewTaskToReadyList+0xa4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200006d8 	.word	0x200006d8
 80044bc:	200005d8 	.word	0x200005d8
 80044c0:	200006e4 	.word	0x200006e4
 80044c4:	200006f4 	.word	0x200006f4
 80044c8:	200006e0 	.word	0x200006e0
 80044cc:	200005dc 	.word	0x200005dc

080044d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044de:	463a      	mov	r2, r7
 80044e0:	1d39      	adds	r1, r7, #4
 80044e2:	f107 0308 	add.w	r3, r7, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc f90c 	bl	8000704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	9202      	str	r2, [sp, #8]
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2300      	movs	r3, #0
 80044fc:	460a      	mov	r2, r1
 80044fe:	491f      	ldr	r1, [pc, #124]	@ (800457c <vTaskStartScheduler+0xac>)
 8004500:	481f      	ldr	r0, [pc, #124]	@ (8004580 <vTaskStartScheduler+0xb0>)
 8004502:	f7ff fe65 	bl	80041d0 <xTaskCreateStatic>
 8004506:	4603      	mov	r3, r0
 8004508:	4a1e      	ldr	r2, [pc, #120]	@ (8004584 <vTaskStartScheduler+0xb4>)
 800450a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800450c:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <vTaskStartScheduler+0xb4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e001      	b.n	800451e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d116      	bne.n	8004552 <vTaskStartScheduler+0x82>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	613b      	str	r3, [r7, #16]
}
 8004536:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004538:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <vTaskStartScheduler+0xb8>)
 800453a:	f04f 32ff 	mov.w	r2, #4294967295
 800453e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004540:	4b12      	ldr	r3, [pc, #72]	@ (800458c <vTaskStartScheduler+0xbc>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004546:	4b12      	ldr	r3, [pc, #72]	@ (8004590 <vTaskStartScheduler+0xc0>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800454c:	f000 fee4 	bl	8005318 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004550:	e00f      	b.n	8004572 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d10b      	bne.n	8004572 <vTaskStartScheduler+0xa2>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	60fb      	str	r3, [r7, #12]
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <vTaskStartScheduler+0x9e>
}
 8004572:	bf00      	nop
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	08006550 	.word	0x08006550
 8004580:	08004ae1 	.word	0x08004ae1
 8004584:	200006fc 	.word	0x200006fc
 8004588:	200006f8 	.word	0x200006f8
 800458c:	200006e4 	.word	0x200006e4
 8004590:	200006dc 	.word	0x200006dc

08004594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004598:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <vTaskSuspendAll+0x18>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	4a03      	ldr	r2, [pc, #12]	@ (80045ac <vTaskSuspendAll+0x18>)
 80045a0:	6013      	str	r3, [r2, #0]
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000700 	.word	0x20000700

080045b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045be:	4b3c      	ldr	r3, [pc, #240]	@ (80046b0 <xTaskResumeAll+0x100>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <xTaskResumeAll+0x2e>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	603b      	str	r3, [r7, #0]
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	e7fd      	b.n	80045da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045de:	f000 ff0d 	bl	80053fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045e2:	4b33      	ldr	r3, [pc, #204]	@ (80046b0 <xTaskResumeAll+0x100>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	4a31      	ldr	r2, [pc, #196]	@ (80046b0 <xTaskResumeAll+0x100>)
 80045ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ec:	4b30      	ldr	r3, [pc, #192]	@ (80046b0 <xTaskResumeAll+0x100>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d155      	bne.n	80046a0 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045f4:	4b2f      	ldr	r3, [pc, #188]	@ (80046b4 <xTaskResumeAll+0x104>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d051      	beq.n	80046a0 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045fc:	e02e      	b.n	800465c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045fe:	4b2e      	ldr	r3, [pc, #184]	@ (80046b8 <xTaskResumeAll+0x108>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3318      	adds	r3, #24
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f890 	bl	8003730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3304      	adds	r3, #4
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff f88b 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	2201      	movs	r2, #1
 8004620:	409a      	lsls	r2, r3
 8004622:	4b26      	ldr	r3, [pc, #152]	@ (80046bc <xTaskResumeAll+0x10c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4313      	orrs	r3, r2
 8004628:	4a24      	ldr	r2, [pc, #144]	@ (80046bc <xTaskResumeAll+0x10c>)
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <xTaskResumeAll+0x110>)
 800463a:	441a      	add	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7ff f819 	bl	800367a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464c:	4b1d      	ldr	r3, [pc, #116]	@ (80046c4 <xTaskResumeAll+0x114>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004656:	4b1c      	ldr	r3, [pc, #112]	@ (80046c8 <xTaskResumeAll+0x118>)
 8004658:	2201      	movs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800465c:	4b16      	ldr	r3, [pc, #88]	@ (80046b8 <xTaskResumeAll+0x108>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1cc      	bne.n	80045fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800466a:	f000 fae9 	bl	8004c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800466e:	4b17      	ldr	r3, [pc, #92]	@ (80046cc <xTaskResumeAll+0x11c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800467a:	f000 f829 	bl	80046d0 <xTaskIncrementTick>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004684:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <xTaskResumeAll+0x118>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	3b01      	subs	r3, #1
 800468e:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f1      	bne.n	800467a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <xTaskResumeAll+0x11c>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800469c:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <xTaskResumeAll+0x118>)
 800469e:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046a0:	f000 fedc 	bl	800545c <vPortExitCritical>

	return xAlreadyYielded;
 80046a4:	687b      	ldr	r3, [r7, #4]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000700 	.word	0x20000700
 80046b4:	200006d8 	.word	0x200006d8
 80046b8:	20000698 	.word	0x20000698
 80046bc:	200006e0 	.word	0x200006e0
 80046c0:	200005dc 	.word	0x200005dc
 80046c4:	200005d8 	.word	0x200005d8
 80046c8:	200006ec 	.word	0x200006ec
 80046cc:	200006e8 	.word	0x200006e8

080046d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046da:	4b42      	ldr	r3, [pc, #264]	@ (80047e4 <xTaskIncrementTick+0x114>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d175      	bne.n	80047ce <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046e2:	4b41      	ldr	r3, [pc, #260]	@ (80047e8 <xTaskIncrementTick+0x118>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3301      	adds	r3, #1
 80046e8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046ea:	4a3f      	ldr	r2, [pc, #252]	@ (80047e8 <xTaskIncrementTick+0x118>)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d121      	bne.n	800473a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046f6:	4b3d      	ldr	r3, [pc, #244]	@ (80047ec <xTaskIncrementTick+0x11c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <xTaskIncrementTick+0x48>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	603b      	str	r3, [r7, #0]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xTaskIncrementTick+0x44>
 8004718:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <xTaskIncrementTick+0x11c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <xTaskIncrementTick+0x120>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a32      	ldr	r2, [pc, #200]	@ (80047ec <xTaskIncrementTick+0x11c>)
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4a32      	ldr	r2, [pc, #200]	@ (80047f0 <xTaskIncrementTick+0x120>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b31      	ldr	r3, [pc, #196]	@ (80047f4 <xTaskIncrementTick+0x124>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	4a30      	ldr	r2, [pc, #192]	@ (80047f4 <xTaskIncrementTick+0x124>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	f000 fa83 	bl	8004c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800473a:	4b2f      	ldr	r3, [pc, #188]	@ (80047f8 <xTaskIncrementTick+0x128>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	429a      	cmp	r2, r3
 8004742:	d349      	bcc.n	80047d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004744:	4b29      	ldr	r3, [pc, #164]	@ (80047ec <xTaskIncrementTick+0x11c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <xTaskIncrementTick+0x82>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <xTaskIncrementTick+0x84>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004758:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <xTaskIncrementTick+0x128>)
 800475a:	f04f 32ff 	mov.w	r2, #4294967295
 800475e:	601a      	str	r2, [r3, #0]
					break;
 8004760:	e03a      	b.n	80047d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004762:	4b22      	ldr	r3, [pc, #136]	@ (80047ec <xTaskIncrementTick+0x11c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d203      	bcs.n	8004782 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800477a:	4a1f      	ldr	r2, [pc, #124]	@ (80047f8 <xTaskIncrementTick+0x128>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6013      	str	r3, [r2, #0]
						break;
 8004780:	e02a      	b.n	80047d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3304      	adds	r3, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe ffd2 	bl	8003730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3318      	adds	r3, #24
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe ffc9 	bl	8003730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	2201      	movs	r2, #1
 80047a4:	409a      	lsls	r2, r3
 80047a6:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <xTaskIncrementTick+0x12c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	4a13      	ldr	r2, [pc, #76]	@ (80047fc <xTaskIncrementTick+0x12c>)
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a10      	ldr	r2, [pc, #64]	@ (8004800 <xTaskIncrementTick+0x130>)
 80047be:	441a      	add	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fe ff57 	bl	800367a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047cc:	e7ba      	b.n	8004744 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <xTaskIncrementTick+0x134>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3301      	adds	r3, #1
 80047d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004804 <xTaskIncrementTick+0x134>)
 80047d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047d8:	697b      	ldr	r3, [r7, #20]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000700 	.word	0x20000700
 80047e8:	200006dc 	.word	0x200006dc
 80047ec:	20000690 	.word	0x20000690
 80047f0:	20000694 	.word	0x20000694
 80047f4:	200006f0 	.word	0x200006f0
 80047f8:	200006f8 	.word	0x200006f8
 80047fc:	200006e0 	.word	0x200006e0
 8004800:	200005dc 	.word	0x200005dc
 8004804:	200006e8 	.word	0x200006e8

08004808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800480e:	4b27      	ldr	r3, [pc, #156]	@ (80048ac <vTaskSwitchContext+0xa4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004816:	4b26      	ldr	r3, [pc, #152]	@ (80048b0 <vTaskSwitchContext+0xa8>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800481c:	e040      	b.n	80048a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800481e:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <vTaskSwitchContext+0xa8>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004824:	4b23      	ldr	r3, [pc, #140]	@ (80048b4 <vTaskSwitchContext+0xac>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	fab3 f383 	clz	r3, r3
 8004830:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004832:	7afb      	ldrb	r3, [r7, #11]
 8004834:	f1c3 031f 	rsb	r3, r3, #31
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	491f      	ldr	r1, [pc, #124]	@ (80048b8 <vTaskSwitchContext+0xb0>)
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <vTaskSwitchContext+0x5e>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	607b      	str	r3, [r7, #4]
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <vTaskSwitchContext+0x5a>
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4a11      	ldr	r2, [pc, #68]	@ (80048b8 <vTaskSwitchContext+0xb0>)
 8004872:	4413      	add	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	3308      	adds	r3, #8
 8004888:	429a      	cmp	r2, r3
 800488a:	d104      	bne.n	8004896 <vTaskSwitchContext+0x8e>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a07      	ldr	r2, [pc, #28]	@ (80048bc <vTaskSwitchContext+0xb4>)
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000700 	.word	0x20000700
 80048b0:	200006ec 	.word	0x200006ec
 80048b4:	200006e0 	.word	0x200006e0
 80048b8:	200005dc 	.word	0x200005dc
 80048bc:	200005d8 	.word	0x200005d8

080048c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10b      	bne.n	80048e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	60fb      	str	r3, [r7, #12]
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	e7fd      	b.n	80048e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048e8:	4b07      	ldr	r3, [pc, #28]	@ (8004908 <vTaskPlaceOnEventList+0x48>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3318      	adds	r3, #24
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fe fee5 	bl	80036c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048f6:	2101      	movs	r1, #1
 80048f8:	6838      	ldr	r0, [r7, #0]
 80048fa:	f000 fc27 	bl	800514c <prvAddCurrentTaskToDelayedList>
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200005d8 	.word	0x200005d8

0800490c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60fb      	str	r3, [r7, #12]
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	e7fd      	b.n	8004936 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	3318      	adds	r3, #24
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fef6 	bl	8003730 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004944:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <xTaskRemoveFromEventList+0xb0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11c      	bne.n	8004986 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe feed 	bl	8003730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	2201      	movs	r2, #1
 800495c:	409a      	lsls	r2, r3
 800495e:	4b18      	ldr	r3, [pc, #96]	@ (80049c0 <xTaskRemoveFromEventList+0xb4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4313      	orrs	r3, r2
 8004964:	4a16      	ldr	r2, [pc, #88]	@ (80049c0 <xTaskRemoveFromEventList+0xb4>)
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4a13      	ldr	r2, [pc, #76]	@ (80049c4 <xTaskRemoveFromEventList+0xb8>)
 8004976:	441a      	add	r2, r3
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7fe fe7b 	bl	800367a <vListInsertEnd>
 8004984:	e005      	b.n	8004992 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	3318      	adds	r3, #24
 800498a:	4619      	mov	r1, r3
 800498c:	480e      	ldr	r0, [pc, #56]	@ (80049c8 <xTaskRemoveFromEventList+0xbc>)
 800498e:	f7fe fe74 	bl	800367a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <xTaskRemoveFromEventList+0xc0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d905      	bls.n	80049ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049a4:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <xTaskRemoveFromEventList+0xc4>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e001      	b.n	80049b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049b0:	697b      	ldr	r3, [r7, #20]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000700 	.word	0x20000700
 80049c0:	200006e0 	.word	0x200006e0
 80049c4:	200005dc 	.word	0x200005dc
 80049c8:	20000698 	.word	0x20000698
 80049cc:	200005d8 	.word	0x200005d8
 80049d0:	200006ec 	.word	0x200006ec

080049d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <vTaskInternalSetTimeOutState+0x24>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <vTaskInternalSetTimeOutState+0x28>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	605a      	str	r2, [r3, #4]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	200006f0 	.word	0x200006f0
 80049fc:	200006dc 	.word	0x200006dc

08004a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	613b      	str	r3, [r7, #16]
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	60fb      	str	r3, [r7, #12]
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	e7fd      	b.n	8004a42 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004a46:	f000 fcd9 	bl	80053fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac0 <xTaskCheckForTimeOut+0xc0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d102      	bne.n	8004a6a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e023      	b.n	8004ab2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <xTaskCheckForTimeOut+0xc4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d007      	beq.n	8004a86 <xTaskCheckForTimeOut+0x86>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d302      	bcc.n	8004a86 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e015      	b.n	8004ab2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d20b      	bcs.n	8004aa8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff99 	bl	80049d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e004      	b.n	8004ab2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ab2:	f000 fcd3 	bl	800545c <vPortExitCritical>

	return xReturn;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3720      	adds	r7, #32
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200006dc 	.word	0x200006dc
 8004ac4:	200006f0 	.word	0x200006f0

08004ac8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004acc:	4b03      	ldr	r3, [pc, #12]	@ (8004adc <vTaskMissedYield+0x14>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	200006ec 	.word	0x200006ec

08004ae0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ae8:	f000 f84c 	bl	8004b84 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8004aec:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <prvIdleTask+0x20>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004afc:	bf00      	nop
 8004afe:	e7f3      	b.n	8004ae8 <prvIdleTask+0x8>
 8004b00:	e000ed04 	.word	0xe000ed04

08004b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	607b      	str	r3, [r7, #4]
 8004b0e:	e00c      	b.n	8004b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4a12      	ldr	r2, [pc, #72]	@ (8004b64 <prvInitialiseTaskLists+0x60>)
 8004b1c:	4413      	add	r3, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fd80 	bl	8003624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3301      	adds	r3, #1
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d9ef      	bls.n	8004b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b30:	480d      	ldr	r0, [pc, #52]	@ (8004b68 <prvInitialiseTaskLists+0x64>)
 8004b32:	f7fe fd77 	bl	8003624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b36:	480d      	ldr	r0, [pc, #52]	@ (8004b6c <prvInitialiseTaskLists+0x68>)
 8004b38:	f7fe fd74 	bl	8003624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b3c:	480c      	ldr	r0, [pc, #48]	@ (8004b70 <prvInitialiseTaskLists+0x6c>)
 8004b3e:	f7fe fd71 	bl	8003624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b42:	480c      	ldr	r0, [pc, #48]	@ (8004b74 <prvInitialiseTaskLists+0x70>)
 8004b44:	f7fe fd6e 	bl	8003624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b48:	480b      	ldr	r0, [pc, #44]	@ (8004b78 <prvInitialiseTaskLists+0x74>)
 8004b4a:	f7fe fd6b 	bl	8003624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <prvInitialiseTaskLists+0x78>)
 8004b50:	4a05      	ldr	r2, [pc, #20]	@ (8004b68 <prvInitialiseTaskLists+0x64>)
 8004b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b54:	4b0a      	ldr	r3, [pc, #40]	@ (8004b80 <prvInitialiseTaskLists+0x7c>)
 8004b56:	4a05      	ldr	r2, [pc, #20]	@ (8004b6c <prvInitialiseTaskLists+0x68>)
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200005dc 	.word	0x200005dc
 8004b68:	20000668 	.word	0x20000668
 8004b6c:	2000067c 	.word	0x2000067c
 8004b70:	20000698 	.word	0x20000698
 8004b74:	200006ac 	.word	0x200006ac
 8004b78:	200006c4 	.word	0x200006c4
 8004b7c:	20000690 	.word	0x20000690
 8004b80:	20000694 	.word	0x20000694

08004b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b8a:	e019      	b.n	8004bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b8c:	f000 fc36 	bl	80053fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b90:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <prvCheckTasksWaitingTermination+0x50>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe fdc7 	bl	8003730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd8 <prvCheckTasksWaitingTermination+0x54>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8004bd8 <prvCheckTasksWaitingTermination+0x54>)
 8004baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <prvCheckTasksWaitingTermination+0x58>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <prvCheckTasksWaitingTermination+0x58>)
 8004bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bb6:	f000 fc51 	bl	800545c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f810 	bl	8004be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <prvCheckTasksWaitingTermination+0x58>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e1      	bne.n	8004b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200006ac 	.word	0x200006ac
 8004bd8:	200006d8 	.word	0x200006d8
 8004bdc:	200006c0 	.word	0x200006c0

08004be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fdca 	bl	8005790 <vPortFree>
				vPortFree( pxTCB );
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fdc7 	bl	8005790 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c02:	e019      	b.n	8004c38 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d103      	bne.n	8004c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fdbe 	bl	8005790 <vPortFree>
	}
 8004c14:	e010      	b.n	8004c38 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d00b      	beq.n	8004c38 <prvDeleteTCB+0x58>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <prvDeleteTCB+0x54>
	}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c46:	4b0e      	ldr	r3, [pc, #56]	@ (8004c80 <prvResetNextTaskUnblockTime+0x40>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <prvResetNextTaskUnblockTime+0x14>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <prvResetNextTaskUnblockTime+0x16>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <prvResetNextTaskUnblockTime+0x44>)
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c62:	e008      	b.n	8004c76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c64:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <prvResetNextTaskUnblockTime+0x40>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4a04      	ldr	r2, [pc, #16]	@ (8004c84 <prvResetNextTaskUnblockTime+0x44>)
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	20000690 	.word	0x20000690
 8004c84:	200006f8 	.word	0x200006f8

08004c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <xTaskGetSchedulerState+0x34>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c96:	2301      	movs	r3, #1
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	e008      	b.n	8004cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c9c:	4b08      	ldr	r3, [pc, #32]	@ (8004cc0 <xTaskGetSchedulerState+0x38>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	e001      	b.n	8004cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cae:	687b      	ldr	r3, [r7, #4]
	}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	200006e4 	.word	0x200006e4
 8004cc0:	20000700 	.word	0x20000700

08004cc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d070      	beq.n	8004dbc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cda:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <xTaskPriorityDisinherit+0x104>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d00b      	beq.n	8004cfc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	60fb      	str	r3, [r7, #12]
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	e7fd      	b.n	8004cf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	60bb      	str	r3, [r7, #8]
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d20:	1e5a      	subs	r2, r3, #1
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d044      	beq.n	8004dbc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d140      	bne.n	8004dbc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fcf6 	bl	8003730 <uxListRemove>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d115      	bne.n	8004d76 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4e:	491f      	ldr	r1, [pc, #124]	@ (8004dcc <xTaskPriorityDisinherit+0x108>)
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xTaskPriorityDisinherit+0xb2>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	2201      	movs	r2, #1
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	4b18      	ldr	r3, [pc, #96]	@ (8004dd0 <xTaskPriorityDisinherit+0x10c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4013      	ands	r3, r2
 8004d72:	4a17      	ldr	r2, [pc, #92]	@ (8004dd0 <xTaskPriorityDisinherit+0x10c>)
 8004d74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	f1c3 0207 	rsb	r2, r3, #7
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	2201      	movs	r2, #1
 8004d90:	409a      	lsls	r2, r3
 8004d92:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <xTaskPriorityDisinherit+0x10c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd0 <xTaskPriorityDisinherit+0x10c>)
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4a08      	ldr	r2, [pc, #32]	@ (8004dcc <xTaskPriorityDisinherit+0x108>)
 8004daa:	441a      	add	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f7fe fc61 	bl	800367a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004db8:	2301      	movs	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004dbc:	697b      	ldr	r3, [r7, #20]
	}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200005d8 	.word	0x200005d8
 8004dcc:	200005dc 	.word	0x200005dc
 8004dd0:	200006e0 	.word	0x200006e0

08004dd4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004de2:	f000 fb0b 	bl	80053fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004de6:	4b26      	ldr	r3, [pc, #152]	@ (8004e80 <xTaskNotifyWait+0xac>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d01a      	beq.n	8004e2a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004df4:	4b22      	ldr	r3, [pc, #136]	@ (8004e80 <xTaskNotifyWait+0xac>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	43d2      	mvns	r2, r2
 8004dfe:	400a      	ands	r2, r1
 8004e00:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004e02:	4b1f      	ldr	r3, [pc, #124]	@ (8004e80 <xTaskNotifyWait+0xac>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e12:	2101      	movs	r1, #1
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	f000 f999 	bl	800514c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <xTaskNotifyWait+0xb0>)
 8004e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004e2a:	f000 fb17 	bl	800545c <vPortExitCritical>

		taskENTER_CRITICAL();
 8004e2e:	f000 fae5 	bl	80053fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004e38:	4b11      	ldr	r3, [pc, #68]	@ (8004e80 <xTaskNotifyWait+0xac>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004e42:	4b0f      	ldr	r3, [pc, #60]	@ (8004e80 <xTaskNotifyWait+0xac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d002      	beq.n	8004e56 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e008      	b.n	8004e68 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <xTaskNotifyWait+0xac>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	43d2      	mvns	r2, r2
 8004e60:	400a      	ands	r2, r1
 8004e62:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <xTaskNotifyWait+0xac>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8004e72:	f000 faf3 	bl	800545c <vPortExitCritical>

		return xReturn;
 8004e76:	697b      	ldr	r3, [r7, #20]
	}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200005d8 	.word	0x200005d8
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	@ 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <xTaskGenericNotify+0x32>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	61bb      	str	r3, [r7, #24]
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	e7fd      	b.n	8004eb6 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004ebe:	f000 fa9d 	bl	80053fc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ed6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d827      	bhi.n	8004f36 <xTaskGenericNotify+0xae>
 8004ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eec <xTaskGenericNotify+0x64>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004f37 	.word	0x08004f37
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f0f 	.word	0x08004f0f
 8004ef8:	08004f1b 	.word	0x08004f1b
 8004efc:	08004f23 	.word	0x08004f23
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004f0c:	e013      	b.n	8004f36 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004f18:	e00d      	b.n	8004f36 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004f20:	e009      	b.n	8004f36 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d003      	beq.n	8004f30 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004f2e:	e001      	b.n	8004f34 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8004f34:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d12d      	bne.n	8004f98 <xTaskGenericNotify+0x110>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe fbf5 	bl	8003730 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <xTaskGenericNotify+0x120>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	4a14      	ldr	r2, [pc, #80]	@ (8004fa8 <xTaskGenericNotify+0x120>)
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <xTaskGenericNotify+0x124>)
 8004f66:	441a      	add	r2, r3
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f7fe fb83 	bl	800367a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <xTaskGenericNotify+0x10c>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	617b      	str	r3, [r7, #20]
}
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
 8004f92:	e7fd      	b.n	8004f90 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f94:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <xTaskGenericNotify+0x128>)
 8004f96:	681b      	ldr	r3, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004f98:	f000 fa60 	bl	800545c <vPortExitCritical>

		return xReturn;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3728      	adds	r7, #40	@ 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200006e0 	.word	0x200006e0
 8004fac:	200005dc 	.word	0x200005dc
 8004fb0:	200005d8 	.word	0x200005d8

08004fb4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08e      	sub	sp, #56	@ 0x38
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fe6:	f000 facb 	bl	8005580 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8004fee:	f3ef 8211 	mrs	r2, BASEPRI
 8004ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	623a      	str	r2, [r7, #32]
 8005004:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005006:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d829      	bhi.n	8005084 <xTaskGenericNotifyFromISR+0xd0>
 8005030:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <xTaskGenericNotifyFromISR+0x84>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	08005085 	.word	0x08005085
 800503c:	0800504d 	.word	0x0800504d
 8005040:	0800505b 	.word	0x0800505b
 8005044:	08005067 	.word	0x08005067
 8005048:	0800506f 	.word	0x0800506f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	431a      	orrs	r2, r3
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005058:	e014      	b.n	8005084 <xTaskGenericNotifyFromISR+0xd0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005064:	e00e      	b.n	8005084 <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800506c:	e00a      	b.n	8005084 <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800506e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005072:	2b02      	cmp	r3, #2
 8005074:	d003      	beq.n	800507e <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800507c:	e001      	b.n	8005082 <xTaskGenericNotifyFromISR+0xce>
						xReturn = pdFAIL;
 800507e:	2300      	movs	r3, #0
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8005082:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005084:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005088:	2b01      	cmp	r3, #1
 800508a:	d147      	bne.n	800511c <xTaskGenericNotifyFromISR+0x168>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800508c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00b      	beq.n	80050ac <xTaskGenericNotifyFromISR+0xf8>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	61bb      	str	r3, [r7, #24]
}
 80050a6:	bf00      	nop
 80050a8:	bf00      	nop
 80050aa:	e7fd      	b.n	80050a8 <xTaskGenericNotifyFromISR+0xf4>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ac:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <xTaskGenericNotifyFromISR+0x180>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d11c      	bne.n	80050ee <xTaskGenericNotifyFromISR+0x13a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe fb39 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	2201      	movs	r2, #1
 80050c4:	409a      	lsls	r2, r3
 80050c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005138 <xTaskGenericNotifyFromISR+0x184>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005138 <xTaskGenericNotifyFromISR+0x184>)
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a17      	ldr	r2, [pc, #92]	@ (800513c <xTaskGenericNotifyFromISR+0x188>)
 80050de:	441a      	add	r2, r3
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fe fac7 	bl	800367a <vListInsertEnd>
 80050ec:	e005      	b.n	80050fa <xTaskGenericNotifyFromISR+0x146>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	3318      	adds	r3, #24
 80050f2:	4619      	mov	r1, r3
 80050f4:	4812      	ldr	r0, [pc, #72]	@ (8005140 <xTaskGenericNotifyFromISR+0x18c>)
 80050f6:	f7fe fac0 	bl	800367a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fe:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <xTaskGenericNotifyFromISR+0x190>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	429a      	cmp	r2, r3
 8005106:	d909      	bls.n	800511c <xTaskGenericNotifyFromISR+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <xTaskGenericNotifyFromISR+0x162>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800510e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e002      	b.n	800511c <xTaskGenericNotifyFromISR+0x168>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005116:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <xTaskGenericNotifyFromISR+0x194>)
 8005118:	2201      	movs	r2, #1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f383 8811 	msr	BASEPRI, r3
}
 8005126:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800512a:	4618      	mov	r0, r3
 800512c:	3738      	adds	r7, #56	@ 0x38
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000700 	.word	0x20000700
 8005138:	200006e0 	.word	0x200006e0
 800513c:	200005dc 	.word	0x200005dc
 8005140:	20000698 	.word	0x20000698
 8005144:	200005d8 	.word	0x200005d8
 8005148:	200006ec 	.word	0x200006ec

0800514c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005156:	4b29      	ldr	r3, [pc, #164]	@ (80051fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800515c:	4b28      	ldr	r3, [pc, #160]	@ (8005200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3304      	adds	r3, #4
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe fae4 	bl	8003730 <uxListRemove>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800516e:	4b24      	ldr	r3, [pc, #144]	@ (8005200 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	2201      	movs	r2, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43da      	mvns	r2, r3
 800517c:	4b21      	ldr	r3, [pc, #132]	@ (8005204 <prvAddCurrentTaskToDelayedList+0xb8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4013      	ands	r3, r2
 8005182:	4a20      	ldr	r2, [pc, #128]	@ (8005204 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005184:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d10a      	bne.n	80051a4 <prvAddCurrentTaskToDelayedList+0x58>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005194:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3304      	adds	r3, #4
 800519a:	4619      	mov	r1, r3
 800519c:	481a      	ldr	r0, [pc, #104]	@ (8005208 <prvAddCurrentTaskToDelayedList+0xbc>)
 800519e:	f7fe fa6c 	bl	800367a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051a2:	e026      	b.n	80051f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051ac:	4b14      	ldr	r3, [pc, #80]	@ (8005200 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d209      	bcs.n	80051d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051bc:	4b13      	ldr	r3, [pc, #76]	@ (800520c <prvAddCurrentTaskToDelayedList+0xc0>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fe fa79 	bl	80036c0 <vListInsert>
}
 80051ce:	e010      	b.n	80051f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005210 <prvAddCurrentTaskToDelayedList+0xc4>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7fe fa6f 	bl	80036c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d202      	bcs.n	80051f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051ec:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6013      	str	r3, [r2, #0]
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200006dc 	.word	0x200006dc
 8005200:	200005d8 	.word	0x200005d8
 8005204:	200006e0 	.word	0x200006e0
 8005208:	200006c4 	.word	0x200006c4
 800520c:	20000694 	.word	0x20000694
 8005210:	20000690 	.word	0x20000690
 8005214:	200006f8 	.word	0x200006f8

08005218 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b04      	subs	r3, #4
 8005228:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3b04      	subs	r3, #4
 8005236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3b04      	subs	r3, #4
 8005246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005248:	4a08      	ldr	r2, [pc, #32]	@ (800526c <pxPortInitialiseStack+0x54>)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3b14      	subs	r3, #20
 8005252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b20      	subs	r3, #32
 800525e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005260:	68fb      	ldr	r3, [r7, #12]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	08005271 	.word	0x08005271

08005270 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005276:	2300      	movs	r3, #0
 8005278:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800527a:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <prvTaskExitError+0x54>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d00b      	beq.n	800529c <prvTaskExitError+0x2c>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60fb      	str	r3, [r7, #12]
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <prvTaskExitError+0x28>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60bb      	str	r3, [r7, #8]
}
 80052ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052b0:	bf00      	nop
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0fc      	beq.n	80052b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	20000018 	.word	0x20000018
	...

080052d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052d0:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <pxCurrentTCBConst2>)
 80052d2:	6819      	ldr	r1, [r3, #0]
 80052d4:	6808      	ldr	r0, [r1, #0]
 80052d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052da:	f380 8809 	msr	PSP, r0
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f380 8811 	msr	BASEPRI, r0
 80052ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80052ee:	4770      	bx	lr

080052f0 <pxCurrentTCBConst2>:
 80052f0:	200005d8 	.word	0x200005d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop

080052f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80052f8:	4806      	ldr	r0, [pc, #24]	@ (8005314 <prvPortStartFirstTask+0x1c>)
 80052fa:	6800      	ldr	r0, [r0, #0]
 80052fc:	6800      	ldr	r0, [r0, #0]
 80052fe:	f380 8808 	msr	MSP, r0
 8005302:	b662      	cpsie	i
 8005304:	b661      	cpsie	f
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	df00      	svc	0
 8005310:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005312:	bf00      	nop
 8005314:	e000ed08 	.word	0xe000ed08

08005318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800531e:	4b32      	ldr	r3, [pc, #200]	@ (80053e8 <xPortStartScheduler+0xd0>)
 8005320:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	22ff      	movs	r2, #255	@ 0xff
 800532e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4b2a      	ldr	r3, [pc, #168]	@ (80053ec <xPortStartScheduler+0xd4>)
 8005344:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005346:	4b2a      	ldr	r3, [pc, #168]	@ (80053f0 <xPortStartScheduler+0xd8>)
 8005348:	2207      	movs	r2, #7
 800534a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800534c:	e009      	b.n	8005362 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800534e:	4b28      	ldr	r3, [pc, #160]	@ (80053f0 <xPortStartScheduler+0xd8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3b01      	subs	r3, #1
 8005354:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <xPortStartScheduler+0xd8>)
 8005356:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536a:	2b80      	cmp	r3, #128	@ 0x80
 800536c:	d0ef      	beq.n	800534e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800536e:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <xPortStartScheduler+0xd8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1c3 0307 	rsb	r3, r3, #7
 8005376:	2b04      	cmp	r3, #4
 8005378:	d00b      	beq.n	8005392 <xPortStartScheduler+0x7a>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	60bb      	str	r3, [r7, #8]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005392:	4b17      	ldr	r3, [pc, #92]	@ (80053f0 <xPortStartScheduler+0xd8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	4a15      	ldr	r2, [pc, #84]	@ (80053f0 <xPortStartScheduler+0xd8>)
 800539a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800539c:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <xPortStartScheduler+0xd8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053a4:	4a12      	ldr	r2, [pc, #72]	@ (80053f0 <xPortStartScheduler+0xd8>)
 80053a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053b0:	4b10      	ldr	r3, [pc, #64]	@ (80053f4 <xPortStartScheduler+0xdc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0f      	ldr	r2, [pc, #60]	@ (80053f4 <xPortStartScheduler+0xdc>)
 80053b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053bc:	4b0d      	ldr	r3, [pc, #52]	@ (80053f4 <xPortStartScheduler+0xdc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a0c      	ldr	r2, [pc, #48]	@ (80053f4 <xPortStartScheduler+0xdc>)
 80053c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80053c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053c8:	f000 f8b8 	bl	800553c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <xPortStartScheduler+0xe0>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053d2:	f7ff ff91 	bl	80052f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053d6:	f7ff fa17 	bl	8004808 <vTaskSwitchContext>
	prvTaskExitError();
 80053da:	f7ff ff49 	bl	8005270 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	e000e400 	.word	0xe000e400
 80053ec:	20000704 	.word	0x20000704
 80053f0:	20000708 	.word	0x20000708
 80053f4:	e000ed20 	.word	0xe000ed20
 80053f8:	20000018 	.word	0x20000018

080053fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	607b      	str	r3, [r7, #4]
}
 8005414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005416:	4b0f      	ldr	r3, [pc, #60]	@ (8005454 <vPortEnterCritical+0x58>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3301      	adds	r3, #1
 800541c:	4a0d      	ldr	r2, [pc, #52]	@ (8005454 <vPortEnterCritical+0x58>)
 800541e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005420:	4b0c      	ldr	r3, [pc, #48]	@ (8005454 <vPortEnterCritical+0x58>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d110      	bne.n	800544a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <vPortEnterCritical+0x5c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <vPortEnterCritical+0x4e>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	603b      	str	r3, [r7, #0]
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	e7fd      	b.n	8005446 <vPortEnterCritical+0x4a>
	}
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	20000018 	.word	0x20000018
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005462:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <vPortExitCritical+0x50>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <vPortExitCritical+0x26>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	607b      	str	r3, [r7, #4]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005482:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <vPortExitCritical+0x50>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3b01      	subs	r3, #1
 8005488:	4a08      	ldr	r2, [pc, #32]	@ (80054ac <vPortExitCritical+0x50>)
 800548a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800548c:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <vPortExitCritical+0x50>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <vPortExitCritical+0x44>
 8005494:	2300      	movs	r3, #0
 8005496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000018 	.word	0x20000018

080054b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054b0:	f3ef 8009 	mrs	r0, PSP
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <pxCurrentTCBConst>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054c0:	6010      	str	r0, [r2, #0]
 80054c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80054c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054ca:	f380 8811 	msr	BASEPRI, r0
 80054ce:	f7ff f99b 	bl	8004808 <vTaskSwitchContext>
 80054d2:	f04f 0000 	mov.w	r0, #0
 80054d6:	f380 8811 	msr	BASEPRI, r0
 80054da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	6808      	ldr	r0, [r1, #0]
 80054e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054e6:	f380 8809 	msr	PSP, r0
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	4770      	bx	lr

080054f0 <pxCurrentTCBConst>:
 80054f0:	200005d8 	.word	0x200005d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	607b      	str	r3, [r7, #4]
}
 8005510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005512:	f7ff f8dd 	bl	80046d0 <xTaskIncrementTick>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <SysTick_Handler+0x40>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f383 8811 	msr	BASEPRI, r3
}
 800552e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005540:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <vPortSetupTimerInterrupt+0x30>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005546:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <vPortSetupTimerInterrupt+0x34>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800554c:	4b09      	ldr	r3, [pc, #36]	@ (8005574 <vPortSetupTimerInterrupt+0x38>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a09      	ldr	r2, [pc, #36]	@ (8005578 <vPortSetupTimerInterrupt+0x3c>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	4a08      	ldr	r2, [pc, #32]	@ (800557c <vPortSetupTimerInterrupt+0x40>)
 800555a:	3b01      	subs	r3, #1
 800555c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800555e:	4b03      	ldr	r3, [pc, #12]	@ (800556c <vPortSetupTimerInterrupt+0x30>)
 8005560:	2207      	movs	r2, #7
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr
 800556c:	e000e010 	.word	0xe000e010
 8005570:	e000e018 	.word	0xe000e018
 8005574:	2000000c 	.word	0x2000000c
 8005578:	10624dd3 	.word	0x10624dd3
 800557c:	e000e014 	.word	0xe000e014

08005580 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005586:	f3ef 8305 	mrs	r3, IPSR
 800558a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b0f      	cmp	r3, #15
 8005590:	d915      	bls.n	80055be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005592:	4a17      	ldr	r2, [pc, #92]	@ (80055f0 <vPortValidateInterruptPriority+0x70>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800559c:	4b15      	ldr	r3, [pc, #84]	@ (80055f4 <vPortValidateInterruptPriority+0x74>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	7afa      	ldrb	r2, [r7, #11]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d20b      	bcs.n	80055be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	607b      	str	r3, [r7, #4]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055be:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <vPortValidateInterruptPriority+0x78>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055c6:	4b0d      	ldr	r3, [pc, #52]	@ (80055fc <vPortValidateInterruptPriority+0x7c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d90b      	bls.n	80055e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	603b      	str	r3, [r7, #0]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <vPortValidateInterruptPriority+0x62>
	}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	e000e3f0 	.word	0xe000e3f0
 80055f4:	20000704 	.word	0x20000704
 80055f8:	e000ed0c 	.word	0xe000ed0c
 80055fc:	20000708 	.word	0x20000708

08005600 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	@ 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005608:	2300      	movs	r3, #0
 800560a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800560c:	f7fe ffc2 	bl	8004594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005610:	4b5a      	ldr	r3, [pc, #360]	@ (800577c <pvPortMalloc+0x17c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005618:	f000 f916 	bl	8005848 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800561c:	4b58      	ldr	r3, [pc, #352]	@ (8005780 <pvPortMalloc+0x180>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	f040 8090 	bne.w	800574a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01e      	beq.n	800566e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005630:	2208      	movs	r2, #8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4413      	add	r3, r2
 8005636:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b00      	cmp	r3, #0
 8005640:	d015      	beq.n	800566e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f023 0307 	bic.w	r3, r3, #7
 8005648:	3308      	adds	r3, #8
 800564a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <pvPortMalloc+0x6e>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	617b      	str	r3, [r7, #20]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d06a      	beq.n	800574a <pvPortMalloc+0x14a>
 8005674:	4b43      	ldr	r3, [pc, #268]	@ (8005784 <pvPortMalloc+0x184>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d865      	bhi.n	800574a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800567e:	4b42      	ldr	r3, [pc, #264]	@ (8005788 <pvPortMalloc+0x188>)
 8005680:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005682:	4b41      	ldr	r3, [pc, #260]	@ (8005788 <pvPortMalloc+0x188>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005688:	e004      	b.n	8005694 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d903      	bls.n	80056a6 <pvPortMalloc+0xa6>
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f1      	bne.n	800568a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056a6:	4b35      	ldr	r3, [pc, #212]	@ (800577c <pvPortMalloc+0x17c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d04c      	beq.n	800574a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2208      	movs	r2, #8
 80056b6:	4413      	add	r3, r2
 80056b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	2308      	movs	r3, #8
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d920      	bls.n	8005714 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4413      	add	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00b      	beq.n	80056fc <pvPortMalloc+0xfc>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	613b      	str	r3, [r7, #16]
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	e7fd      	b.n	80056f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800570e:	69b8      	ldr	r0, [r7, #24]
 8005710:	f000 f8fc 	bl	800590c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005714:	4b1b      	ldr	r3, [pc, #108]	@ (8005784 <pvPortMalloc+0x184>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	4a19      	ldr	r2, [pc, #100]	@ (8005784 <pvPortMalloc+0x184>)
 8005720:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005722:	4b18      	ldr	r3, [pc, #96]	@ (8005784 <pvPortMalloc+0x184>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b19      	ldr	r3, [pc, #100]	@ (800578c <pvPortMalloc+0x18c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d203      	bcs.n	8005736 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800572e:	4b15      	ldr	r3, [pc, #84]	@ (8005784 <pvPortMalloc+0x184>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a16      	ldr	r2, [pc, #88]	@ (800578c <pvPortMalloc+0x18c>)
 8005734:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	4b11      	ldr	r3, [pc, #68]	@ (8005780 <pvPortMalloc+0x180>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	431a      	orrs	r2, r3
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800574a:	f7fe ff31 	bl	80045b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <pvPortMalloc+0x170>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <pvPortMalloc+0x16c>
	return pvReturn;
 8005770:	69fb      	ldr	r3, [r7, #28]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3728      	adds	r7, #40	@ 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20002714 	.word	0x20002714
 8005780:	20002720 	.word	0x20002720
 8005784:	20002718 	.word	0x20002718
 8005788:	2000270c 	.word	0x2000270c
 800578c:	2000271c 	.word	0x2000271c

08005790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04a      	beq.n	8005838 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057a2:	2308      	movs	r3, #8
 80057a4:	425b      	negs	r3, r3
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4b22      	ldr	r3, [pc, #136]	@ (8005840 <vPortFree+0xb0>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10b      	bne.n	80057d6 <vPortFree+0x46>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60fb      	str	r3, [r7, #12]
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	e7fd      	b.n	80057d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <vPortFree+0x66>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60bb      	str	r3, [r7, #8]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <vPortFree+0xb0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d019      	beq.n	8005838 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d115      	bne.n	8005838 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	4b0b      	ldr	r3, [pc, #44]	@ (8005840 <vPortFree+0xb0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	43db      	mvns	r3, r3
 8005816:	401a      	ands	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800581c:	f7fe feba 	bl	8004594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <vPortFree+0xb4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4413      	add	r3, r2
 800582a:	4a06      	ldr	r2, [pc, #24]	@ (8005844 <vPortFree+0xb4>)
 800582c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800582e:	6938      	ldr	r0, [r7, #16]
 8005830:	f000 f86c 	bl	800590c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005834:	f7fe febc 	bl	80045b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005838:	bf00      	nop
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20002720 	.word	0x20002720
 8005844:	20002718 	.word	0x20002718

08005848 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800584e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005852:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005854:	4b27      	ldr	r3, [pc, #156]	@ (80058f4 <prvHeapInit+0xac>)
 8005856:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3307      	adds	r3, #7
 8005866:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0307 	bic.w	r3, r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	4a1f      	ldr	r2, [pc, #124]	@ (80058f4 <prvHeapInit+0xac>)
 8005878:	4413      	add	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005880:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <prvHeapInit+0xb0>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005886:	4b1c      	ldr	r3, [pc, #112]	@ (80058f8 <prvHeapInit+0xb0>)
 8005888:	2200      	movs	r2, #0
 800588a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4413      	add	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005894:	2208      	movs	r2, #8
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1a9b      	subs	r3, r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0307 	bic.w	r3, r3, #7
 80058a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a15      	ldr	r2, [pc, #84]	@ (80058fc <prvHeapInit+0xb4>)
 80058a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058aa:	4b14      	ldr	r3, [pc, #80]	@ (80058fc <prvHeapInit+0xb4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2200      	movs	r2, #0
 80058b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058b2:	4b12      	ldr	r3, [pc, #72]	@ (80058fc <prvHeapInit+0xb4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	1ad2      	subs	r2, r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058c8:	4b0c      	ldr	r3, [pc, #48]	@ (80058fc <prvHeapInit+0xb4>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005900 <prvHeapInit+0xb8>)
 80058d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4a09      	ldr	r2, [pc, #36]	@ (8005904 <prvHeapInit+0xbc>)
 80058de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058e0:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <prvHeapInit+0xc0>)
 80058e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058e6:	601a      	str	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	2000070c 	.word	0x2000070c
 80058f8:	2000270c 	.word	0x2000270c
 80058fc:	20002714 	.word	0x20002714
 8005900:	2000271c 	.word	0x2000271c
 8005904:	20002718 	.word	0x20002718
 8005908:	20002720 	.word	0x20002720

0800590c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005914:	4b27      	ldr	r3, [pc, #156]	@ (80059b4 <prvInsertBlockIntoFreeList+0xa8>)
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e002      	b.n	8005920 <prvInsertBlockIntoFreeList+0x14>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d8f7      	bhi.n	800591a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	4413      	add	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d108      	bne.n	800594e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	441a      	add	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	441a      	add	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d118      	bne.n	8005994 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b14      	ldr	r3, [pc, #80]	@ (80059b8 <prvInsertBlockIntoFreeList+0xac>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d00d      	beq.n	800598a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	441a      	add	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e008      	b.n	800599c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800598a:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <prvInsertBlockIntoFreeList+0xac>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e003      	b.n	800599c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d002      	beq.n	80059aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr
 80059b4:	2000270c 	.word	0x2000270c
 80059b8:	20002714 	.word	0x20002714

080059bc <siprintf>:
 80059bc:	b40e      	push	{r1, r2, r3}
 80059be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059c2:	b500      	push	{lr}
 80059c4:	b09c      	sub	sp, #112	@ 0x70
 80059c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80059c8:	9002      	str	r0, [sp, #8]
 80059ca:	9006      	str	r0, [sp, #24]
 80059cc:	9107      	str	r1, [sp, #28]
 80059ce:	9104      	str	r1, [sp, #16]
 80059d0:	4808      	ldr	r0, [pc, #32]	@ (80059f4 <siprintf+0x38>)
 80059d2:	4909      	ldr	r1, [pc, #36]	@ (80059f8 <siprintf+0x3c>)
 80059d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d8:	9105      	str	r1, [sp, #20]
 80059da:	6800      	ldr	r0, [r0, #0]
 80059dc:	a902      	add	r1, sp, #8
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	f000 f9ba 	bl	8005d58 <_svfiprintf_r>
 80059e4:	2200      	movs	r2, #0
 80059e6:	9b02      	ldr	r3, [sp, #8]
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	b01c      	add	sp, #112	@ 0x70
 80059ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80059f0:	b003      	add	sp, #12
 80059f2:	4770      	bx	lr
 80059f4:	2000001c 	.word	0x2000001c
 80059f8:	ffff0208 	.word	0xffff0208

080059fc <memset>:
 80059fc:	4603      	mov	r3, r0
 80059fe:	4402      	add	r2, r0
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d100      	bne.n	8005a06 <memset+0xa>
 8005a04:	4770      	bx	lr
 8005a06:	f803 1b01 	strb.w	r1, [r3], #1
 8005a0a:	e7f9      	b.n	8005a00 <memset+0x4>

08005a0c <strncmp>:
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	b16a      	cbz	r2, 8005a2c <strncmp+0x20>
 8005a10:	3901      	subs	r1, #1
 8005a12:	1884      	adds	r4, r0, r2
 8005a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d103      	bne.n	8005a28 <strncmp+0x1c>
 8005a20:	42a0      	cmp	r0, r4
 8005a22:	d001      	beq.n	8005a28 <strncmp+0x1c>
 8005a24:	2a00      	cmp	r2, #0
 8005a26:	d1f5      	bne.n	8005a14 <strncmp+0x8>
 8005a28:	1ad0      	subs	r0, r2, r3
 8005a2a:	bd10      	pop	{r4, pc}
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	e7fc      	b.n	8005a2a <strncmp+0x1e>

08005a30 <__errno>:
 8005a30:	4b01      	ldr	r3, [pc, #4]	@ (8005a38 <__errno+0x8>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	2000001c 	.word	0x2000001c

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	2600      	movs	r6, #0
 8005a40:	4d0c      	ldr	r5, [pc, #48]	@ (8005a74 <__libc_init_array+0x38>)
 8005a42:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a44:	1b64      	subs	r4, r4, r5
 8005a46:	10a4      	asrs	r4, r4, #2
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	f000 fc80 	bl	8006350 <_init>
 8005a50:	2600      	movs	r6, #0
 8005a52:	4d0a      	ldr	r5, [pc, #40]	@ (8005a7c <__libc_init_array+0x40>)
 8005a54:	4c0a      	ldr	r4, [pc, #40]	@ (8005a80 <__libc_init_array+0x44>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	080065cc 	.word	0x080065cc
 8005a78:	080065cc 	.word	0x080065cc
 8005a7c:	080065cc 	.word	0x080065cc
 8005a80:	080065d0 	.word	0x080065d0

08005a84 <__retarget_lock_acquire_recursive>:
 8005a84:	4770      	bx	lr

08005a86 <__retarget_lock_release_recursive>:
 8005a86:	4770      	bx	lr

08005a88 <strcpy>:
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a8e:	f803 2b01 	strb.w	r2, [r3], #1
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d1f9      	bne.n	8005a8a <strcpy+0x2>
 8005a96:	4770      	bx	lr

08005a98 <memcpy>:
 8005a98:	440a      	add	r2, r1
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005aa0:	d100      	bne.n	8005aa4 <memcpy+0xc>
 8005aa2:	4770      	bx	lr
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aaa:	4291      	cmp	r1, r2
 8005aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ab0:	d1f9      	bne.n	8005aa6 <memcpy+0xe>
 8005ab2:	bd10      	pop	{r4, pc}

08005ab4 <_free_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d040      	beq.n	8005b3e <_free_r+0x8a>
 8005abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac0:	1f0c      	subs	r4, r1, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bfb8      	it	lt
 8005ac6:	18e4      	addlt	r4, r4, r3
 8005ac8:	f000 f8de 	bl	8005c88 <__malloc_lock>
 8005acc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b40 <_free_r+0x8c>)
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	b933      	cbnz	r3, 8005ae0 <_free_r+0x2c>
 8005ad2:	6063      	str	r3, [r4, #4]
 8005ad4:	6014      	str	r4, [r2, #0]
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005adc:	f000 b8da 	b.w	8005c94 <__malloc_unlock>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d908      	bls.n	8005af6 <_free_r+0x42>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	1821      	adds	r1, r4, r0
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	bf01      	itttt	eq
 8005aec:	6819      	ldreq	r1, [r3, #0]
 8005aee:	685b      	ldreq	r3, [r3, #4]
 8005af0:	1809      	addeq	r1, r1, r0
 8005af2:	6021      	streq	r1, [r4, #0]
 8005af4:	e7ed      	b.n	8005ad2 <_free_r+0x1e>
 8005af6:	461a      	mov	r2, r3
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	b10b      	cbz	r3, 8005b00 <_free_r+0x4c>
 8005afc:	42a3      	cmp	r3, r4
 8005afe:	d9fa      	bls.n	8005af6 <_free_r+0x42>
 8005b00:	6811      	ldr	r1, [r2, #0]
 8005b02:	1850      	adds	r0, r2, r1
 8005b04:	42a0      	cmp	r0, r4
 8005b06:	d10b      	bne.n	8005b20 <_free_r+0x6c>
 8005b08:	6820      	ldr	r0, [r4, #0]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	1850      	adds	r0, r2, r1
 8005b0e:	4283      	cmp	r3, r0
 8005b10:	6011      	str	r1, [r2, #0]
 8005b12:	d1e0      	bne.n	8005ad6 <_free_r+0x22>
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4408      	add	r0, r1
 8005b1a:	6010      	str	r0, [r2, #0]
 8005b1c:	6053      	str	r3, [r2, #4]
 8005b1e:	e7da      	b.n	8005ad6 <_free_r+0x22>
 8005b20:	d902      	bls.n	8005b28 <_free_r+0x74>
 8005b22:	230c      	movs	r3, #12
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	e7d6      	b.n	8005ad6 <_free_r+0x22>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	1821      	adds	r1, r4, r0
 8005b2c:	428b      	cmp	r3, r1
 8005b2e:	bf01      	itttt	eq
 8005b30:	6819      	ldreq	r1, [r3, #0]
 8005b32:	685b      	ldreq	r3, [r3, #4]
 8005b34:	1809      	addeq	r1, r1, r0
 8005b36:	6021      	streq	r1, [r4, #0]
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	6054      	str	r4, [r2, #4]
 8005b3c:	e7cb      	b.n	8005ad6 <_free_r+0x22>
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	20002868 	.word	0x20002868

08005b44 <sbrk_aligned>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4e0f      	ldr	r6, [pc, #60]	@ (8005b84 <sbrk_aligned+0x40>)
 8005b48:	460c      	mov	r4, r1
 8005b4a:	6831      	ldr	r1, [r6, #0]
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	b911      	cbnz	r1, 8005b56 <sbrk_aligned+0x12>
 8005b50:	f000 fbaa 	bl	80062a8 <_sbrk_r>
 8005b54:	6030      	str	r0, [r6, #0]
 8005b56:	4621      	mov	r1, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 fba5 	bl	80062a8 <_sbrk_r>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d103      	bne.n	8005b6a <sbrk_aligned+0x26>
 8005b62:	f04f 34ff 	mov.w	r4, #4294967295
 8005b66:	4620      	mov	r0, r4
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
 8005b6a:	1cc4      	adds	r4, r0, #3
 8005b6c:	f024 0403 	bic.w	r4, r4, #3
 8005b70:	42a0      	cmp	r0, r4
 8005b72:	d0f8      	beq.n	8005b66 <sbrk_aligned+0x22>
 8005b74:	1a21      	subs	r1, r4, r0
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 fb96 	bl	80062a8 <_sbrk_r>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d1f2      	bne.n	8005b66 <sbrk_aligned+0x22>
 8005b80:	e7ef      	b.n	8005b62 <sbrk_aligned+0x1e>
 8005b82:	bf00      	nop
 8005b84:	20002864 	.word	0x20002864

08005b88 <_malloc_r>:
 8005b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	1ccd      	adds	r5, r1, #3
 8005b8e:	f025 0503 	bic.w	r5, r5, #3
 8005b92:	3508      	adds	r5, #8
 8005b94:	2d0c      	cmp	r5, #12
 8005b96:	bf38      	it	cc
 8005b98:	250c      	movcc	r5, #12
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	db01      	blt.n	8005ba4 <_malloc_r+0x1c>
 8005ba0:	42a9      	cmp	r1, r5
 8005ba2:	d904      	bls.n	8005bae <_malloc_r+0x26>
 8005ba4:	230c      	movs	r3, #12
 8005ba6:	6033      	str	r3, [r6, #0]
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c84 <_malloc_r+0xfc>
 8005bb2:	f000 f869 	bl	8005c88 <__malloc_lock>
 8005bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bba:	461c      	mov	r4, r3
 8005bbc:	bb44      	cbnz	r4, 8005c10 <_malloc_r+0x88>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7ff ffbf 	bl	8005b44 <sbrk_aligned>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	4604      	mov	r4, r0
 8005bca:	d158      	bne.n	8005c7e <_malloc_r+0xf6>
 8005bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8005bd0:	4627      	mov	r7, r4
 8005bd2:	2f00      	cmp	r7, #0
 8005bd4:	d143      	bne.n	8005c5e <_malloc_r+0xd6>
 8005bd6:	2c00      	cmp	r4, #0
 8005bd8:	d04b      	beq.n	8005c72 <_malloc_r+0xea>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4630      	mov	r0, r6
 8005be0:	eb04 0903 	add.w	r9, r4, r3
 8005be4:	f000 fb60 	bl	80062a8 <_sbrk_r>
 8005be8:	4581      	cmp	r9, r0
 8005bea:	d142      	bne.n	8005c72 <_malloc_r+0xea>
 8005bec:	6821      	ldr	r1, [r4, #0]
 8005bee:	4630      	mov	r0, r6
 8005bf0:	1a6d      	subs	r5, r5, r1
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	f7ff ffa6 	bl	8005b44 <sbrk_aligned>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d03a      	beq.n	8005c72 <_malloc_r+0xea>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	442b      	add	r3, r5
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	f8d8 3000 	ldr.w	r3, [r8]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	bb62      	cbnz	r2, 8005c64 <_malloc_r+0xdc>
 8005c0a:	f8c8 7000 	str.w	r7, [r8]
 8005c0e:	e00f      	b.n	8005c30 <_malloc_r+0xa8>
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	1b52      	subs	r2, r2, r5
 8005c14:	d420      	bmi.n	8005c58 <_malloc_r+0xd0>
 8005c16:	2a0b      	cmp	r2, #11
 8005c18:	d917      	bls.n	8005c4a <_malloc_r+0xc2>
 8005c1a:	1961      	adds	r1, r4, r5
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	6025      	str	r5, [r4, #0]
 8005c20:	bf18      	it	ne
 8005c22:	6059      	strne	r1, [r3, #4]
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	bf08      	it	eq
 8005c28:	f8c8 1000 	streq.w	r1, [r8]
 8005c2c:	5162      	str	r2, [r4, r5]
 8005c2e:	604b      	str	r3, [r1, #4]
 8005c30:	4630      	mov	r0, r6
 8005c32:	f000 f82f 	bl	8005c94 <__malloc_unlock>
 8005c36:	f104 000b 	add.w	r0, r4, #11
 8005c3a:	1d23      	adds	r3, r4, #4
 8005c3c:	f020 0007 	bic.w	r0, r0, #7
 8005c40:	1ac2      	subs	r2, r0, r3
 8005c42:	bf1c      	itt	ne
 8005c44:	1a1b      	subne	r3, r3, r0
 8005c46:	50a3      	strne	r3, [r4, r2]
 8005c48:	e7af      	b.n	8005baa <_malloc_r+0x22>
 8005c4a:	6862      	ldr	r2, [r4, #4]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	bf0c      	ite	eq
 8005c50:	f8c8 2000 	streq.w	r2, [r8]
 8005c54:	605a      	strne	r2, [r3, #4]
 8005c56:	e7eb      	b.n	8005c30 <_malloc_r+0xa8>
 8005c58:	4623      	mov	r3, r4
 8005c5a:	6864      	ldr	r4, [r4, #4]
 8005c5c:	e7ae      	b.n	8005bbc <_malloc_r+0x34>
 8005c5e:	463c      	mov	r4, r7
 8005c60:	687f      	ldr	r7, [r7, #4]
 8005c62:	e7b6      	b.n	8005bd2 <_malloc_r+0x4a>
 8005c64:	461a      	mov	r2, r3
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	d1fb      	bne.n	8005c64 <_malloc_r+0xdc>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	6053      	str	r3, [r2, #4]
 8005c70:	e7de      	b.n	8005c30 <_malloc_r+0xa8>
 8005c72:	230c      	movs	r3, #12
 8005c74:	4630      	mov	r0, r6
 8005c76:	6033      	str	r3, [r6, #0]
 8005c78:	f000 f80c 	bl	8005c94 <__malloc_unlock>
 8005c7c:	e794      	b.n	8005ba8 <_malloc_r+0x20>
 8005c7e:	6005      	str	r5, [r0, #0]
 8005c80:	e7d6      	b.n	8005c30 <_malloc_r+0xa8>
 8005c82:	bf00      	nop
 8005c84:	20002868 	.word	0x20002868

08005c88 <__malloc_lock>:
 8005c88:	4801      	ldr	r0, [pc, #4]	@ (8005c90 <__malloc_lock+0x8>)
 8005c8a:	f7ff befb 	b.w	8005a84 <__retarget_lock_acquire_recursive>
 8005c8e:	bf00      	nop
 8005c90:	20002860 	.word	0x20002860

08005c94 <__malloc_unlock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__malloc_unlock+0x8>)
 8005c96:	f7ff bef6 	b.w	8005a86 <__retarget_lock_release_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	20002860 	.word	0x20002860

08005ca0 <__ssputs_r>:
 8005ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca4:	461f      	mov	r7, r3
 8005ca6:	688e      	ldr	r6, [r1, #8]
 8005ca8:	4682      	mov	sl, r0
 8005caa:	42be      	cmp	r6, r7
 8005cac:	460c      	mov	r4, r1
 8005cae:	4690      	mov	r8, r2
 8005cb0:	680b      	ldr	r3, [r1, #0]
 8005cb2:	d82d      	bhi.n	8005d10 <__ssputs_r+0x70>
 8005cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005cbc:	d026      	beq.n	8005d0c <__ssputs_r+0x6c>
 8005cbe:	6965      	ldr	r5, [r4, #20]
 8005cc0:	6909      	ldr	r1, [r1, #16]
 8005cc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cc6:	eba3 0901 	sub.w	r9, r3, r1
 8005cca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cce:	1c7b      	adds	r3, r7, #1
 8005cd0:	444b      	add	r3, r9
 8005cd2:	106d      	asrs	r5, r5, #1
 8005cd4:	429d      	cmp	r5, r3
 8005cd6:	bf38      	it	cc
 8005cd8:	461d      	movcc	r5, r3
 8005cda:	0553      	lsls	r3, r2, #21
 8005cdc:	d527      	bpl.n	8005d2e <__ssputs_r+0x8e>
 8005cde:	4629      	mov	r1, r5
 8005ce0:	f7ff ff52 	bl	8005b88 <_malloc_r>
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	b360      	cbz	r0, 8005d42 <__ssputs_r+0xa2>
 8005ce8:	464a      	mov	r2, r9
 8005cea:	6921      	ldr	r1, [r4, #16]
 8005cec:	f7ff fed4 	bl	8005a98 <memcpy>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	6126      	str	r6, [r4, #16]
 8005cfe:	444e      	add	r6, r9
 8005d00:	6026      	str	r6, [r4, #0]
 8005d02:	463e      	mov	r6, r7
 8005d04:	6165      	str	r5, [r4, #20]
 8005d06:	eba5 0509 	sub.w	r5, r5, r9
 8005d0a:	60a5      	str	r5, [r4, #8]
 8005d0c:	42be      	cmp	r6, r7
 8005d0e:	d900      	bls.n	8005d12 <__ssputs_r+0x72>
 8005d10:	463e      	mov	r6, r7
 8005d12:	4632      	mov	r2, r6
 8005d14:	4641      	mov	r1, r8
 8005d16:	6820      	ldr	r0, [r4, #0]
 8005d18:	f000 faac 	bl	8006274 <memmove>
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	1b9b      	subs	r3, r3, r6
 8005d22:	60a3      	str	r3, [r4, #8]
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	4433      	add	r3, r6
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2e:	462a      	mov	r2, r5
 8005d30:	f000 fad8 	bl	80062e4 <_realloc_r>
 8005d34:	4606      	mov	r6, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1e0      	bne.n	8005cfc <__ssputs_r+0x5c>
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	6921      	ldr	r1, [r4, #16]
 8005d3e:	f7ff feb9 	bl	8005ab4 <_free_r>
 8005d42:	230c      	movs	r3, #12
 8005d44:	f8ca 3000 	str.w	r3, [sl]
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	e7e9      	b.n	8005d2a <__ssputs_r+0x8a>
	...

08005d58 <_svfiprintf_r>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	4698      	mov	r8, r3
 8005d5e:	898b      	ldrh	r3, [r1, #12]
 8005d60:	4607      	mov	r7, r0
 8005d62:	061b      	lsls	r3, r3, #24
 8005d64:	460d      	mov	r5, r1
 8005d66:	4614      	mov	r4, r2
 8005d68:	b09d      	sub	sp, #116	@ 0x74
 8005d6a:	d510      	bpl.n	8005d8e <_svfiprintf_r+0x36>
 8005d6c:	690b      	ldr	r3, [r1, #16]
 8005d6e:	b973      	cbnz	r3, 8005d8e <_svfiprintf_r+0x36>
 8005d70:	2140      	movs	r1, #64	@ 0x40
 8005d72:	f7ff ff09 	bl	8005b88 <_malloc_r>
 8005d76:	6028      	str	r0, [r5, #0]
 8005d78:	6128      	str	r0, [r5, #16]
 8005d7a:	b930      	cbnz	r0, 8005d8a <_svfiprintf_r+0x32>
 8005d7c:	230c      	movs	r3, #12
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	b01d      	add	sp, #116	@ 0x74
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	2340      	movs	r3, #64	@ 0x40
 8005d8c:	616b      	str	r3, [r5, #20]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d92:	2320      	movs	r3, #32
 8005d94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d98:	2330      	movs	r3, #48	@ 0x30
 8005d9a:	f04f 0901 	mov.w	r9, #1
 8005d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005da2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005f3c <_svfiprintf_r+0x1e4>
 8005da6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005daa:	4623      	mov	r3, r4
 8005dac:	469a      	mov	sl, r3
 8005dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005db2:	b10a      	cbz	r2, 8005db8 <_svfiprintf_r+0x60>
 8005db4:	2a25      	cmp	r2, #37	@ 0x25
 8005db6:	d1f9      	bne.n	8005dac <_svfiprintf_r+0x54>
 8005db8:	ebba 0b04 	subs.w	fp, sl, r4
 8005dbc:	d00b      	beq.n	8005dd6 <_svfiprintf_r+0x7e>
 8005dbe:	465b      	mov	r3, fp
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	f7ff ff6b 	bl	8005ca0 <__ssputs_r>
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f000 80a7 	beq.w	8005f1e <_svfiprintf_r+0x1c6>
 8005dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dd2:	445a      	add	r2, fp
 8005dd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 809f 	beq.w	8005f1e <_svfiprintf_r+0x1c6>
 8005de0:	2300      	movs	r3, #0
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295
 8005de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dea:	f10a 0a01 	add.w	sl, sl, #1
 8005dee:	9304      	str	r3, [sp, #16]
 8005df0:	9307      	str	r3, [sp, #28]
 8005df2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005df6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005df8:	4654      	mov	r4, sl
 8005dfa:	2205      	movs	r2, #5
 8005dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e00:	484e      	ldr	r0, [pc, #312]	@ (8005f3c <_svfiprintf_r+0x1e4>)
 8005e02:	f000 fa61 	bl	80062c8 <memchr>
 8005e06:	9a04      	ldr	r2, [sp, #16]
 8005e08:	b9d8      	cbnz	r0, 8005e42 <_svfiprintf_r+0xea>
 8005e0a:	06d0      	lsls	r0, r2, #27
 8005e0c:	bf44      	itt	mi
 8005e0e:	2320      	movmi	r3, #32
 8005e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e14:	0711      	lsls	r1, r2, #28
 8005e16:	bf44      	itt	mi
 8005e18:	232b      	movmi	r3, #43	@ 0x2b
 8005e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e24:	d015      	beq.n	8005e52 <_svfiprintf_r+0xfa>
 8005e26:	4654      	mov	r4, sl
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f04f 0c0a 	mov.w	ip, #10
 8005e2e:	9a07      	ldr	r2, [sp, #28]
 8005e30:	4621      	mov	r1, r4
 8005e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e36:	3b30      	subs	r3, #48	@ 0x30
 8005e38:	2b09      	cmp	r3, #9
 8005e3a:	d94b      	bls.n	8005ed4 <_svfiprintf_r+0x17c>
 8005e3c:	b1b0      	cbz	r0, 8005e6c <_svfiprintf_r+0x114>
 8005e3e:	9207      	str	r2, [sp, #28]
 8005e40:	e014      	b.n	8005e6c <_svfiprintf_r+0x114>
 8005e42:	eba0 0308 	sub.w	r3, r0, r8
 8005e46:	fa09 f303 	lsl.w	r3, r9, r3
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	46a2      	mov	sl, r4
 8005e4e:	9304      	str	r3, [sp, #16]
 8005e50:	e7d2      	b.n	8005df8 <_svfiprintf_r+0xa0>
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	1d19      	adds	r1, r3, #4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	9103      	str	r1, [sp, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bfbb      	ittet	lt
 8005e5e:	425b      	neglt	r3, r3
 8005e60:	f042 0202 	orrlt.w	r2, r2, #2
 8005e64:	9307      	strge	r3, [sp, #28]
 8005e66:	9307      	strlt	r3, [sp, #28]
 8005e68:	bfb8      	it	lt
 8005e6a:	9204      	strlt	r2, [sp, #16]
 8005e6c:	7823      	ldrb	r3, [r4, #0]
 8005e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e70:	d10a      	bne.n	8005e88 <_svfiprintf_r+0x130>
 8005e72:	7863      	ldrb	r3, [r4, #1]
 8005e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e76:	d132      	bne.n	8005ede <_svfiprintf_r+0x186>
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	3402      	adds	r4, #2
 8005e7c:	1d1a      	adds	r2, r3, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	9203      	str	r2, [sp, #12]
 8005e82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e86:	9305      	str	r3, [sp, #20]
 8005e88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005f40 <_svfiprintf_r+0x1e8>
 8005e8c:	2203      	movs	r2, #3
 8005e8e:	4650      	mov	r0, sl
 8005e90:	7821      	ldrb	r1, [r4, #0]
 8005e92:	f000 fa19 	bl	80062c8 <memchr>
 8005e96:	b138      	cbz	r0, 8005ea8 <_svfiprintf_r+0x150>
 8005e98:	2240      	movs	r2, #64	@ 0x40
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	eba0 000a 	sub.w	r0, r0, sl
 8005ea0:	4082      	lsls	r2, r0
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	3401      	adds	r4, #1
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eac:	2206      	movs	r2, #6
 8005eae:	4825      	ldr	r0, [pc, #148]	@ (8005f44 <_svfiprintf_r+0x1ec>)
 8005eb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005eb4:	f000 fa08 	bl	80062c8 <memchr>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d036      	beq.n	8005f2a <_svfiprintf_r+0x1d2>
 8005ebc:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <_svfiprintf_r+0x1f0>)
 8005ebe:	bb1b      	cbnz	r3, 8005f08 <_svfiprintf_r+0x1b0>
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	3307      	adds	r3, #7
 8005ec4:	f023 0307 	bic.w	r3, r3, #7
 8005ec8:	3308      	adds	r3, #8
 8005eca:	9303      	str	r3, [sp, #12]
 8005ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ece:	4433      	add	r3, r6
 8005ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ed2:	e76a      	b.n	8005daa <_svfiprintf_r+0x52>
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005edc:	e7a8      	b.n	8005e30 <_svfiprintf_r+0xd8>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f04f 0c0a 	mov.w	ip, #10
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	3401      	adds	r4, #1
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	4620      	mov	r0, r4
 8005eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ef0:	3a30      	subs	r2, #48	@ 0x30
 8005ef2:	2a09      	cmp	r2, #9
 8005ef4:	d903      	bls.n	8005efe <_svfiprintf_r+0x1a6>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0c6      	beq.n	8005e88 <_svfiprintf_r+0x130>
 8005efa:	9105      	str	r1, [sp, #20]
 8005efc:	e7c4      	b.n	8005e88 <_svfiprintf_r+0x130>
 8005efe:	4604      	mov	r4, r0
 8005f00:	2301      	movs	r3, #1
 8005f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f06:	e7f0      	b.n	8005eea <_svfiprintf_r+0x192>
 8005f08:	ab03      	add	r3, sp, #12
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	4638      	mov	r0, r7
 8005f10:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <_svfiprintf_r+0x1f4>)
 8005f12:	a904      	add	r1, sp, #16
 8005f14:	f3af 8000 	nop.w
 8005f18:	1c42      	adds	r2, r0, #1
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	d1d6      	bne.n	8005ecc <_svfiprintf_r+0x174>
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	065b      	lsls	r3, r3, #25
 8005f22:	f53f af2d 	bmi.w	8005d80 <_svfiprintf_r+0x28>
 8005f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f28:	e72c      	b.n	8005d84 <_svfiprintf_r+0x2c>
 8005f2a:	ab03      	add	r3, sp, #12
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4638      	mov	r0, r7
 8005f32:	4b06      	ldr	r3, [pc, #24]	@ (8005f4c <_svfiprintf_r+0x1f4>)
 8005f34:	a904      	add	r1, sp, #16
 8005f36:	f000 f87d 	bl	8006034 <_printf_i>
 8005f3a:	e7ed      	b.n	8005f18 <_svfiprintf_r+0x1c0>
 8005f3c:	0800658e 	.word	0x0800658e
 8005f40:	08006594 	.word	0x08006594
 8005f44:	08006598 	.word	0x08006598
 8005f48:	00000000 	.word	0x00000000
 8005f4c:	08005ca1 	.word	0x08005ca1

08005f50 <_printf_common>:
 8005f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	4616      	mov	r6, r2
 8005f56:	4698      	mov	r8, r3
 8005f58:	688a      	ldr	r2, [r1, #8]
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	bfb8      	it	lt
 8005f62:	4613      	movlt	r3, r2
 8005f64:	6033      	str	r3, [r6, #0]
 8005f66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f70:	b10a      	cbz	r2, 8005f76 <_printf_common+0x26>
 8005f72:	3301      	adds	r3, #1
 8005f74:	6033      	str	r3, [r6, #0]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	0699      	lsls	r1, r3, #26
 8005f7a:	bf42      	ittt	mi
 8005f7c:	6833      	ldrmi	r3, [r6, #0]
 8005f7e:	3302      	addmi	r3, #2
 8005f80:	6033      	strmi	r3, [r6, #0]
 8005f82:	6825      	ldr	r5, [r4, #0]
 8005f84:	f015 0506 	ands.w	r5, r5, #6
 8005f88:	d106      	bne.n	8005f98 <_printf_common+0x48>
 8005f8a:	f104 0a19 	add.w	sl, r4, #25
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	6832      	ldr	r2, [r6, #0]
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dc2b      	bgt.n	8005ff0 <_printf_common+0xa0>
 8005f98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	3b00      	subs	r3, #0
 8005fa0:	bf18      	it	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	0692      	lsls	r2, r2, #26
 8005fa6:	d430      	bmi.n	800600a <_printf_common+0xba>
 8005fa8:	4641      	mov	r1, r8
 8005faa:	4638      	mov	r0, r7
 8005fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fb0:	47c8      	blx	r9
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d023      	beq.n	8005ffe <_printf_common+0xae>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	6922      	ldr	r2, [r4, #16]
 8005fba:	f003 0306 	and.w	r3, r3, #6
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	bf14      	ite	ne
 8005fc2:	2500      	movne	r5, #0
 8005fc4:	6833      	ldreq	r3, [r6, #0]
 8005fc6:	f04f 0600 	mov.w	r6, #0
 8005fca:	bf08      	it	eq
 8005fcc:	68e5      	ldreq	r5, [r4, #12]
 8005fce:	f104 041a 	add.w	r4, r4, #26
 8005fd2:	bf08      	it	eq
 8005fd4:	1aed      	subeq	r5, r5, r3
 8005fd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005fda:	bf08      	it	eq
 8005fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfc4      	itt	gt
 8005fe4:	1a9b      	subgt	r3, r3, r2
 8005fe6:	18ed      	addgt	r5, r5, r3
 8005fe8:	42b5      	cmp	r5, r6
 8005fea:	d11a      	bne.n	8006022 <_printf_common+0xd2>
 8005fec:	2000      	movs	r0, #0
 8005fee:	e008      	b.n	8006002 <_printf_common+0xb2>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4652      	mov	r2, sl
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	47c8      	blx	r9
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d103      	bne.n	8006006 <_printf_common+0xb6>
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8006002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006006:	3501      	adds	r5, #1
 8006008:	e7c1      	b.n	8005f8e <_printf_common+0x3e>
 800600a:	2030      	movs	r0, #48	@ 0x30
 800600c:	18e1      	adds	r1, r4, r3
 800600e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006018:	4422      	add	r2, r4
 800601a:	3302      	adds	r3, #2
 800601c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006020:	e7c2      	b.n	8005fa8 <_printf_common+0x58>
 8006022:	2301      	movs	r3, #1
 8006024:	4622      	mov	r2, r4
 8006026:	4641      	mov	r1, r8
 8006028:	4638      	mov	r0, r7
 800602a:	47c8      	blx	r9
 800602c:	3001      	adds	r0, #1
 800602e:	d0e6      	beq.n	8005ffe <_printf_common+0xae>
 8006030:	3601      	adds	r6, #1
 8006032:	e7d9      	b.n	8005fe8 <_printf_common+0x98>

08006034 <_printf_i>:
 8006034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006038:	7e0f      	ldrb	r7, [r1, #24]
 800603a:	4691      	mov	r9, r2
 800603c:	2f78      	cmp	r7, #120	@ 0x78
 800603e:	4680      	mov	r8, r0
 8006040:	460c      	mov	r4, r1
 8006042:	469a      	mov	sl, r3
 8006044:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006046:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800604a:	d807      	bhi.n	800605c <_printf_i+0x28>
 800604c:	2f62      	cmp	r7, #98	@ 0x62
 800604e:	d80a      	bhi.n	8006066 <_printf_i+0x32>
 8006050:	2f00      	cmp	r7, #0
 8006052:	f000 80d3 	beq.w	80061fc <_printf_i+0x1c8>
 8006056:	2f58      	cmp	r7, #88	@ 0x58
 8006058:	f000 80ba 	beq.w	80061d0 <_printf_i+0x19c>
 800605c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006060:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006064:	e03a      	b.n	80060dc <_printf_i+0xa8>
 8006066:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800606a:	2b15      	cmp	r3, #21
 800606c:	d8f6      	bhi.n	800605c <_printf_i+0x28>
 800606e:	a101      	add	r1, pc, #4	@ (adr r1, 8006074 <_printf_i+0x40>)
 8006070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006074:	080060cd 	.word	0x080060cd
 8006078:	080060e1 	.word	0x080060e1
 800607c:	0800605d 	.word	0x0800605d
 8006080:	0800605d 	.word	0x0800605d
 8006084:	0800605d 	.word	0x0800605d
 8006088:	0800605d 	.word	0x0800605d
 800608c:	080060e1 	.word	0x080060e1
 8006090:	0800605d 	.word	0x0800605d
 8006094:	0800605d 	.word	0x0800605d
 8006098:	0800605d 	.word	0x0800605d
 800609c:	0800605d 	.word	0x0800605d
 80060a0:	080061e3 	.word	0x080061e3
 80060a4:	0800610b 	.word	0x0800610b
 80060a8:	0800619d 	.word	0x0800619d
 80060ac:	0800605d 	.word	0x0800605d
 80060b0:	0800605d 	.word	0x0800605d
 80060b4:	08006205 	.word	0x08006205
 80060b8:	0800605d 	.word	0x0800605d
 80060bc:	0800610b 	.word	0x0800610b
 80060c0:	0800605d 	.word	0x0800605d
 80060c4:	0800605d 	.word	0x0800605d
 80060c8:	080061a5 	.word	0x080061a5
 80060cc:	6833      	ldr	r3, [r6, #0]
 80060ce:	1d1a      	adds	r2, r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6032      	str	r2, [r6, #0]
 80060d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060dc:	2301      	movs	r3, #1
 80060de:	e09e      	b.n	800621e <_printf_i+0x1ea>
 80060e0:	6833      	ldr	r3, [r6, #0]
 80060e2:	6820      	ldr	r0, [r4, #0]
 80060e4:	1d19      	adds	r1, r3, #4
 80060e6:	6031      	str	r1, [r6, #0]
 80060e8:	0606      	lsls	r6, r0, #24
 80060ea:	d501      	bpl.n	80060f0 <_printf_i+0xbc>
 80060ec:	681d      	ldr	r5, [r3, #0]
 80060ee:	e003      	b.n	80060f8 <_printf_i+0xc4>
 80060f0:	0645      	lsls	r5, r0, #25
 80060f2:	d5fb      	bpl.n	80060ec <_printf_i+0xb8>
 80060f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	da03      	bge.n	8006104 <_printf_i+0xd0>
 80060fc:	232d      	movs	r3, #45	@ 0x2d
 80060fe:	426d      	negs	r5, r5
 8006100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006104:	230a      	movs	r3, #10
 8006106:	4859      	ldr	r0, [pc, #356]	@ (800626c <_printf_i+0x238>)
 8006108:	e011      	b.n	800612e <_printf_i+0xfa>
 800610a:	6821      	ldr	r1, [r4, #0]
 800610c:	6833      	ldr	r3, [r6, #0]
 800610e:	0608      	lsls	r0, r1, #24
 8006110:	f853 5b04 	ldr.w	r5, [r3], #4
 8006114:	d402      	bmi.n	800611c <_printf_i+0xe8>
 8006116:	0649      	lsls	r1, r1, #25
 8006118:	bf48      	it	mi
 800611a:	b2ad      	uxthmi	r5, r5
 800611c:	2f6f      	cmp	r7, #111	@ 0x6f
 800611e:	6033      	str	r3, [r6, #0]
 8006120:	bf14      	ite	ne
 8006122:	230a      	movne	r3, #10
 8006124:	2308      	moveq	r3, #8
 8006126:	4851      	ldr	r0, [pc, #324]	@ (800626c <_printf_i+0x238>)
 8006128:	2100      	movs	r1, #0
 800612a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800612e:	6866      	ldr	r6, [r4, #4]
 8006130:	2e00      	cmp	r6, #0
 8006132:	bfa8      	it	ge
 8006134:	6821      	ldrge	r1, [r4, #0]
 8006136:	60a6      	str	r6, [r4, #8]
 8006138:	bfa4      	itt	ge
 800613a:	f021 0104 	bicge.w	r1, r1, #4
 800613e:	6021      	strge	r1, [r4, #0]
 8006140:	b90d      	cbnz	r5, 8006146 <_printf_i+0x112>
 8006142:	2e00      	cmp	r6, #0
 8006144:	d04b      	beq.n	80061de <_printf_i+0x1aa>
 8006146:	4616      	mov	r6, r2
 8006148:	fbb5 f1f3 	udiv	r1, r5, r3
 800614c:	fb03 5711 	mls	r7, r3, r1, r5
 8006150:	5dc7      	ldrb	r7, [r0, r7]
 8006152:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006156:	462f      	mov	r7, r5
 8006158:	42bb      	cmp	r3, r7
 800615a:	460d      	mov	r5, r1
 800615c:	d9f4      	bls.n	8006148 <_printf_i+0x114>
 800615e:	2b08      	cmp	r3, #8
 8006160:	d10b      	bne.n	800617a <_printf_i+0x146>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	07df      	lsls	r7, r3, #31
 8006166:	d508      	bpl.n	800617a <_printf_i+0x146>
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	6861      	ldr	r1, [r4, #4]
 800616c:	4299      	cmp	r1, r3
 800616e:	bfde      	ittt	le
 8006170:	2330      	movle	r3, #48	@ 0x30
 8006172:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006176:	f106 36ff 	addle.w	r6, r6, #4294967295
 800617a:	1b92      	subs	r2, r2, r6
 800617c:	6122      	str	r2, [r4, #16]
 800617e:	464b      	mov	r3, r9
 8006180:	4621      	mov	r1, r4
 8006182:	4640      	mov	r0, r8
 8006184:	f8cd a000 	str.w	sl, [sp]
 8006188:	aa03      	add	r2, sp, #12
 800618a:	f7ff fee1 	bl	8005f50 <_printf_common>
 800618e:	3001      	adds	r0, #1
 8006190:	d14a      	bne.n	8006228 <_printf_i+0x1f4>
 8006192:	f04f 30ff 	mov.w	r0, #4294967295
 8006196:	b004      	add	sp, #16
 8006198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	f043 0320 	orr.w	r3, r3, #32
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	2778      	movs	r7, #120	@ 0x78
 80061a6:	4832      	ldr	r0, [pc, #200]	@ (8006270 <_printf_i+0x23c>)
 80061a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	6831      	ldr	r1, [r6, #0]
 80061b0:	061f      	lsls	r7, r3, #24
 80061b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80061b6:	d402      	bmi.n	80061be <_printf_i+0x18a>
 80061b8:	065f      	lsls	r7, r3, #25
 80061ba:	bf48      	it	mi
 80061bc:	b2ad      	uxthmi	r5, r5
 80061be:	6031      	str	r1, [r6, #0]
 80061c0:	07d9      	lsls	r1, r3, #31
 80061c2:	bf44      	itt	mi
 80061c4:	f043 0320 	orrmi.w	r3, r3, #32
 80061c8:	6023      	strmi	r3, [r4, #0]
 80061ca:	b11d      	cbz	r5, 80061d4 <_printf_i+0x1a0>
 80061cc:	2310      	movs	r3, #16
 80061ce:	e7ab      	b.n	8006128 <_printf_i+0xf4>
 80061d0:	4826      	ldr	r0, [pc, #152]	@ (800626c <_printf_i+0x238>)
 80061d2:	e7e9      	b.n	80061a8 <_printf_i+0x174>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	f023 0320 	bic.w	r3, r3, #32
 80061da:	6023      	str	r3, [r4, #0]
 80061dc:	e7f6      	b.n	80061cc <_printf_i+0x198>
 80061de:	4616      	mov	r6, r2
 80061e0:	e7bd      	b.n	800615e <_printf_i+0x12a>
 80061e2:	6833      	ldr	r3, [r6, #0]
 80061e4:	6825      	ldr	r5, [r4, #0]
 80061e6:	1d18      	adds	r0, r3, #4
 80061e8:	6961      	ldr	r1, [r4, #20]
 80061ea:	6030      	str	r0, [r6, #0]
 80061ec:	062e      	lsls	r6, r5, #24
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	d501      	bpl.n	80061f6 <_printf_i+0x1c2>
 80061f2:	6019      	str	r1, [r3, #0]
 80061f4:	e002      	b.n	80061fc <_printf_i+0x1c8>
 80061f6:	0668      	lsls	r0, r5, #25
 80061f8:	d5fb      	bpl.n	80061f2 <_printf_i+0x1be>
 80061fa:	8019      	strh	r1, [r3, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	4616      	mov	r6, r2
 8006200:	6123      	str	r3, [r4, #16]
 8006202:	e7bc      	b.n	800617e <_printf_i+0x14a>
 8006204:	6833      	ldr	r3, [r6, #0]
 8006206:	2100      	movs	r1, #0
 8006208:	1d1a      	adds	r2, r3, #4
 800620a:	6032      	str	r2, [r6, #0]
 800620c:	681e      	ldr	r6, [r3, #0]
 800620e:	6862      	ldr	r2, [r4, #4]
 8006210:	4630      	mov	r0, r6
 8006212:	f000 f859 	bl	80062c8 <memchr>
 8006216:	b108      	cbz	r0, 800621c <_printf_i+0x1e8>
 8006218:	1b80      	subs	r0, r0, r6
 800621a:	6060      	str	r0, [r4, #4]
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	6123      	str	r3, [r4, #16]
 8006220:	2300      	movs	r3, #0
 8006222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006226:	e7aa      	b.n	800617e <_printf_i+0x14a>
 8006228:	4632      	mov	r2, r6
 800622a:	4649      	mov	r1, r9
 800622c:	4640      	mov	r0, r8
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	47d0      	blx	sl
 8006232:	3001      	adds	r0, #1
 8006234:	d0ad      	beq.n	8006192 <_printf_i+0x15e>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	079b      	lsls	r3, r3, #30
 800623a:	d413      	bmi.n	8006264 <_printf_i+0x230>
 800623c:	68e0      	ldr	r0, [r4, #12]
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	4298      	cmp	r0, r3
 8006242:	bfb8      	it	lt
 8006244:	4618      	movlt	r0, r3
 8006246:	e7a6      	b.n	8006196 <_printf_i+0x162>
 8006248:	2301      	movs	r3, #1
 800624a:	4632      	mov	r2, r6
 800624c:	4649      	mov	r1, r9
 800624e:	4640      	mov	r0, r8
 8006250:	47d0      	blx	sl
 8006252:	3001      	adds	r0, #1
 8006254:	d09d      	beq.n	8006192 <_printf_i+0x15e>
 8006256:	3501      	adds	r5, #1
 8006258:	68e3      	ldr	r3, [r4, #12]
 800625a:	9903      	ldr	r1, [sp, #12]
 800625c:	1a5b      	subs	r3, r3, r1
 800625e:	42ab      	cmp	r3, r5
 8006260:	dcf2      	bgt.n	8006248 <_printf_i+0x214>
 8006262:	e7eb      	b.n	800623c <_printf_i+0x208>
 8006264:	2500      	movs	r5, #0
 8006266:	f104 0619 	add.w	r6, r4, #25
 800626a:	e7f5      	b.n	8006258 <_printf_i+0x224>
 800626c:	0800659f 	.word	0x0800659f
 8006270:	080065b0 	.word	0x080065b0

08006274 <memmove>:
 8006274:	4288      	cmp	r0, r1
 8006276:	b510      	push	{r4, lr}
 8006278:	eb01 0402 	add.w	r4, r1, r2
 800627c:	d902      	bls.n	8006284 <memmove+0x10>
 800627e:	4284      	cmp	r4, r0
 8006280:	4623      	mov	r3, r4
 8006282:	d807      	bhi.n	8006294 <memmove+0x20>
 8006284:	1e43      	subs	r3, r0, #1
 8006286:	42a1      	cmp	r1, r4
 8006288:	d008      	beq.n	800629c <memmove+0x28>
 800628a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800628e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006292:	e7f8      	b.n	8006286 <memmove+0x12>
 8006294:	4601      	mov	r1, r0
 8006296:	4402      	add	r2, r0
 8006298:	428a      	cmp	r2, r1
 800629a:	d100      	bne.n	800629e <memmove+0x2a>
 800629c:	bd10      	pop	{r4, pc}
 800629e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062a6:	e7f7      	b.n	8006298 <memmove+0x24>

080062a8 <_sbrk_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	2300      	movs	r3, #0
 80062ac:	4d05      	ldr	r5, [pc, #20]	@ (80062c4 <_sbrk_r+0x1c>)
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	f7fa fd5e 	bl	8000d74 <_sbrk>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_sbrk_r+0x1a>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_sbrk_r+0x1a>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	2000285c 	.word	0x2000285c

080062c8 <memchr>:
 80062c8:	4603      	mov	r3, r0
 80062ca:	b510      	push	{r4, lr}
 80062cc:	b2c9      	uxtb	r1, r1
 80062ce:	4402      	add	r2, r0
 80062d0:	4293      	cmp	r3, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	d101      	bne.n	80062da <memchr+0x12>
 80062d6:	2000      	movs	r0, #0
 80062d8:	e003      	b.n	80062e2 <memchr+0x1a>
 80062da:	7804      	ldrb	r4, [r0, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	428c      	cmp	r4, r1
 80062e0:	d1f6      	bne.n	80062d0 <memchr+0x8>
 80062e2:	bd10      	pop	{r4, pc}

080062e4 <_realloc_r>:
 80062e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e8:	4680      	mov	r8, r0
 80062ea:	4615      	mov	r5, r2
 80062ec:	460c      	mov	r4, r1
 80062ee:	b921      	cbnz	r1, 80062fa <_realloc_r+0x16>
 80062f0:	4611      	mov	r1, r2
 80062f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	f7ff bc47 	b.w	8005b88 <_malloc_r>
 80062fa:	b92a      	cbnz	r2, 8006308 <_realloc_r+0x24>
 80062fc:	f7ff fbda 	bl	8005ab4 <_free_r>
 8006300:	2400      	movs	r4, #0
 8006302:	4620      	mov	r0, r4
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006308:	f000 f81a 	bl	8006340 <_malloc_usable_size_r>
 800630c:	4285      	cmp	r5, r0
 800630e:	4606      	mov	r6, r0
 8006310:	d802      	bhi.n	8006318 <_realloc_r+0x34>
 8006312:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006316:	d8f4      	bhi.n	8006302 <_realloc_r+0x1e>
 8006318:	4629      	mov	r1, r5
 800631a:	4640      	mov	r0, r8
 800631c:	f7ff fc34 	bl	8005b88 <_malloc_r>
 8006320:	4607      	mov	r7, r0
 8006322:	2800      	cmp	r0, #0
 8006324:	d0ec      	beq.n	8006300 <_realloc_r+0x1c>
 8006326:	42b5      	cmp	r5, r6
 8006328:	462a      	mov	r2, r5
 800632a:	4621      	mov	r1, r4
 800632c:	bf28      	it	cs
 800632e:	4632      	movcs	r2, r6
 8006330:	f7ff fbb2 	bl	8005a98 <memcpy>
 8006334:	4621      	mov	r1, r4
 8006336:	4640      	mov	r0, r8
 8006338:	f7ff fbbc 	bl	8005ab4 <_free_r>
 800633c:	463c      	mov	r4, r7
 800633e:	e7e0      	b.n	8006302 <_realloc_r+0x1e>

08006340 <_malloc_usable_size_r>:
 8006340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006344:	1f18      	subs	r0, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfbc      	itt	lt
 800634a:	580b      	ldrlt	r3, [r1, r0]
 800634c:	18c0      	addlt	r0, r0, r3
 800634e:	4770      	bx	lr

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
