
TestWorkFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc4  08005fc4  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fcc  08005fcc  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005fd4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027d4  2000006c  08006040  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002840  08006040  00007840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001314e  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003552  00000000  00000000  0001a1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0001d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e66  00000000  00000000  0001e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019444  00000000  00000000  0001f84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016958  00000000  00000000  00038c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000931b8  00000000  00000000  0004f5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e27a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ec  00000000  00000000  000e27e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e78d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005dec 	.word	0x08005dec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005dec 	.word	0x08005dec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <bsp_get_time_stamp>:

#include "stm32f1xx_hal.h"

#include "time_bsp.h"

uint32_t bsp_get_time_stamp(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000164:	f000 fd6c 	bl	8000c40 <HAL_GetTick>
 8000168:	4603      	mov	r3, r0
}
 800016a:	4618      	mov	r0, r3
 800016c:	bd80      	pop	{r7, pc}
	...

08000170 <bsp_print_log>:
#include "usart.h"

#include "uart_bsp.h"
#include "bsp.h"

status_t bsp_print_log(log_message_t * message){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	result = HAL_UART_Transmit_IT (&huart1, message->message, message->size);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	1d19      	adds	r1, r3, #4
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	b29b      	uxth	r3, r3
 8000182:	461a      	mov	r2, r3
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <bsp_print_log+0x34>)
 8000186:	f001 ff7b 	bl	8002080 <HAL_UART_Transmit_IT>
 800018a:	4603      	mov	r3, r0
 800018c:	73fb      	strb	r3, [r7, #15]
	if (result == HAL_OK) {

	}
	return result == HAL_OK ? BSP_OK : BSP_ERROR;
 800018e:	7bfb      	ldrb	r3, [r7, #15]
 8000190:	2b00      	cmp	r3, #0
 8000192:	bf14      	ite	ne
 8000194:	2301      	movne	r3, #1
 8000196:	2300      	moveq	r3, #0
 8000198:	b2db      	uxtb	r3, r3
}
 800019a:	4618      	mov	r0, r3
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200004d0 	.word	0x200004d0

080001a8 <get_set_mem_log_thread_id>:

osThreadId get_set_mem_log_thread_id(osThreadId thread_id){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	static osThreadId log_osThreadId;
	if (thread_id != NULL) {
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d002      	beq.n	80001bc <get_set_mem_log_thread_id+0x14>
		log_osThreadId = thread_id;
 80001b6:	4a05      	ldr	r2, [pc, #20]	@ (80001cc <get_set_mem_log_thread_id+0x24>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	6013      	str	r3, [r2, #0]
	}
	return log_osThreadId;
 80001bc:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <get_set_mem_log_thread_id+0x24>)
 80001be:	681b      	ldr	r3, [r3, #0]
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000088 	.word	0x20000088

080001d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <HAL_UART_TxCpltCallback+0x2c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d107      	bne.n	80001f4 <HAL_UART_TxCpltCallback+0x24>
		osSignalSet(get_set_mem_log_thread_id(NULL), 0x00000001);
 80001e4:	2000      	movs	r0, #0
 80001e6:	f7ff ffdf 	bl	80001a8 <get_set_mem_log_thread_id>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2101      	movs	r1, #1
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fce4 	bl	8002bbc <osSignalSet>
	}
};
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200004d0 	.word	0x200004d0

08000200 <log_print>:

log_message_t message_item;

uint8_t message_buf[MAX_LOG_INFO_WIDTH];

void log_print(LogLevel_t log_level, const char* message){
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af02      	add	r7, sp, #8
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	71fb      	strb	r3, [r7, #7]
	if (log_level >= LOG_LEVEL) {
		uint32_t time_stamp =  bsp_get_time_stamp();
 800020c:	f7ff ffa8 	bl	8000160 <bsp_get_time_stamp>
 8000210:	60f8      	str	r0, [r7, #12]
		sprintf((char *)message_item.message, LOG_MESSAGE_TEMPLATE,
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <log_print+0x48>)
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	4613      	mov	r3, r2
 8000220:	68fa      	ldr	r2, [r7, #12]
 8000222:	490a      	ldr	r1, [pc, #40]	@ (800024c <log_print+0x4c>)
 8000224:	480a      	ldr	r0, [pc, #40]	@ (8000250 <log_print+0x50>)
 8000226:	f005 f931 	bl	800548c <siprintf>
	         (unsigned int)time_stamp,
			 log_level_string[log_level], message);
		message_item.size = strlen((char *)message_item.message);
 800022a:	4809      	ldr	r0, [pc, #36]	@ (8000250 <log_print+0x50>)
 800022c:	f7ff ff90 	bl	8000150 <strlen>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	4b07      	ldr	r3, [pc, #28]	@ (8000254 <log_print+0x54>)
 8000236:	601a      	str	r2, [r3, #0]
		bsp_print_log(&message_item);
 8000238:	4806      	ldr	r0, [pc, #24]	@ (8000254 <log_print+0x54>)
 800023a:	f7ff ff99 	bl	8000170 <bsp_print_log>
	}
}
 800023e:	bf00      	nop
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000
 800024c:	08005e28 	.word	0x08005e28
 8000250:	20000190 	.word	0x20000190
 8000254:	2000018c 	.word	0x2000018c

08000258 <log_print_from_Queue>:

void log_print_from_Queue(log_message_t * log_message){
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af02      	add	r7, sp, #8
 800025e:	6078      	str	r0, [r7, #4]
	sprintf(test_string2, "get= %p, %d, \n", log_message,
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681a      	ldr	r2, [r3, #0]
			log_message->size, log_message->message[0]);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	791b      	ldrb	r3, [r3, #4]
	sprintf(test_string2, "get= %p, %d, \n", log_message,
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	4613      	mov	r3, r2
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	4906      	ldr	r1, [pc, #24]	@ (8000288 <log_print_from_Queue+0x30>)
 8000270:	4806      	ldr	r0, [pc, #24]	@ (800028c <log_print_from_Queue+0x34>)
 8000272:	f005 f90b 	bl	800548c <siprintf>
	log_print(LOG_INFO, test_string2);
 8000276:	4905      	ldr	r1, [pc, #20]	@ (800028c <log_print_from_Queue+0x34>)
 8000278:	2000      	movs	r0, #0
 800027a:	f7ff ffc1 	bl	8000200 <log_print>
	//bsp_print_log((log_message_t *)log_message);
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	08005e54 	.word	0x08005e54
 800028c:	2000010c 	.word	0x2000010c

08000290 <get_set_log_pool_id>:
//    	log_mem_pool_id(addr);
//    }
//  }
//}
//
osPoolId get_set_log_pool_id(osPoolId pool_id_new){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	static osPoolId pool_id = NULL;
	if (pool_id_new != NULL){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <get_set_log_pool_id+0x14>
		pool_id = pool_id_new;
 800029e:	4a05      	ldr	r2, [pc, #20]	@ (80002b4 <get_set_log_pool_id+0x24>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	6013      	str	r3, [r2, #0]
	}
	return pool_id;
 80002a4:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <get_set_log_pool_id+0x24>)
 80002a6:	681b      	ldr	r3, [r3, #0]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000210 	.word	0x20000210

080002b8 <get_set_log_queue_id>:

osMessageQId get_set_log_queue_id(osMessageQId queue_id_new){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	static osPoolId queue_id = NULL;
	if (queue_id_new != NULL){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d002      	beq.n	80002cc <get_set_log_queue_id+0x14>
		queue_id = queue_id_new;
 80002c6:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <get_set_log_queue_id+0x24>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6013      	str	r3, [r2, #0]
	}
	return queue_id;
 80002cc:	4b03      	ldr	r3, [pc, #12]	@ (80002dc <get_set_log_queue_id+0x24>)
 80002ce:	681b      	ldr	r3, [r3, #0]
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	20000214 	.word	0x20000214

080002e0 <log_Queue_put>:


uint32_t log_Queue_put(LogLevel_t log_level, const uint8_t * message){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af02      	add	r7, sp, #8
 80002e6:	4603      	mov	r3, r0
 80002e8:	6039      	str	r1, [r7, #0]
 80002ea:	71fb      	strb	r3, [r7, #7]
	uint32_t result;
	if (log_level >= LOG_LEVEL) {
		log_message_t    *message_item_ptr;
		message_item_ptr = osPoolAlloc(get_set_log_pool_id(NULL));
 80002ec:	2000      	movs	r0, #0
 80002ee:	f7ff ffcf 	bl	8000290 <get_set_log_pool_id>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fd4a 	bl	8002d8e <osPoolAlloc>
 80002fa:	6178      	str	r0, [r7, #20]
		uint32_t time_stamp =  bsp_get_time_stamp();
 80002fc:	f7ff ff30 	bl	8000160 <bsp_get_time_stamp>
 8000300:	6138      	str	r0, [r7, #16]
		sprintf((char *)message_item_ptr->message, LOG_MESSAGE_TEMPLATE,
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	1d18      	adds	r0, r3, #4
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	4a18      	ldr	r2, [pc, #96]	@ (800036c <log_Queue_put+0x8c>)
 800030a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	4613      	mov	r3, r2
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	4916      	ldr	r1, [pc, #88]	@ (8000370 <log_Queue_put+0x90>)
 8000318:	f005 f8b8 	bl	800548c <siprintf>
	         (unsigned int)time_stamp,
			 log_level_string[log_level], message);
		message_item_ptr->size = strlen((char *)message_item_ptr->message);
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	3304      	adds	r3, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff15 	bl	8000150 <strlen>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	601a      	str	r2, [r3, #0]
		sprintf(test_string, "put= %p, %d, %c\n", message_item_ptr,
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	681a      	ldr	r2, [r3, #0]
				message_item_ptr->size, message_item_ptr->message[0]);
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	791b      	ldrb	r3, [r3, #4]
		sprintf(test_string, "put= %p, %d, %c\n", message_item_ptr,
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	4613      	mov	r3, r2
 800033a:	697a      	ldr	r2, [r7, #20]
 800033c:	490d      	ldr	r1, [pc, #52]	@ (8000374 <log_Queue_put+0x94>)
 800033e:	480e      	ldr	r0, [pc, #56]	@ (8000378 <log_Queue_put+0x98>)
 8000340:	f005 f8a4 	bl	800548c <siprintf>
		log_print(LOG_INFO, test_string);
 8000344:	490c      	ldr	r1, [pc, #48]	@ (8000378 <log_Queue_put+0x98>)
 8000346:	2000      	movs	r0, #0
 8000348:	f7ff ff5a 	bl	8000200 <log_print>
		result = (uint32_t)osMessagePut(get_set_log_queue_id(NULL), (uint32_t)message_item_ptr, osWaitForever);
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ffb3 	bl	80002b8 <get_set_log_queue_id>
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	4619      	mov	r1, r3
 800035a:	f002 fde3 	bl	8002f24 <osMessagePut>
 800035e:	60f8      	str	r0, [r7, #12]
	}
	return result;
 8000360:	68fb      	ldr	r3, [r7, #12]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000000 	.word	0x20000000
 8000370:	08005e28 	.word	0x08005e28
 8000374:	08005e64 	.word	0x08005e64
 8000378:	2000008c 	.word	0x2000008c

0800037c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4a06      	ldr	r2, [pc, #24]	@ (80003a4 <vApplicationGetIdleTaskMemory+0x28>)
 800038c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	4a05      	ldr	r2, [pc, #20]	@ (80003a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2280      	movs	r2, #128	@ 0x80
 8000398:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	20000230 	.word	0x20000230
 80003a8:	20000284 	.word	0x20000284

080003ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003ac:	b5b0      	push	{r4, r5, r7, lr}
 80003ae:	b09c      	sub	sp, #112	@ 0x70
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LogQueue */

  LogQueueHandle = osMessageCreate(osMessageQ(LogQueue), NULL);
 80003b2:	2100      	movs	r1, #0
 80003b4:	4834      	ldr	r0, [pc, #208]	@ (8000488 <MX_FREERTOS_Init+0xdc>)
 80003b6:	f002 fd8c 	bl	8002ed2 <osMessageCreate>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a33      	ldr	r2, [pc, #204]	@ (800048c <MX_FREERTOS_Init+0xe0>)
 80003be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DispatcherTask */
  osThreadDef(DispatcherTask, StartDispacherTask, osPriorityNormal, 0, 256);
 80003c0:	4b33      	ldr	r3, [pc, #204]	@ (8000490 <MX_FREERTOS_Init+0xe4>)
 80003c2:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80003c6:	461d      	mov	r5, r3
 80003c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DispatcherTaskHandle = osThreadCreate(osThread(DispatcherTask), NULL);
 80003d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 fb8d 	bl	8002afa <osThreadCreate>
 80003e0:	4603      	mov	r3, r0
 80003e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000494 <MX_FREERTOS_Init+0xe8>)
 80003e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LogTask */
  osThreadDef(LogTask, StartLogTask, osPriorityLow, 0, 512);
 80003e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <MX_FREERTOS_Init+0xec>)
 80003e8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80003ec:	461d      	mov	r5, r3
 80003ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LogTaskHandle = osThreadCreate(osThread(LogTask), NULL);
 80003fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fb7a 	bl	8002afa <osThreadCreate>
 8000406:	4603      	mov	r3, r0
 8000408:	4a24      	ldr	r2, [pc, #144]	@ (800049c <MX_FREERTOS_Init+0xf0>)
 800040a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTLeftTask */
  osThreadDef(UARTLeftTask, StartUARTLeftTask, osPriorityLow, 0, 128);
 800040c:	4b24      	ldr	r3, [pc, #144]	@ (80004a0 <MX_FREERTOS_Init+0xf4>)
 800040e:	f107 041c 	add.w	r4, r7, #28
 8000412:	461d      	mov	r5, r3
 8000414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000418:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800041c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTLeftTaskHandle = osThreadCreate(osThread(UARTLeftTask), NULL);
 8000420:	f107 031c 	add.w	r3, r7, #28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fb67 	bl	8002afa <osThreadCreate>
 800042c:	4603      	mov	r3, r0
 800042e:	4a1d      	ldr	r2, [pc, #116]	@ (80004a4 <MX_FREERTOS_Init+0xf8>)
 8000430:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTRightTask */
  osThreadDef(UARTRightTask, StartUARTRightTask, osPriorityLow, 0, 128);
 8000432:	4b1d      	ldr	r3, [pc, #116]	@ (80004a8 <MX_FREERTOS_Init+0xfc>)
 8000434:	463c      	mov	r4, r7
 8000436:	461d      	mov	r5, r3
 8000438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800043a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTRightTaskHandle = osThreadCreate(osThread(UARTRightTask), NULL);
 8000444:	463b      	mov	r3, r7
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f002 fb56 	bl	8002afa <osThreadCreate>
 800044e:	4603      	mov	r3, r0
 8000450:	4a16      	ldr	r2, [pc, #88]	@ (80004ac <MX_FREERTOS_Init+0x100>)
 8000452:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  LogMemHandle = osPoolCreate(osPool(LogMem));
 8000454:	4816      	ldr	r0, [pc, #88]	@ (80004b0 <MX_FREERTOS_Init+0x104>)
 8000456:	f002 fc3d 	bl	8002cd4 <osPoolCreate>
 800045a:	4603      	mov	r3, r0
 800045c:	4a15      	ldr	r2, [pc, #84]	@ (80004b4 <MX_FREERTOS_Init+0x108>)
 800045e:	6013      	str	r3, [r2, #0]
//	if (LogMemHandle != NULL){
//		log_print(LOG_INFO, "POOL INIT");
//	} else {
//		log_print(LOG_ERROR, "POOL DOES NOT INIT");
//	}
  get_set_mem_log_thread_id(LogTaskHandle);
 8000460:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <MX_FREERTOS_Init+0xf0>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fe9f 	bl	80001a8 <get_set_mem_log_thread_id>
  get_set_log_pool_id(LogMemHandle);
 800046a:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <MX_FREERTOS_Init+0x108>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff0e 	bl	8000290 <get_set_log_pool_id>
  get_set_log_queue_id(LogQueueHandle);
 8000474:	4b05      	ldr	r3, [pc, #20]	@ (800048c <MX_FREERTOS_Init+0xe0>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff1d 	bl	80002b8 <get_set_log_queue_id>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800047e:	bf00      	nop
 8000480:	3770      	adds	r7, #112	@ 0x70
 8000482:	46bd      	mov	sp, r7
 8000484:	bdb0      	pop	{r4, r5, r7, pc}
 8000486:	bf00      	nop
 8000488:	08005f54 	.word	0x08005f54
 800048c:	2000022c 	.word	0x2000022c
 8000490:	08005e88 	.word	0x08005e88
 8000494:	2000021c 	.word	0x2000021c
 8000498:	08005eac 	.word	0x08005eac
 800049c:	20000220 	.word	0x20000220
 80004a0:	08005ed8 	.word	0x08005ed8
 80004a4:	20000224 	.word	0x20000224
 80004a8:	08005f04 	.word	0x08005f04
 80004ac:	20000228 	.word	0x20000228
 80004b0:	08005f48 	.word	0x08005f48
 80004b4:	20000218 	.word	0x20000218

080004b8 <StartDispacherTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDispacherTask */
void StartDispacherTask(void const * argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispacherTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 80004c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004c4:	f002 fb65 	bl	8002b92 <osDelay>
//    log_print(LOG_INFO, "Dispather task");
    log_Queue_put(LOG_INFO, (uint8_t *)"It is work");
 80004c8:	4902      	ldr	r1, [pc, #8]	@ (80004d4 <StartDispacherTask+0x1c>)
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ff08 	bl	80002e0 <log_Queue_put>
    osDelay(2000);
 80004d0:	bf00      	nop
 80004d2:	e7f5      	b.n	80004c0 <StartDispacherTask+0x8>
 80004d4:	08005f20 	.word	0x08005f20

080004d8 <StartLogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogTask */
void StartLogTask(void const * argument)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
//    	//log_print_from_Queue(LogMem, evt1.value.p);
//    }
  /* Infinite loop */
  for(;;)
  {
	evt1 = osMessageGet(LogQueueHandle, osWaitForever);
 80004e0:	4b12      	ldr	r3, [pc, #72]	@ (800052c <StartLogTask+0x54>)
 80004e2:	6819      	ldr	r1, [r3, #0]
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	f04f 32ff 	mov.w	r2, #4294967295
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fd59 	bl	8002fa4 <osMessageGet>
	osDelay(200);
 80004f2:	20c8      	movs	r0, #200	@ 0xc8
 80004f4:	f002 fb4d 	bl	8002b92 <osDelay>
    if (evt1.status == osEventMessage) {
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b10      	cmp	r3, #16
 80004fc:	d103      	bne.n	8000506 <StartLogTask+0x2e>
    	log_print_from_Queue(evt1.value.p);
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fea9 	bl	8000258 <log_print_from_Queue>
    }
    //log_print(LOG_INFO, "Here1");
    evt2 = osSignalWait (0x00000001, osWaitForever);
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	f04f 32ff 	mov.w	r2, #4294967295
 800050e:	2101      	movs	r1, #1
 8000510:	4618      	mov	r0, r3
 8000512:	f002 fb93 	bl	8002c3c <osSignalWait>
    //log_print(LOG_INFO, "Here2");
    if(evt2.status == osEventSignal){
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	2b08      	cmp	r3, #8
 800051a:	d1e1      	bne.n	80004e0 <StartLogTask+0x8>
    	osPoolFree(LogMemHandle, evt1.value.p);
 800051c:	4b04      	ldr	r3, [pc, #16]	@ (8000530 <StartLogTask+0x58>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	69ba      	ldr	r2, [r7, #24]
 8000522:	4611      	mov	r1, r2
 8000524:	4618      	mov	r0, r3
 8000526:	f002 fc94 	bl	8002e52 <osPoolFree>
	evt1 = osMessageGet(LogQueueHandle, osWaitForever);
 800052a:	e7d9      	b.n	80004e0 <StartLogTask+0x8>
 800052c:	2000022c 	.word	0x2000022c
 8000530:	20000218 	.word	0x20000218

08000534 <StartUARTLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTLeftTask */
void StartUARTLeftTask(void const * argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTLeftTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f002 fb28 	bl	8002b92 <osDelay>
 8000542:	e7fb      	b.n	800053c <StartUARTLeftTask+0x8>

08000544 <StartUARTRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTRightTask */
void StartUARTRightTask(void const * argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTRightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f002 fb20 	bl	8002b92 <osDelay>
 8000552:	e7fb      	b.n	800054c <StartUARTRightTask+0x8>

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_GPIO_Init+0x58>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a13      	ldr	r2, [pc, #76]	@ (80005ac <MX_GPIO_Init+0x58>)
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_GPIO_Init+0x58>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0320 	and.w	r3, r3, #32
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_GPIO_Init+0x58>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a0d      	ldr	r2, [pc, #52]	@ (80005ac <MX_GPIO_Init+0x58>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <MX_GPIO_Init+0x58>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <MX_GPIO_Init+0x58>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <MX_GPIO_Init+0x58>)
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <MX_GPIO_Init+0x58>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0308 	and.w	r3, r3, #8
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fb1c 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f814 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f7ff ffca 	bl	8000554 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 f99a 	bl	80008f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f9c2 	bl	800094c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f9ea 	bl	80009a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  log_print(LOG_INFO, "BSP INIT COMPLETE");
 80005cc:	4904      	ldr	r1, [pc, #16]	@ (80005e0 <main+0x30>)
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff fe16 	bl	8000200 <log_print>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80005d4:	f7ff feea 	bl	80003ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005d8:	f002 fa88 	bl	8002aec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <main+0x2c>
 80005e0:	08005f2c 	.word	0x08005f2c

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b090      	sub	sp, #64	@ 0x40
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2228      	movs	r2, #40	@ 0x28
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 ff6a 	bl	80054cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fe31 	bl	8001280 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000624:	f000 f82c 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f89f 	bl	8001784 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800064c:	f000 f818 	bl	8000680 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000650:	f001 f982 	bl	8001958 <HAL_RCC_EnableCSS>
}
 8000654:	bf00      	nop
 8000656:	3740      	adds	r7, #64	@ 0x40
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d101      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800066e:	f000 fad5 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40000800 	.word	0x40000800

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <Error_Handler+0x8>

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <HAL_MspInit+0x68>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a17      	ldr	r2, [pc, #92]	@ (80006f4 <HAL_MspInit+0x68>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_MspInit+0x68>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_MspInit+0x68>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a11      	ldr	r2, [pc, #68]	@ (80006f4 <HAL_MspInit+0x68>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_MspInit+0x68>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	210f      	movs	r1, #15
 80006c6:	f06f 0001 	mvn.w	r0, #1
 80006ca:	f000 fb78 	bl	8000dbe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_MspInit+0x6c>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <HAL_MspInit+0x6c>)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010000 	.word	0x40010000

080006fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	@ 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000708:	2300      	movs	r3, #0
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000712:	4b34      	ldr	r3, [pc, #208]	@ (80007e4 <HAL_InitTick+0xe8>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a33      	ldr	r2, [pc, #204]	@ (80007e4 <HAL_InitTick+0xe8>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <HAL_InitTick+0xe8>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800072a:	f107 0210 	add.w	r2, r7, #16
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f9a1 	bl	8001a7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800073e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000740:	2b00      	cmp	r3, #0
 8000742:	d103      	bne.n	800074c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000744:	f001 f972 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8000748:	6378      	str	r0, [r7, #52]	@ 0x34
 800074a:	e004      	b.n	8000756 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800074c:	f001 f96e 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8000750:	4603      	mov	r3, r0
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000758:	4a23      	ldr	r2, [pc, #140]	@ (80007e8 <HAL_InitTick+0xec>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	0c9b      	lsrs	r3, r3, #18
 8000760:	3b01      	subs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000764:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <HAL_InitTick+0xf0>)
 8000766:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <HAL_InitTick+0xf4>)
 8000768:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <HAL_InitTick+0xf0>)
 800076c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000770:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000772:	4a1e      	ldr	r2, [pc, #120]	@ (80007ec <HAL_InitTick+0xf0>)
 8000774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000776:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <HAL_InitTick+0xf0>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <HAL_InitTick+0xf0>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <HAL_InitTick+0xf0>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800078a:	4818      	ldr	r0, [pc, #96]	@ (80007ec <HAL_InitTick+0xf0>)
 800078c:	f001 f9de 	bl	8001b4c <HAL_TIM_Base_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000796:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800079a:	2b00      	cmp	r3, #0
 800079c:	d11b      	bne.n	80007d6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800079e:	4813      	ldr	r0, [pc, #76]	@ (80007ec <HAL_InitTick+0xf0>)
 80007a0:	f001 fa2c 	bl	8001bfc <HAL_TIM_Base_Start_IT>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d111      	bne.n	80007d6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007b2:	201e      	movs	r0, #30
 80007b4:	f000 fb1f 	bl	8000df6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	d808      	bhi.n	80007d0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80007be:	2200      	movs	r2, #0
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	201e      	movs	r0, #30
 80007c4:	f000 fafb 	bl	8000dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007c8:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <HAL_InitTick+0xf8>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	e002      	b.n	80007d6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3738      	adds	r7, #56	@ 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	431bde83 	.word	0x431bde83
 80007ec:	20000484 	.word	0x20000484
 80007f0:	40000800 	.word	0x40000800
 80007f4:	20000010 	.word	0x20000010

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007fc:	f001 f96e 	bl	8001adc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <NMI_Handler+0x8>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <UsageFault_Handler+0x4>

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <TIM4_IRQHandler+0x10>)
 8000836:	f001 fa33 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000484 	.word	0x20000484

08000844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <USART1_IRQHandler+0x10>)
 800084a:	f001 fc4f 	bl	80020ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200004d0 	.word	0x200004d0

08000858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <USART2_IRQHandler+0x10>)
 800085e:	f001 fc45 	bl	80020ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000518 	.word	0x20000518

0800086c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <USART3_IRQHandler+0x10>)
 8000872:	f001 fc3b 	bl	80020ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000560 	.word	0x20000560

08000880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000888:	4a14      	ldr	r2, [pc, #80]	@ (80008dc <_sbrk+0x5c>)
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <_sbrk+0x60>)
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <_sbrk+0x64>)
 800089e:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <_sbrk+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d207      	bcs.n	80008c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b0:	f004 fe14 	bl	80054dc <__errno>
 80008b4:	4603      	mov	r3, r0
 80008b6:	220c      	movs	r2, #12
 80008b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	e009      	b.n	80008d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c6:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <_sbrk+0x64>)
 80008d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20005000 	.word	0x20005000
 80008e0:	00000400 	.word	0x00000400
 80008e4:	200004cc 	.word	0x200004cc
 80008e8:	20002840 	.word	0x20002840

080008ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <MX_USART1_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000930:	f001 fb56 	bl	8001fe0 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f7ff fea1 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200004d0 	.word	0x200004d0
 8000948:	40013800 	.word	0x40013800

0800094c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <MX_USART2_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000984:	f001 fb2c 	bl	8001fe0 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f7ff fe77 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000518 	.word	0x20000518
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <MX_USART3_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_USART3_UART_Init+0x4c>)
 80009d8:	f001 fb02 	bl	8001fe0 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f7ff fe4d 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000560 	.word	0x20000560
 80009f0:	40004800 	.word	0x40004800

080009f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	@ 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8000b8c <HAL_UART_MspInit+0x198>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d13a      	bne.n	8000a8a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a14:	4b5e      	ldr	r3, [pc, #376]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a5d      	ldr	r2, [pc, #372]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b5b      	ldr	r3, [pc, #364]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a28:	61fb      	str	r3, [r7, #28]
 8000a2a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b58      	ldr	r3, [pc, #352]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a57      	ldr	r2, [pc, #348]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b55      	ldr	r3, [pc, #340]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	4619      	mov	r1, r3
 8000a58:	484e      	ldr	r0, [pc, #312]	@ (8000b94 <HAL_UART_MspInit+0x1a0>)
 8000a5a:	f000 fa8d 	bl	8000f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	4619      	mov	r1, r3
 8000a72:	4848      	ldr	r0, [pc, #288]	@ (8000b94 <HAL_UART_MspInit+0x1a0>)
 8000a74:	f000 fa80 	bl	8000f78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	2025      	movs	r0, #37	@ 0x25
 8000a7e:	f000 f99e 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a82:	2025      	movs	r0, #37	@ 0x25
 8000a84:	f000 f9b7 	bl	8000df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a88:	e07c      	b.n	8000b84 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a42      	ldr	r2, [pc, #264]	@ (8000b98 <HAL_UART_MspInit+0x1a4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d138      	bne.n	8000b06 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a94:	4b3e      	ldr	r3, [pc, #248]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	4a3d      	ldr	r2, [pc, #244]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a9e:	61d3      	str	r3, [r2, #28]
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a37      	ldr	r2, [pc, #220]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	482f      	ldr	r0, [pc, #188]	@ (8000b94 <HAL_UART_MspInit+0x1a0>)
 8000ad8:	f000 fa4e 	bl	8000f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4619      	mov	r1, r3
 8000aee:	4829      	ldr	r0, [pc, #164]	@ (8000b94 <HAL_UART_MspInit+0x1a0>)
 8000af0:	f000 fa42 	bl	8000f78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2105      	movs	r1, #5
 8000af8:	2026      	movs	r0, #38	@ 0x26
 8000afa:	f000 f960 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000afe:	2026      	movs	r0, #38	@ 0x26
 8000b00:	f000 f979 	bl	8000df6 <HAL_NVIC_EnableIRQ>
}
 8000b04:	e03e      	b.n	8000b84 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a24      	ldr	r2, [pc, #144]	@ (8000b9c <HAL_UART_MspInit+0x1a8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d139      	bne.n	8000b84 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000b16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b1a:	61d3      	str	r3, [r2, #28]
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <HAL_UART_MspInit+0x19c>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	4619      	mov	r1, r3
 8000b54:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <HAL_UART_MspInit+0x1ac>)
 8000b56:	f000 fa0f 	bl	8000f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <HAL_UART_MspInit+0x1ac>)
 8000b70:	f000 fa02 	bl	8000f78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2105      	movs	r1, #5
 8000b78:	2027      	movs	r0, #39	@ 0x27
 8000b7a:	f000 f920 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b7e:	2027      	movs	r0, #39	@ 0x27
 8000b80:	f000 f939 	bl	8000df6 <HAL_NVIC_EnableIRQ>
}
 8000b84:	bf00      	nop
 8000b86:	3730      	adds	r7, #48	@ 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40013800 	.word	0x40013800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40004800 	.word	0x40004800
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff fea2 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480b      	ldr	r0, [pc, #44]	@ (8000bd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000baa:	490c      	ldr	r1, [pc, #48]	@ (8000bdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bac:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a09      	ldr	r2, [pc, #36]	@ (8000be4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bc0:	4c09      	ldr	r4, [pc, #36]	@ (8000be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f004 fc8b 	bl	80054e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fced 	bl	80005b0 <main>
  bx lr
 8000bd6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000be0:	08005fd4 	.word	0x08005fd4
  ldr r2, =_sbss
 8000be4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000be8:	20002840 	.word	0x20002840

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_Init+0x28>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <HAL_Init+0x28>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f8d1 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff fd78 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fd3e 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_IncTick+0x1c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a03      	ldr	r2, [pc, #12]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	20000014 	.word	0x20000014
 8000c3c:	200005a8 	.word	0x200005a8

08000c40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b02      	ldr	r3, [pc, #8]	@ (8000c50 <HAL_GetTick+0x10>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	200005a8 	.word	0x200005a8

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4906      	ldr	r1, [pc, #24]	@ (8000cec <__NVIC_EnableIRQ+0x34>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	@ (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	@ 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff4f 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff64 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ffb2 	bl	8000d44 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff81 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff57 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d008      	beq.n	8000e3c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e020      	b.n	8000e7e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 020e 	bic.w	r2, r2, #14
 8000e4a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0201 	bic.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d005      	beq.n	8000eac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e051      	b.n	8000f50 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020e 	bic.w	r2, r2, #14
 8000eba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <HAL_DMA_Abort_IT+0xd4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d029      	beq.n	8000f2a <HAL_DMA_Abort_IT+0xa2>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <HAL_DMA_Abort_IT+0xd8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d022      	beq.n	8000f26 <HAL_DMA_Abort_IT+0x9e>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f64 <HAL_DMA_Abort_IT+0xdc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d01a      	beq.n	8000f20 <HAL_DMA_Abort_IT+0x98>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1e      	ldr	r2, [pc, #120]	@ (8000f68 <HAL_DMA_Abort_IT+0xe0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d012      	beq.n	8000f1a <HAL_DMA_Abort_IT+0x92>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f6c <HAL_DMA_Abort_IT+0xe4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00a      	beq.n	8000f14 <HAL_DMA_Abort_IT+0x8c>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1b      	ldr	r2, [pc, #108]	@ (8000f70 <HAL_DMA_Abort_IT+0xe8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d102      	bne.n	8000f0e <HAL_DMA_Abort_IT+0x86>
 8000f08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f0c:	e00e      	b.n	8000f2c <HAL_DMA_Abort_IT+0xa4>
 8000f0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f12:	e00b      	b.n	8000f2c <HAL_DMA_Abort_IT+0xa4>
 8000f14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f18:	e008      	b.n	8000f2c <HAL_DMA_Abort_IT+0xa4>
 8000f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1e:	e005      	b.n	8000f2c <HAL_DMA_Abort_IT+0xa4>
 8000f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f24:	e002      	b.n	8000f2c <HAL_DMA_Abort_IT+0xa4>
 8000f26:	2310      	movs	r3, #16
 8000f28:	e000      	b.n	8000f2c <HAL_DMA_Abort_IT+0xa4>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4a11      	ldr	r2, [pc, #68]	@ (8000f74 <HAL_DMA_Abort_IT+0xec>)
 8000f2e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	4798      	blx	r3
    } 
  }
  return status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020008 	.word	0x40020008
 8000f60:	4002001c 	.word	0x4002001c
 8000f64:	40020030 	.word	0x40020030
 8000f68:	40020044 	.word	0x40020044
 8000f6c:	40020058 	.word	0x40020058
 8000f70:	4002006c 	.word	0x4002006c
 8000f74:	40020000 	.word	0x40020000

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e169      	b.n	8001260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 8158 	bne.w	800125a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4a9a      	ldr	r2, [pc, #616]	@ (8001218 <HAL_GPIO_Init+0x2a0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d05e      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a98      	ldr	r2, [pc, #608]	@ (8001218 <HAL_GPIO_Init+0x2a0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d875      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fba:	4a98      	ldr	r2, [pc, #608]	@ (800121c <HAL_GPIO_Init+0x2a4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d058      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fc0:	4a96      	ldr	r2, [pc, #600]	@ (800121c <HAL_GPIO_Init+0x2a4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d86f      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fc6:	4a96      	ldr	r2, [pc, #600]	@ (8001220 <HAL_GPIO_Init+0x2a8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d052      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fcc:	4a94      	ldr	r2, [pc, #592]	@ (8001220 <HAL_GPIO_Init+0x2a8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d869      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fd2:	4a94      	ldr	r2, [pc, #592]	@ (8001224 <HAL_GPIO_Init+0x2ac>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d04c      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fd8:	4a92      	ldr	r2, [pc, #584]	@ (8001224 <HAL_GPIO_Init+0x2ac>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d863      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fde:	4a92      	ldr	r2, [pc, #584]	@ (8001228 <HAL_GPIO_Init+0x2b0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d046      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a90      	ldr	r2, [pc, #576]	@ (8001228 <HAL_GPIO_Init+0x2b0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d85d      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fea:	2b12      	cmp	r3, #18
 8000fec:	d82a      	bhi.n	8001044 <HAL_GPIO_Init+0xcc>
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d859      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff8 <HAL_GPIO_Init+0x80>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001073 	.word	0x08001073
 8000ffc:	0800104d 	.word	0x0800104d
 8001000:	0800105f 	.word	0x0800105f
 8001004:	080010a1 	.word	0x080010a1
 8001008:	080010a7 	.word	0x080010a7
 800100c:	080010a7 	.word	0x080010a7
 8001010:	080010a7 	.word	0x080010a7
 8001014:	080010a7 	.word	0x080010a7
 8001018:	080010a7 	.word	0x080010a7
 800101c:	080010a7 	.word	0x080010a7
 8001020:	080010a7 	.word	0x080010a7
 8001024:	080010a7 	.word	0x080010a7
 8001028:	080010a7 	.word	0x080010a7
 800102c:	080010a7 	.word	0x080010a7
 8001030:	080010a7 	.word	0x080010a7
 8001034:	080010a7 	.word	0x080010a7
 8001038:	080010a7 	.word	0x080010a7
 800103c:	08001055 	.word	0x08001055
 8001040:	08001069 	.word	0x08001069
 8001044:	4a79      	ldr	r2, [pc, #484]	@ (800122c <HAL_GPIO_Init+0x2b4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800104a:	e02c      	b.n	80010a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e029      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	3304      	adds	r3, #4
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e024      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	3308      	adds	r3, #8
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e01f      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	330c      	adds	r3, #12
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e01a      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800107a:	2304      	movs	r3, #4
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e013      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d105      	bne.n	8001094 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001088:	2308      	movs	r3, #8
 800108a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	611a      	str	r2, [r3, #16]
          break;
 8001092:	e009      	b.n	80010a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001094:	2308      	movs	r3, #8
 8001096:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	615a      	str	r2, [r3, #20]
          break;
 800109e:	e003      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
          break;
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          break;
 80010a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2bff      	cmp	r3, #255	@ 0xff
 80010ac:	d801      	bhi.n	80010b2 <HAL_GPIO_Init+0x13a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	e001      	b.n	80010b6 <HAL_GPIO_Init+0x13e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3304      	adds	r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2bff      	cmp	r3, #255	@ 0xff
 80010bc:	d802      	bhi.n	80010c4 <HAL_GPIO_Init+0x14c>
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	e002      	b.n	80010ca <HAL_GPIO_Init+0x152>
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	3b08      	subs	r3, #8
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	210f      	movs	r1, #15
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	401a      	ands	r2, r3
 80010dc:	6a39      	ldr	r1, [r7, #32]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	431a      	orrs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80b1 	beq.w	800125a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b4a      	ldr	r3, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001110:	4a48      	ldr	r2, [pc, #288]	@ (8001234 <HAL_GPIO_Init+0x2bc>)
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a40      	ldr	r2, [pc, #256]	@ (8001238 <HAL_GPIO_Init+0x2c0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d013      	beq.n	8001164 <HAL_GPIO_Init+0x1ec>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a3f      	ldr	r2, [pc, #252]	@ (800123c <HAL_GPIO_Init+0x2c4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1e8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a3e      	ldr	r2, [pc, #248]	@ (8001240 <HAL_GPIO_Init+0x2c8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1e4>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3d      	ldr	r2, [pc, #244]	@ (8001244 <HAL_GPIO_Init+0x2cc>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1e0>
 8001154:	2303      	movs	r3, #3
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001158:	2304      	movs	r3, #4
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001164:	2300      	movs	r3, #0
 8001166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001176:	492f      	ldr	r1, [pc, #188]	@ (8001234 <HAL_GPIO_Init+0x2bc>)
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001190:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	492c      	ldr	r1, [pc, #176]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800119e:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4928      	ldr	r1, [pc, #160]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011b8:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	4922      	ldr	r1, [pc, #136]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60cb      	str	r3, [r1, #12]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	491e      	ldr	r1, [pc, #120]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4918      	ldr	r1, [pc, #96]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4914      	ldr	r1, [pc, #80]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d021      	beq.n	800124c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	490e      	ldr	r1, [pc, #56]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
 8001214:	e021      	b.n	800125a <HAL_GPIO_Init+0x2e2>
 8001216:	bf00      	nop
 8001218:	10320000 	.word	0x10320000
 800121c:	10310000 	.word	0x10310000
 8001220:	10220000 	.word	0x10220000
 8001224:	10210000 	.word	0x10210000
 8001228:	10120000 	.word	0x10120000
 800122c:	10110000 	.word	0x10110000
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00
 8001240:	40011000 	.word	0x40011000
 8001244:	40011400 	.word	0x40011400
 8001248:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_GPIO_Init+0x304>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	43db      	mvns	r3, r3
 8001254:	4909      	ldr	r1, [pc, #36]	@ (800127c <HAL_GPIO_Init+0x304>)
 8001256:	4013      	ands	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	3301      	adds	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	f47f ae8e 	bne.w	8000f8c <HAL_GPIO_Init+0x14>
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	372c      	adds	r7, #44	@ 0x2c
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e272      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8087 	beq.w	80013ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a0:	4b92      	ldr	r3, [pc, #584]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d00c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ac:	4b8f      	ldr	r3, [pc, #572]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d112      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
 80012b8:	4b8c      	ldr	r3, [pc, #560]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012c4:	d10b      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	4b89      	ldr	r3, [pc, #548]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d06c      	beq.n	80013ac <HAL_RCC_OscConfig+0x12c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d168      	bne.n	80013ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e24c      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x76>
 80012e8:	4b80      	ldr	r3, [pc, #512]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a7f      	ldr	r2, [pc, #508]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e02e      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4b7b      	ldr	r3, [pc, #492]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7a      	ldr	r2, [pc, #488]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b78      	ldr	r3, [pc, #480]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a77      	ldr	r2, [pc, #476]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001310:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0xbc>
 8001322:	4b72      	ldr	r3, [pc, #456]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a71      	ldr	r2, [pc, #452]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6f      	ldr	r3, [pc, #444]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6e      	ldr	r2, [pc, #440]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 800133c:	4b6b      	ldr	r3, [pc, #428]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6a      	ldr	r2, [pc, #424]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b68      	ldr	r3, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a67      	ldr	r2, [pc, #412]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fc70 	bl	8000c40 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fc6c 	bl	8000c40 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e200      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5d      	ldr	r3, [pc, #372]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xe4>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fc5c 	bl	8000c40 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fc58 	bl	8000c40 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1ec      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b53      	ldr	r3, [pc, #332]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x10c>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ba:	4b4c      	ldr	r3, [pc, #304]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013c6:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x18c>
 80013d2:	4b46      	ldr	r3, [pc, #280]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b43      	ldr	r3, [pc, #268]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x176>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c0      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4939      	ldr	r1, [pc, #228]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b36      	ldr	r3, [pc, #216]	@ (80014f0 <HAL_RCC_OscConfig+0x270>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fc11 	bl	8000c40 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc0d 	bl	8000c40 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a1      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4927      	ldr	r1, [pc, #156]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <HAL_RCC_OscConfig+0x270>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fbf0 	bl	8000c40 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fbec 	bl	8000c40 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e180      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03a      	beq.n	8001504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <HAL_RCC_OscConfig+0x274>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fbd0 	bl	8000c40 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fbcc 	bl	8000c40 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e160      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_RCC_OscConfig+0x26c>)
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 fb1e 	bl	8001b04 <RCC_Delay>
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_RCC_OscConfig+0x274>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fbb6 	bl	8000c40 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d6:	e00f      	b.n	80014f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fbb2 	bl	8000c40 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d908      	bls.n	80014f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e146      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	42420000 	.word	0x42420000
 80014f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b92      	ldr	r3, [pc, #584]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1e9      	bne.n	80014d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a6 	beq.w	800165e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b8b      	ldr	r3, [pc, #556]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10d      	bne.n	800153e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b88      	ldr	r3, [pc, #544]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a87      	ldr	r2, [pc, #540]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b85      	ldr	r3, [pc, #532]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b82      	ldr	r3, [pc, #520]	@ (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b7f      	ldr	r3, [pc, #508]	@ (8001748 <HAL_RCC_OscConfig+0x4c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7e      	ldr	r2, [pc, #504]	@ (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fb73 	bl	8000c40 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fb6f 	bl	8000c40 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	@ 0x64
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e103      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b75      	ldr	r3, [pc, #468]	@ (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x312>
 8001584:	4b6f      	ldr	r3, [pc, #444]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a6e      	ldr	r2, [pc, #440]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	e02d      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x334>
 800159a:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a69      	ldr	r2, [pc, #420]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4b67      	ldr	r3, [pc, #412]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a66      	ldr	r2, [pc, #408]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	e01c      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x356>
 80015bc:	4b61      	ldr	r3, [pc, #388]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a60      	ldr	r2, [pc, #384]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 80015d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a5a      	ldr	r2, [pc, #360]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	4b58      	ldr	r3, [pc, #352]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a57      	ldr	r2, [pc, #348]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb23 	bl	8000c40 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fb1f 	bl	8000c40 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0b1      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4b4b      	ldr	r3, [pc, #300]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ee      	beq.n	80015fe <HAL_RCC_OscConfig+0x37e>
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb0d 	bl	8000c40 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fb09 	bl	8000c40 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e09b      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	4b40      	ldr	r3, [pc, #256]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a3b      	ldr	r2, [pc, #236]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8087 	beq.w	8001776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001668:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d061      	beq.n	8001738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d146      	bne.n	800170a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b33      	ldr	r3, [pc, #204]	@ (800174c <HAL_RCC_OscConfig+0x4cc>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fadd 	bl	8000c40 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fad9 	bl	8000c40 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e06d      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b0:	d108      	bne.n	80016c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4921      	ldr	r1, [pc, #132]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a19      	ldr	r1, [r3, #32]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	430b      	orrs	r3, r1
 80016d6:	491b      	ldr	r1, [pc, #108]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_RCC_OscConfig+0x4cc>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff faad 	bl	8000c40 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff faa9 	bl	8000c40 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e03d      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x46a>
 8001708:	e035      	b.n	8001776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <HAL_RCC_OscConfig+0x4cc>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fa96 	bl	8000c40 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fa92 	bl	8000c40 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e026      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x498>
 8001736:	e01e      	b.n	8001776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d107      	bne.n	8001750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e019      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_RCC_OscConfig+0x500>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	429a      	cmp	r2, r3
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0d0      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b6a      	ldr	r3, [pc, #424]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d910      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b67      	ldr	r3, [pc, #412]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0207 	bic.w	r2, r3, #7
 80017ae:	4965      	ldr	r1, [pc, #404]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a52      	ldr	r2, [pc, #328]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d115      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e073      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06b      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4936      	ldr	r1, [pc, #216]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f9e4 	bl	8000c40 <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff f9e0 	bl	8000c40 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e053      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d210      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	4922      	ldr	r1, [pc, #136]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f82d 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	@ (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <HAL_RCC_ClockConfig+0x1cc>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_ClockConfig+0x1d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fee2 	bl	80006fc <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	08005f64 	.word	0x08005f64
 8001950:	2000000c 	.word	0x2000000c
 8001954:	20000010 	.word	0x20000010

08001958 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_RCC_EnableCSS+0x14>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	4242004c 	.word	0x4242004c

08001970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b04      	cmp	r3, #4
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x30>
 800199a:	2b08      	cmp	r3, #8
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x36>
 800199e:	e027      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019a2:	613b      	str	r3, [r7, #16]
      break;
 80019a4:	e027      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	0c9b      	lsrs	r3, r3, #18
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0c5b      	lsrs	r3, r3, #17
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	4a11      	ldr	r2, [pc, #68]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019d2:	fb03 f202 	mul.w	r2, r3, r2
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e004      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	613b      	str	r3, [r7, #16]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019f2:	613b      	str	r3, [r7, #16]
      break;
 80019f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f6:	693b      	ldr	r3, [r7, #16]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	007a1200 	.word	0x007a1200
 8001a0c:	08005f7c 	.word	0x08005f7c
 8001a10:	08005f8c 	.word	0x08005f8c
 8001a14:	003d0900 	.word	0x003d0900

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	@ (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	2000000c 	.word	0x2000000c

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	@ (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08005f74 	.word	0x08005f74

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0adb      	lsrs	r3, r3, #11
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	@ (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08005f74 	.word	0x08005f74

08001a7c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	220f      	movs	r2, #15
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x58>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x58>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x58>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x58>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0207 	and.w	r2, r3, #7
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_NMI_IRQHandler+0x20>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae8:	2b80      	cmp	r3, #128	@ 0x80
 8001aea:	d104      	bne.n	8001af6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001aec:	f000 f828 	bl	8001b40 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001af0:	4b03      	ldr	r3, [pc, #12]	@ (8001b00 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001af2:	2280      	movs	r2, #128	@ 0x80
 8001af4:	701a      	strb	r2, [r3, #0]
  }
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	4002100a 	.word	0x4002100a

08001b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <RCC_Delay+0x34>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <RCC_Delay+0x38>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0a5b      	lsrs	r3, r3, #9
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b20:	bf00      	nop
  }
  while (Delay --);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e5a      	subs	r2, r3, #1
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <RCC_Delay+0x1c>
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	10624dd3 	.word	0x10624dd3

08001b40 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e041      	b.n	8001be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f839 	bl	8001bea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 f9b4 	bl	8001ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d001      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e03a      	b.n	8001c8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a18      	ldr	r2, [pc, #96]	@ (8001c94 <HAL_TIM_Base_Start_IT+0x98>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00e      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x58>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3e:	d009      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x58>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a14      	ldr	r2, [pc, #80]	@ (8001c98 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x58>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <HAL_TIM_Base_Start_IT+0xa0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d111      	bne.n	8001c78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d010      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c76:	e007      	b.n	8001c88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800

08001ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0202 	mvn.w	r2, #2
 8001ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8ed 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8e0 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8ef 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0204 	mvn.w	r2, #4
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8c3 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8b6 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8c5 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0208 	mvn.w	r2, #8
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f899 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f88c 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f89b 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0210 	mvn.w	r2, #16
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f86f 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f862 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f871 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7fe fc1c 	bl	800065c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2e:	2b80      	cmp	r3, #128	@ 0x80
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3c:	2b80      	cmp	r3, #128	@ 0x80
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8bf 	bl	8001fce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5a:	2b40      	cmp	r3, #64	@ 0x40
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e68:	2b40      	cmp	r3, #64	@ 0x40
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f835 	bl	8001ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f88a 	bl	8001fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a29      	ldr	r2, [pc, #164]	@ (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00b      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f16:	d007      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a26      	ldr	r2, [pc, #152]	@ (8001fb4 <TIM_Base_SetConfig+0xbc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <TIM_Base_SetConfig+0xc0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d108      	bne.n	8001f3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00b      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f48:	d007      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <TIM_Base_SetConfig+0xbc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a18      	ldr	r2, [pc, #96]	@ (8001fb8 <TIM_Base_SetConfig+0xc0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d103      	bne.n	8001fa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800

08001fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e042      	b.n	8002078 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fcf4 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	@ 0x24
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fcab 	bl	8002980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	d121      	bne.n	80020de <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_UART_Transmit_IT+0x26>
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e01a      	b.n	80020e0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	88fa      	ldrh	r2, [r7, #6]
 80020b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	88fa      	ldrh	r2, [r7, #6]
 80020ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2221      	movs	r2, #33	@ 0x21
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0ba      	sub	sp, #232	@ 0xe8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800211e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800212a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_UART_IRQHandler+0x66>
 800213e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fb5a 	bl	8002804 <UART_Receive_IT>
      return;
 8002150:	e25b      	b.n	800260a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80de 	beq.w	8002318 <HAL_UART_IRQHandler+0x22c>
 800215c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800216c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80d1 	beq.w	8002318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_UART_IRQHandler+0xae>
 8002182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800219a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_UART_IRQHandler+0xd2>
 80021a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_UART_IRQHandler+0xf6>
 80021ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d011      	beq.n	8002212 <HAL_UART_IRQHandler+0x126>
 80021ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f043 0208 	orr.w	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 81f2 	beq.w	8002600 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800221c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_UART_IRQHandler+0x14e>
 8002228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fae5 	bl	8002804 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_UART_IRQHandler+0x17a>
 800225e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d04f      	beq.n	8002306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f9ef 	bl	800264a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d041      	beq.n	80022fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3314      	adds	r3, #20
 8002280:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002288:	e853 3f00 	ldrex	r3, [r3]
 800228c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3314      	adds	r3, #20
 80022a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80022a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80022aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80022b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80022b6:	e841 2300 	strex	r3, r2, [r1]
 80022ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80022be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1d9      	bne.n	800227a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d013      	beq.n	80022f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d2:	4a7e      	ldr	r2, [pc, #504]	@ (80024cc <HAL_UART_IRQHandler+0x3e0>)
 80022d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fdd4 	bl	8000e88 <HAL_DMA_Abort_IT>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022f0:	4610      	mov	r0, r2
 80022f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f4:	e00e      	b.n	8002314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f993 	bl	8002622 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	e00a      	b.n	8002314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f98f 	bl	8002622 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002304:	e006      	b.n	8002314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f98b 	bl	8002622 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002312:	e175      	b.n	8002600 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002314:	bf00      	nop
    return;
 8002316:	e173      	b.n	8002600 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	2b01      	cmp	r3, #1
 800231e:	f040 814f 	bne.w	80025c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8148 	beq.w	80025c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8141 	beq.w	80025c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80b6 	beq.w	80024d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8145 	beq.w	8002604 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800237e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002382:	429a      	cmp	r2, r3
 8002384:	f080 813e 	bcs.w	8002604 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800238e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b20      	cmp	r3, #32
 8002398:	f000 8088 	beq.w	80024ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	330c      	adds	r3, #12
 80023a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023aa:	e853 3f00 	ldrex	r3, [r3]
 80023ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80023b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	330c      	adds	r3, #12
 80023c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80023c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80023d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023d8:	e841 2300 	strex	r3, r2, [r1]
 80023dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1d9      	bne.n	800239c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3314      	adds	r3, #20
 80023ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023f2:	e853 3f00 	ldrex	r3, [r3]
 80023f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80023f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800240c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002410:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002412:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002414:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002418:	e841 2300 	strex	r3, r2, [r1]
 800241c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800241e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e1      	bne.n	80023e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3314      	adds	r3, #20
 800242a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800242e:	e853 3f00 	ldrex	r3, [r3]
 8002432:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800243a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3314      	adds	r3, #20
 8002444:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002448:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800244a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800244e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002450:	e841 2300 	strex	r3, r2, [r1]
 8002454:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e3      	bne.n	8002424 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	330c      	adds	r3, #12
 8002470:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800247a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247c:	f023 0310 	bic.w	r3, r3, #16
 8002480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800248e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002490:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002496:	e841 2300 	strex	r3, r2, [r1]
 800249a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800249c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e3      	bne.n	800246a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fcb3 	bl	8000e12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8b6 	bl	8002634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024c8:	e09c      	b.n	8002604 <HAL_UART_IRQHandler+0x518>
 80024ca:	bf00      	nop
 80024cc:	0800270f 	.word	0x0800270f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024d8:	b29b      	uxth	r3, r3
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 808e 	beq.w	8002608 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80024ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8089 	beq.w	8002608 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	330c      	adds	r3, #12
 80024fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002500:	e853 3f00 	ldrex	r3, [r3]
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800250c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800251a:	647a      	str	r2, [r7, #68]	@ 0x44
 800251c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002520:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002522:	e841 2300 	strex	r3, r2, [r1]
 8002526:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e3      	bne.n	80024f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3314      	adds	r3, #20
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	e853 3f00 	ldrex	r3, [r3]
 800253c:	623b      	str	r3, [r7, #32]
   return(result);
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3314      	adds	r3, #20
 800254e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002552:	633a      	str	r2, [r7, #48]	@ 0x30
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800255a:	e841 2300 	strex	r3, r2, [r1]
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1e3      	bne.n	800252e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	e853 3f00 	ldrex	r3, [r3]
 8002582:	60fb      	str	r3, [r7, #12]
   return(result);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0310 	bic.w	r3, r3, #16
 800258a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	330c      	adds	r3, #12
 8002594:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002598:	61fa      	str	r2, [r7, #28]
 800259a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259c:	69b9      	ldr	r1, [r7, #24]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	e841 2300 	strex	r3, r2, [r1]
 80025a4:	617b      	str	r3, [r7, #20]
   return(result);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e3      	bne.n	8002574 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025b6:	4619      	mov	r1, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f83b 	bl	8002634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025be:	e023      	b.n	8002608 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d009      	beq.n	80025e0 <HAL_UART_IRQHandler+0x4f4>
 80025cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f8ac 	bl	8002736 <UART_Transmit_IT>
    return;
 80025de:	e014      	b.n	800260a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <HAL_UART_IRQHandler+0x51e>
 80025ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8eb 	bl	80027d4 <UART_EndTransmit_IT>
    return;
 80025fe:	e004      	b.n	800260a <HAL_UART_IRQHandler+0x51e>
    return;
 8002600:	bf00      	nop
 8002602:	e002      	b.n	800260a <HAL_UART_IRQHandler+0x51e>
      return;
 8002604:	bf00      	nop
 8002606:	e000      	b.n	800260a <HAL_UART_IRQHandler+0x51e>
      return;
 8002608:	bf00      	nop
  }
}
 800260a:	37e8      	adds	r7, #232	@ 0xe8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800264a:	b480      	push	{r7}
 800264c:	b095      	sub	sp, #84	@ 0x54
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002672:	643a      	str	r2, [r7, #64]	@ 0x40
 8002674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002678:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e5      	bne.n	8002652 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3314      	adds	r3, #20
 800268c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	61fb      	str	r3, [r7, #28]
   return(result);
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ae:	e841 2300 	strex	r3, r2, [r1]
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e5      	bne.n	8002686 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d119      	bne.n	80026f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f023 0310 	bic.w	r3, r3, #16
 80026d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026e2:	61ba      	str	r2, [r7, #24]
 80026e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	6979      	ldr	r1, [r7, #20]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	613b      	str	r3, [r7, #16]
   return(result);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e5      	bne.n	80026c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002704:	bf00      	nop
 8002706:	3754      	adds	r7, #84	@ 0x54
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff ff7a 	bl	8002622 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b21      	cmp	r3, #33	@ 0x21
 8002748:	d13e      	bne.n	80027c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002752:	d114      	bne.n	800277e <UART_Transmit_IT+0x48>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d110      	bne.n	800277e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002770:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	1c9a      	adds	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	621a      	str	r2, [r3, #32]
 800277c:	e008      	b.n	8002790 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6211      	str	r1, [r2, #32]
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10f      	bne.n	80027c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fd fceb 	bl	80001d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	@ 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b22      	cmp	r3, #34	@ 0x22
 8002816:	f040 80ae 	bne.w	8002976 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002822:	d117      	bne.n	8002854 <UART_Receive_IT+0x50>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d113      	bne.n	8002854 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002842:	b29a      	uxth	r2, r3
 8002844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002846:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	1c9a      	adds	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	629a      	str	r2, [r3, #40]	@ 0x28
 8002852:	e026      	b.n	80028a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800285a:	2300      	movs	r3, #0
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002866:	d007      	beq.n	8002878 <UART_Receive_IT+0x74>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <UART_Receive_IT+0x82>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e008      	b.n	8002898 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002892:	b2da      	uxtb	r2, r3
 8002894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002896:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4619      	mov	r1, r3
 80028b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d15d      	bne.n	8002972 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0220 	bic.w	r2, r2, #32
 80028c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0201 	bic.w	r2, r2, #1
 80028e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d135      	bne.n	8002968 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	e853 3f00 	ldrex	r3, [r3]
 8002910:	613b      	str	r3, [r7, #16]
   return(result);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f023 0310 	bic.w	r3, r3, #16
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002922:	623a      	str	r2, [r7, #32]
 8002924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	69f9      	ldr	r1, [r7, #28]
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e5      	bne.n	8002902 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b10      	cmp	r3, #16
 8002942:	d10a      	bne.n	800295a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fe67 	bl	8002634 <HAL_UARTEx_RxEventCallback>
 8002966:	e002      	b.n	800296e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fe51 	bl	8002610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e002      	b.n	8002978 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3730      	adds	r7, #48	@ 0x30
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029ba:	f023 030c 	bic.w	r3, r3, #12
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a94 <UART_SetConfig+0x114>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d103      	bne.n	80029f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029e8:	f7ff f834 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	e002      	b.n	80029f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029f0:	f7ff f81c 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 80029f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009a      	lsls	r2, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	4a22      	ldr	r2, [pc, #136]	@ (8002a98 <UART_SetConfig+0x118>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	0119      	lsls	r1, r3, #4
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009a      	lsls	r2, r3, #2
 8002a20:	441a      	add	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <UART_SetConfig+0x118>)
 8002a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2064      	movs	r0, #100	@ 0x64
 8002a36:	fb00 f303 	mul.w	r3, r0, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	3332      	adds	r3, #50	@ 0x32
 8002a40:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <UART_SetConfig+0x118>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a4c:	4419      	add	r1, r3
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <UART_SetConfig+0x118>)
 8002a66:	fba3 0302 	umull	r0, r3, r3, r2
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2064      	movs	r0, #100	@ 0x64
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	3332      	adds	r3, #50	@ 0x32
 8002a78:	4a07      	ldr	r2, [pc, #28]	@ (8002a98 <UART_SetConfig+0x118>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	440a      	add	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40013800 	.word	0x40013800
 8002a98:	51eb851f 	.word	0x51eb851f

08002a9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aae:	2b84      	cmp	r3, #132	@ 0x84
 8002ab0:	d005      	beq.n	8002abe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3303      	adds	r3, #3
 8002abc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ad0:	f3ef 8305 	mrs	r3, IPSR
 8002ad4:	607b      	str	r3, [r7, #4]
  return(result);
 8002ad6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002af0:	f001 fa58 	bl	8003fa4 <vTaskStartScheduler>
  
  return osOK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	bd80      	pop	{r7, pc}

08002afa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afc:	b089      	sub	sp, #36	@ 0x24
 8002afe:	af04      	add	r7, sp, #16
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <osThreadCreate+0x54>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01c      	beq.n	8002b4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685c      	ldr	r4, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691e      	ldr	r6, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ffb8 	bl	8002a9c <makeFreeRtosPriority>
 8002b2c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b36:	9202      	str	r2, [sp, #8]
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	9100      	str	r1, [sp, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4632      	mov	r2, r6
 8002b40:	4629      	mov	r1, r5
 8002b42:	4620      	mov	r0, r4
 8002b44:	f001 f878 	bl	8003c38 <xTaskCreateStatic>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e01c      	b.n	8002b88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685c      	ldr	r4, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b5a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff9a 	bl	8002a9c <makeFreeRtosPriority>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	9200      	str	r2, [sp, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	4632      	mov	r2, r6
 8002b76:	4629      	mov	r1, r5
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f001 f8bc 	bl	8003cf6 <xTaskCreate>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d001      	beq.n	8002b88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <osDelay+0x16>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	e000      	b.n	8002baa <osDelay+0x18>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 f9c4 	bl	8003f38 <vTaskDelay>
  
  return osOK;
 8002bb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8002bce:	f7ff ff7c 	bl	8002aca <inHandlerMode>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01c      	beq.n	8002c12 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002bd8:	6839      	ldr	r1, [r7, #0]
 8002bda:	f107 0208 	add.w	r2, r7, #8
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	2201      	movs	r2, #1
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 ff4d 	bl	8004a88 <xTaskGenericNotifyFromISR>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d002      	beq.n	8002bfa <osSignalSet+0x3e>
      return 0x80000000;
 8002bf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002bf8:	e019      	b.n	8002c2e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <osSignalSet+0x70>
 8002c00:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <osSignalSet+0x7c>)
 8002c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	e00c      	b.n	8002c2c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	f107 0308 	add.w	r3, r7, #8
 8002c18:	2201      	movs	r2, #1
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 fe9e 	bl	800495c <xTaskGenericNotify>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d002      	beq.n	8002c2c <osSignalSet+0x70>
    return 0x80000000;
 8002c26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002c2a:	e000      	b.n	8002c2e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b089      	sub	sp, #36	@ 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d103      	bne.n	8002c60 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8002c58:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e009      	b.n	8002c74 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <osSignalWait+0x38>
      ticks = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8002c74:	f7ff ff29 	bl	8002aca <inHandlerMode>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8002c7e:	2382      	movs	r3, #130	@ 0x82
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e01b      	b.n	8002cbc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	f107 0310 	add.w	r3, r7, #16
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f001 fe0a 	bl	80048a8 <xTaskNotifyWait>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d008      	beq.n	8002cac <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <osSignalWait+0x6a>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	e00a      	b.n	8002cbc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8002ca6:	2340      	movs	r3, #64	@ 0x40
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e007      	b.n	8002cbc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	da02      	bge.n	8002cb8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8002cb2:	2386      	movs	r3, #134	@ 0x86
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	e001      	b.n	8002cbc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	461c      	mov	r4, r3
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	3724      	adds	r7, #36	@ 0x24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}

08002cd4 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8002ce8:	2014      	movs	r0, #20
 8002cea:	f002 f9f1 	bl	80050d0 <pvPortMalloc>
 8002cee:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d046      	beq.n	8002d84 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f002 f9de 	bl	80050d0 <pvPortMalloc>
 8002d14:	4602      	mov	r2, r0
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02b      	beq.n	8002d7a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 f9cf 	bl	80050d0 <pvPortMalloc>
 8002d32:	4602      	mov	r2, r0
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d011      	beq.n	8002d64 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e008      	b.n	8002d58 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	3301      	adds	r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d3f1      	bcc.n	8002d46 <osPoolCreate+0x72>
 8002d62:	e00f      	b.n	8002d84 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fa79 	bl	8005260 <vPortFree>
        vPortFree(thePool);
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f002 fa76 	bl	8005260 <vPortFree>
        thePool = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e004      	b.n	8002d84 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f002 fa70 	bl	8005260 <vPortFree>
      thePool = NULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8002d84:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08a      	sub	sp, #40	@ 0x28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002d9e:	f7ff fe94 	bl	8002aca <inHandlerMode>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00e      	beq.n	8002dc6 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002da8:	f3ef 8211 	mrs	r2, BASEPRI
 8002dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	617a      	str	r2, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dc0:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc4:	e001      	b.n	8002dca <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002dc6:	f002 f881 	bl	8004ecc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e029      	b.n	8002e24 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002de0:	fb01 f202 	mul.w	r2, r1, r2
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d113      	bne.n	8002e1e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	440b      	add	r3, r1
 8002e14:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	611a      	str	r2, [r3, #16]
      break;
 8002e1c:	e007      	b.n	8002e2e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3301      	adds	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d3d0      	bcc.n	8002dd0 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8002e2e:	f7ff fe4c 	bl	8002aca <inHandlerMode>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e42:	e001      	b.n	8002e48 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8002e44:	f002 f872 	bl	8004f2c <vPortExitCritical>
  }
  
  return p;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3728      	adds	r7, #40	@ 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <osPoolFree+0x14>
    return osErrorParameter;
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	e030      	b.n	8002ec8 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <osPoolFree+0x1e>
    return osErrorParameter;
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	e02b      	b.n	8002ec8 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d201      	bcs.n	8002e7e <osPoolFree+0x2c>
    return osErrorParameter;
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	e024      	b.n	8002ec8 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e92:	fb01 f202 	mul.w	r2, r1, r2
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <osPoolFree+0x4e>
    return osErrorParameter;
 8002e9c:	2380      	movs	r3, #128	@ 0x80
 8002e9e:	e013      	b.n	8002ec8 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d301      	bcc.n	8002eba <osPoolFree+0x68>
    return osErrorParameter;
 8002eb6:	2380      	movs	r3, #128	@ 0x80
 8002eb8:	e006      	b.n	8002ec8 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002ed2:	b590      	push	{r4, r7, lr}
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	af02      	add	r7, sp, #8
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d011      	beq.n	8002f08 <osMessageCreate+0x36>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00d      	beq.n	8002f08 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2400      	movs	r4, #0
 8002efe:	9400      	str	r4, [sp, #0]
 8002f00:	f000 f9cf 	bl	80032a2 <xQueueGenericCreateStatic>
 8002f04:	4603      	mov	r3, r0
 8002f06:	e008      	b.n	8002f1a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	4619      	mov	r1, r3
 8002f14:	f000 fa41 	bl	800339a <xQueueGenericCreate>
 8002f18:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd90      	pop	{r4, r7, pc}
	...

08002f24 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <osMessagePut+0x1e>
    ticks = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002f42:	f7ff fdc2 	bl	8002aca <inHandlerMode>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d018      	beq.n	8002f7e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002f4c:	f107 0210 	add.w	r2, r7, #16
 8002f50:	f107 0108 	add.w	r1, r7, #8
 8002f54:	2300      	movs	r3, #0
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fb68 	bl	800362c <xQueueGenericSendFromISR>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <osMessagePut+0x42>
      return osErrorOS;
 8002f62:	23ff      	movs	r3, #255	@ 0xff
 8002f64:	e018      	b.n	8002f98 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d014      	beq.n	8002f96 <osMessagePut+0x72>
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <osMessagePut+0x7c>)
 8002f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	e00b      	b.n	8002f96 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002f7e:	f107 0108 	add.w	r1, r7, #8
 8002f82:	2300      	movs	r3, #0
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fa66 	bl	8003458 <xQueueGenericSend>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d001      	beq.n	8002f96 <osMessagePut+0x72>
      return osErrorOS;
 8002f92:	23ff      	movs	r3, #255	@ 0xff
 8002f94:	e000      	b.n	8002f98 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b08b      	sub	sp, #44	@ 0x2c
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002fbe:	2380      	movs	r3, #128	@ 0x80
 8002fc0:	617b      	str	r3, [r7, #20]
    return event;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	461c      	mov	r4, r3
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fd2:	e054      	b.n	800307e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d103      	bne.n	8002fec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fea:	e009      	b.n	8003000 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d006      	beq.n	8003000 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <osMessageGet+0x5c>
      ticks = 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003000:	f7ff fd63 	bl	8002aca <inHandlerMode>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01c      	beq.n	8003044 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800300a:	f107 0220 	add.w	r2, r7, #32
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	68b8      	ldr	r0, [r7, #8]
 8003018:	f000 fc7c 	bl	8003914 <xQueueReceiveFromISR>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003022:	2310      	movs	r3, #16
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e001      	b.n	800302c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01d      	beq.n	800306e <osMessageGet+0xca>
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <osMessageGet+0xe4>)
 8003034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	e014      	b.n	800306e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	3304      	adds	r3, #4
 800304a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304c:	4619      	mov	r1, r3
 800304e:	68b8      	ldr	r0, [r7, #8]
 8003050:	f000 fb88 	bl	8003764 <xQueueReceive>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800305a:	2310      	movs	r3, #16
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e006      	b.n	800306e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <osMessageGet+0xc6>
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <osMessageGet+0xc8>
 800306a:	2340      	movs	r3, #64	@ 0x40
 800306c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	461c      	mov	r4, r3
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800307a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	372c      	adds	r7, #44	@ 0x2c
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	bf00      	nop
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 0208 	add.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f103 0208 	add.w	r2, r3, #8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f103 0208 	add.w	r2, r3, #8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d103      	bne.n	8003148 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e00c      	b.n	8003162 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3308      	adds	r3, #8
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e002      	b.n	8003156 <vListInsert+0x2e>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	d2f6      	bcs.n	8003150 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6892      	ldr	r2, [r2, #8]
 80031ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6852      	ldr	r2, [r2, #4]
 80031b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d103      	bne.n	80031cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1e5a      	subs	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10b      	bne.n	8003216 <xQueueGenericReset+0x2c>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	60bb      	str	r3, [r7, #8]
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	e7fd      	b.n	8003212 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003216:	f001 fe59 	bl	8004ecc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003222:	68f9      	ldr	r1, [r7, #12]
 8003224:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	441a      	add	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003246:	3b01      	subs	r3, #1
 8003248:	68f9      	ldr	r1, [r7, #12]
 800324a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	441a      	add	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	22ff      	movs	r2, #255	@ 0xff
 800325a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	22ff      	movs	r2, #255	@ 0xff
 8003262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00f      	beq.n	8003294 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3310      	adds	r3, #16
 8003278:	4618      	mov	r0, r3
 800327a:	f001 f8b1 	bl	80043e0 <xTaskRemoveFromEventList>
 800327e:	e009      	b.n	8003294 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3310      	adds	r3, #16
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff01 	bl	800308c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3324      	adds	r3, #36	@ 0x24
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fefc 	bl	800308c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003294:	f001 fe4a 	bl	8004f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003298:	2301      	movs	r3, #1
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b08e      	sub	sp, #56	@ 0x38
 80032a6:	af02      	add	r7, sp, #8
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	e7fd      	b.n	80032ca <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032e6:	bf00      	nop
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <xQueueGenericCreateStatic+0x56>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <xQueueGenericCreateStatic+0x5a>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <xQueueGenericCreateStatic+0x5c>
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	623b      	str	r3, [r7, #32]
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	e7fd      	b.n	8003316 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <xQueueGenericCreateStatic+0x84>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <xQueueGenericCreateStatic+0x88>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <xQueueGenericCreateStatic+0x8a>
 800332a:	2300      	movs	r3, #0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	61fb      	str	r3, [r7, #28]
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003348:	2348      	movs	r3, #72	@ 0x48
 800334a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b48      	cmp	r3, #72	@ 0x48
 8003350:	d00b      	beq.n	800336a <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	61bb      	str	r3, [r7, #24]
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	e7fd      	b.n	8003366 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800337c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f844 	bl	8003418 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003392:	4618      	mov	r0, r3
 8003394:	3730      	adds	r7, #48	@ 0x30
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08a      	sub	sp, #40	@ 0x28
 800339e:	af02      	add	r7, sp, #8
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10b      	bne.n	80033c6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	613b      	str	r3, [r7, #16]
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	e7fd      	b.n	80033c2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e004      	b.n	80033dc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3348      	adds	r3, #72	@ 0x48
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fe75 	bl	80050d0 <pvPortMalloc>
 80033e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00f      	beq.n	800340e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	3348      	adds	r3, #72	@ 0x48
 80033f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033fc:	79fa      	ldrb	r2, [r7, #7]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f805 	bl	8003418 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800340e:	69bb      	ldr	r3, [r7, #24]
	}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e002      	b.n	800343a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003446:	2101      	movs	r1, #1
 8003448:	69b8      	ldr	r0, [r7, #24]
 800344a:	f7ff fece 	bl	80031ea <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	@ 0x38
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003466:	2300      	movs	r3, #0
 8003468:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <xQueueGenericSend+0x34>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <xQueueGenericSend+0x42>
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <xQueueGenericSend+0x46>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <xQueueGenericSend+0x48>
 800349e:	2300      	movs	r3, #0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <xQueueGenericSend+0x64>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d103      	bne.n	80034ca <xQueueGenericSend+0x72>
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <xQueueGenericSend+0x76>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <xQueueGenericSend+0x78>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <xQueueGenericSend+0x94>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	623b      	str	r3, [r7, #32]
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	e7fd      	b.n	80034e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ec:	f001 f936 	bl	800475c <xTaskGetSchedulerState>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <xQueueGenericSend+0xa4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <xQueueGenericSend+0xa8>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <xQueueGenericSend+0xaa>
 8003500:	2300      	movs	r3, #0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <xQueueGenericSend+0xc6>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	61fb      	str	r3, [r7, #28]
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	e7fd      	b.n	800351a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800351e:	f001 fcd5 	bl	8004ecc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <xQueueGenericSend+0xdc>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d112      	bne.n	800355a <xQueueGenericSend+0x102>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800353a:	f000 fa6d 	bl	8003a18 <prvCopyDataToQueue>
 800353e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d004      	beq.n	8003552 <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	3324      	adds	r3, #36	@ 0x24
 800354c:	4618      	mov	r0, r3
 800354e:	f000 ff47 	bl	80043e0 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003552:	f001 fceb 	bl	8004f2c <vPortExitCritical>
				return pdPASS;
 8003556:	2301      	movs	r3, #1
 8003558:	e062      	b.n	8003620 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003560:	f001 fce4 	bl	8004f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003564:	2300      	movs	r3, #0
 8003566:	e05b      	b.n	8003620 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4618      	mov	r0, r3
 8003574:	f000 ff98 	bl	80044a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800357c:	f001 fcd6 	bl	8004f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003580:	f000 fd72 	bl	8004068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003584:	f001 fca2 	bl	8004ecc <vPortEnterCritical>
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800358e:	b25b      	sxtb	r3, r3
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d103      	bne.n	800359e <xQueueGenericSend+0x146>
 8003596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d103      	bne.n	80035b4 <xQueueGenericSend+0x15c>
 80035ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035b4:	f001 fcba 	bl	8004f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035b8:	1d3a      	adds	r2, r7, #4
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 ff87 	bl	80044d4 <xTaskCheckForTimeOut>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d123      	bne.n	8003614 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ce:	f000 fb1b 	bl	8003c08 <prvIsQueueFull>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d017      	beq.n	8003608 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	3310      	adds	r3, #16
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fed7 	bl	8004394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035e8:	f000 faa6 	bl	8003b38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035ec:	f000 fd4a 	bl	8004084 <xTaskResumeAll>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d193      	bne.n	800351e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80035f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <xQueueGenericSend+0x1d0>)
 80035f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	e78a      	b.n	800351e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800360a:	f000 fa95 	bl	8003b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800360e:	f000 fd39 	bl	8004084 <xTaskResumeAll>
 8003612:	e784      	b.n	800351e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003616:	f000 fa8f 	bl	8003b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800361a:	f000 fd33 	bl	8004084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800361e:	2300      	movs	r3, #0
		}
	}
}
 8003620:	4618      	mov	r0, r3
 8003622:	3738      	adds	r7, #56	@ 0x38
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	@ 0x38
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <xQueueGenericSendFromISR+0x3e>
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <xQueueGenericSendFromISR+0x42>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <xQueueGenericSendFromISR+0x44>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	623b      	str	r3, [r7, #32]
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d103      	bne.n	800369a <xQueueGenericSendFromISR+0x6e>
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <xQueueGenericSendFromISR+0x72>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <xQueueGenericSendFromISR+0x74>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	61fb      	str	r3, [r7, #28]
}
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036bc:	f001 fcc8 	bl	8005050 <vPortValidateInterruptPriority>
	__asm volatile
 80036c0:	f3ef 8211 	mrs	r2, BASEPRI
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	61ba      	str	r2, [r7, #24]
 80036d6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80036d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <xQueueGenericSendFromISR+0xc2>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d12c      	bne.n	8003748 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036fe:	f000 f98b 	bl	8003a18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003702:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	d112      	bne.n	8003732 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	3324      	adds	r3, #36	@ 0x24
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fe61 	bl	80043e0 <xTaskRemoveFromEventList>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e007      	b.n	8003742 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003732:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003736:	3301      	adds	r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	b25a      	sxtb	r2, r3
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003742:	2301      	movs	r3, #1
 8003744:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003746:	e001      	b.n	800374c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003748:	2300      	movs	r3, #0
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
 800374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f383 8811 	msr	BASEPRI, r3
}
 8003756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800375a:	4618      	mov	r0, r3
 800375c:	3738      	adds	r7, #56	@ 0x38
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	@ 0x30
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003770:	2300      	movs	r3, #0
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <xQueueReceive+0x32>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	623b      	str	r3, [r7, #32]
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	e7fd      	b.n	8003792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <xQueueReceive+0x40>
 800379c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <xQueueReceive+0x44>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <xQueueReceive+0x46>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <xQueueReceive+0x62>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	61fb      	str	r3, [r7, #28]
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	e7fd      	b.n	80037c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037c6:	f000 ffc9 	bl	800475c <xTaskGetSchedulerState>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <xQueueReceive+0x72>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <xQueueReceive+0x76>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <xQueueReceive+0x78>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <xQueueReceive+0x94>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	61bb      	str	r3, [r7, #24]
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80037f8:	f001 fb68 	bl	8004ecc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d014      	beq.n	8003832 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800380c:	f000 f96e 	bl	8003aec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	1e5a      	subs	r2, r3, #1
 8003814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003816:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	3310      	adds	r3, #16
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fddb 	bl	80043e0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800382a:	f001 fb7f 	bl	8004f2c <vPortExitCritical>
				return pdPASS;
 800382e:	2301      	movs	r3, #1
 8003830:	e069      	b.n	8003906 <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003838:	f001 fb78 	bl	8004f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800383c:	2300      	movs	r3, #0
 800383e:	e062      	b.n	8003906 <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003846:	f107 0310 	add.w	r3, r7, #16
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fe2c 	bl	80044a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003854:	f001 fb6a 	bl	8004f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003858:	f000 fc06 	bl	8004068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800385c:	f001 fb36 	bl	8004ecc <vPortEnterCritical>
 8003860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003862:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d103      	bne.n	8003876 <xQueueReceive+0x112>
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800387c:	b25b      	sxtb	r3, r3
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d103      	bne.n	800388c <xQueueReceive+0x128>
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800388c:	f001 fb4e 	bl	8004f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003890:	1d3a      	adds	r2, r7, #4
 8003892:	f107 0310 	add.w	r3, r7, #16
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fe1b 	bl	80044d4 <xTaskCheckForTimeOut>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d123      	bne.n	80038ec <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a6:	f000 f999 	bl	8003bdc <prvIsQueueEmpty>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b2:	3324      	adds	r3, #36	@ 0x24
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fd6b 	bl	8004394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038c0:	f000 f93a 	bl	8003b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038c4:	f000 fbde 	bl	8004084 <xTaskResumeAll>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d194      	bne.n	80037f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <xQueueReceive+0x1ac>)
 80038d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	e78b      	b.n	80037f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038e2:	f000 f929 	bl	8003b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038e6:	f000 fbcd 	bl	8004084 <xTaskResumeAll>
 80038ea:	e785      	b.n	80037f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ee:	f000 f923 	bl	8003b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038f2:	f000 fbc7 	bl	8004084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038f8:	f000 f970 	bl	8003bdc <prvIsQueueEmpty>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f43f af7a 	beq.w	80037f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003904:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003906:	4618      	mov	r0, r3
 8003908:	3730      	adds	r7, #48	@ 0x30
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08e      	sub	sp, #56	@ 0x38
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	623b      	str	r3, [r7, #32]
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	e7fd      	b.n	800393e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d103      	bne.n	8003950 <xQueueReceiveFromISR+0x3c>
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <xQueueReceiveFromISR+0x40>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <xQueueReceiveFromISR+0x42>
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	61fb      	str	r3, [r7, #28]
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	e7fd      	b.n	800396e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003972:	f001 fb6d 	bl	8005050 <vPortValidateInterruptPriority>
	__asm volatile
 8003976:	f3ef 8211 	mrs	r2, BASEPRI
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	61ba      	str	r2, [r7, #24]
 800398c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800398e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d02f      	beq.n	80039fe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039ac:	f000 f89e 	bl	8003aec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	1e5a      	subs	r2, r3, #1
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80039b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d112      	bne.n	80039e8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	3310      	adds	r3, #16
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fd06 	bl	80043e0 <xTaskRemoveFromEventList>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e007      	b.n	80039f8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80039e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039ec:	3301      	adds	r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	b25a      	sxtb	r2, r3
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80039f8:	2301      	movs	r3, #1
 80039fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80039fc:	e001      	b.n	8003a02 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f383 8811 	msr	BASEPRI, r3
}
 8003a0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3738      	adds	r7, #56	@ 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10d      	bne.n	8003a52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d14d      	bne.n	8003ada <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fea8 	bl	8004798 <xTaskPriorityDisinherit>
 8003a48:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	e043      	b.n	8003ada <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d119      	bne.n	8003a8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6898      	ldr	r0, [r3, #8]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	461a      	mov	r2, r3
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	f001 fd66 	bl	8005534 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	441a      	add	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d32b      	bcc.n	8003ada <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	e026      	b.n	8003ada <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68d8      	ldr	r0, [r3, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	461a      	mov	r2, r3
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	f001 fd4c 	bl	8005534 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d207      	bcs.n	8003ac8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d105      	bne.n	8003ada <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003ae2:	697b      	ldr	r3, [r7, #20]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d018      	beq.n	8003b30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	441a      	add	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d303      	bcc.n	8003b20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68d9      	ldr	r1, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6838      	ldr	r0, [r7, #0]
 8003b2c:	f001 fd02 	bl	8005534 <memcpy>
	}
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b40:	f001 f9c4 	bl	8004ecc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b4c:	e011      	b.n	8003b72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d012      	beq.n	8003b7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3324      	adds	r3, #36	@ 0x24
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fc40 	bl	80043e0 <xTaskRemoveFromEventList>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b66:	f000 fd19 	bl	800459c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	dce9      	bgt.n	8003b4e <prvUnlockQueue+0x16>
 8003b7a:	e000      	b.n	8003b7e <prvUnlockQueue+0x46>
					break;
 8003b7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	22ff      	movs	r2, #255	@ 0xff
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b86:	f001 f9d1 	bl	8004f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b8a:	f001 f99f 	bl	8004ecc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b96:	e011      	b.n	8003bbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3310      	adds	r3, #16
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fc1b 	bl	80043e0 <xTaskRemoveFromEventList>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bb0:	f000 fcf4 	bl	800459c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	dce9      	bgt.n	8003b98 <prvUnlockQueue+0x60>
 8003bc4:	e000      	b.n	8003bc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003bc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	22ff      	movs	r2, #255	@ 0xff
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003bd0:	f001 f9ac 	bl	8004f2c <vPortExitCritical>
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003be4:	f001 f972 	bl	8004ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e001      	b.n	8003bfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bfa:	f001 f997 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c10:	f001 f95c 	bl	8004ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d102      	bne.n	8003c26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e001      	b.n	8003c2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c2a:	f001 f97f 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08e      	sub	sp, #56	@ 0x38
 8003c3c:	af04      	add	r7, sp, #16
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	623b      	str	r3, [r7, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	61fb      	str	r3, [r7, #28]
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c82:	2354      	movs	r3, #84	@ 0x54
 8003c84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b54      	cmp	r3, #84	@ 0x54
 8003c8a:	d00b      	beq.n	8003ca4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	61bb      	str	r3, [r7, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01e      	beq.n	8003ce8 <xTaskCreateStatic+0xb0>
 8003caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9303      	str	r3, [sp, #12]
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	9302      	str	r3, [sp, #8]
 8003cca:	f107 0314 	add.w	r3, r7, #20
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f850 	bl	8003d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ce2:	f000 f8cd 	bl	8003e80 <prvAddNewTaskToReadyList>
 8003ce6:	e001      	b.n	8003cec <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cec:	697b      	ldr	r3, [r7, #20]
	}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3728      	adds	r7, #40	@ 0x28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b08c      	sub	sp, #48	@ 0x30
 8003cfa:	af04      	add	r7, sp, #16
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 f9e0 	bl	80050d0 <pvPortMalloc>
 8003d10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00e      	beq.n	8003d36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d18:	2054      	movs	r0, #84	@ 0x54
 8003d1a:	f001 f9d9 	bl	80050d0 <pvPortMalloc>
 8003d1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d2c:	e005      	b.n	8003d3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f001 fa96 	bl	8005260 <vPortFree>
 8003d34:	e001      	b.n	8003d3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d017      	beq.n	8003d70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9303      	str	r3, [sp, #12]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	9302      	str	r3, [sp, #8]
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f80e 	bl	8003d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d64:	69f8      	ldr	r0, [r7, #28]
 8003d66:	f000 f88b 	bl	8003e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e002      	b.n	8003d76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d76:	69bb      	ldr	r3, [r7, #24]
	}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f023 0307 	bic.w	r3, r3, #7
 8003da6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	617b      	str	r3, [r7, #20]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	e012      	b.n	8003df6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	7819      	ldrb	r1, [r3, #0]
 8003dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3334      	adds	r3, #52	@ 0x34
 8003de0:	460a      	mov	r2, r1
 8003de2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	3301      	adds	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b0f      	cmp	r3, #15
 8003dfa:	d9e9      	bls.n	8003dd0 <prvInitialiseNewTask+0x50>
 8003dfc:	e000      	b.n	8003e00 <prvInitialiseNewTask+0x80>
		{
			break;
 8003dfe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d901      	bls.n	8003e12 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e0e:	2306      	movs	r3, #6
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e1c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	2200      	movs	r2, #0
 8003e22:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e26:	3304      	adds	r3, #4
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff f94e 	bl	80030ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e30:	3318      	adds	r3, #24
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff f949 	bl	80030ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	f1c3 0207 	rsb	r2, r3, #7
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	2200      	movs	r2, #0
 8003e52:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	69b8      	ldr	r0, [r7, #24]
 8003e62:	f000 ff43 	bl	8004cec <pxPortInitialiseStack>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e78:	bf00      	nop
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e88:	f001 f820 	bl	8004ecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e8c:	4b24      	ldr	r3, [pc, #144]	@ (8003f20 <prvAddNewTaskToReadyList+0xa0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	4a23      	ldr	r2, [pc, #140]	@ (8003f20 <prvAddNewTaskToReadyList+0xa0>)
 8003e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e96:	4b23      	ldr	r3, [pc, #140]	@ (8003f24 <prvAddNewTaskToReadyList+0xa4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e9e:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <prvAddNewTaskToReadyList+0xa4>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <prvAddNewTaskToReadyList+0xa0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d110      	bne.n	8003ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003eac:	f000 fb94 	bl	80045d8 <prvInitialiseTaskLists>
 8003eb0:	e00d      	b.n	8003ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f28 <prvAddNewTaskToReadyList+0xa8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <prvAddNewTaskToReadyList+0xa4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d802      	bhi.n	8003ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ec8:	4a16      	ldr	r2, [pc, #88]	@ (8003f24 <prvAddNewTaskToReadyList+0xa4>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ece:	4b17      	ldr	r3, [pc, #92]	@ (8003f2c <prvAddNewTaskToReadyList+0xac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <prvAddNewTaskToReadyList+0xac>)
 8003ed6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	2201      	movs	r2, #1
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <prvAddNewTaskToReadyList+0xb0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	4a12      	ldr	r2, [pc, #72]	@ (8003f30 <prvAddNewTaskToReadyList+0xb0>)
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8003f34 <prvAddNewTaskToReadyList+0xb4>)
 8003ef8:	441a      	add	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f7ff f8ee 	bl	80030e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f06:	f001 f811 	bl	8004f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f0a:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <prvAddNewTaskToReadyList+0xa8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f12:	4b04      	ldr	r3, [pc, #16]	@ (8003f24 <prvAddNewTaskToReadyList+0xa4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	200006ac 	.word	0x200006ac
 8003f24:	200005ac 	.word	0x200005ac
 8003f28:	200006b8 	.word	0x200006b8
 8003f2c:	200006c8 	.word	0x200006c8
 8003f30:	200006b4 	.word	0x200006b4
 8003f34:	200005b0 	.word	0x200005b0

08003f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f4a:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <vTaskDelay+0x64>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <vTaskDelay+0x32>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	60bb      	str	r3, [r7, #8]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f6a:	f000 f87d 	bl	8004068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f6e:	2100      	movs	r1, #0
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fe55 	bl	8004c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f76:	f000 f885 	bl	8004084 <xTaskResumeAll>
 8003f7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <vTaskDelay+0x68>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200006d4 	.word	0x200006d4
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	@ 0x28
 8003fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fb2:	463a      	mov	r2, r7
 8003fb4:	1d39      	adds	r1, r7, #4
 8003fb6:	f107 0308 	add.w	r3, r7, #8
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fc f9de 	bl	800037c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fc0:	6839      	ldr	r1, [r7, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	9202      	str	r2, [sp, #8]
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	491f      	ldr	r1, [pc, #124]	@ (8004050 <vTaskStartScheduler+0xac>)
 8003fd4:	481f      	ldr	r0, [pc, #124]	@ (8004054 <vTaskStartScheduler+0xb0>)
 8003fd6:	f7ff fe2f 	bl	8003c38 <xTaskCreateStatic>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8004058 <vTaskStartScheduler+0xb4>)
 8003fde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8004058 <vTaskStartScheduler+0xb4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e001      	b.n	8003ff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d116      	bne.n	8004026 <vTaskStartScheduler+0x82>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	613b      	str	r3, [r7, #16]
}
 800400a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800400c:	4b13      	ldr	r3, [pc, #76]	@ (800405c <vTaskStartScheduler+0xb8>)
 800400e:	f04f 32ff 	mov.w	r2, #4294967295
 8004012:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004014:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <vTaskStartScheduler+0xbc>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800401a:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <vTaskStartScheduler+0xc0>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004020:	f000 fee2 	bl	8004de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004024:	e00f      	b.n	8004046 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d10b      	bne.n	8004046 <vTaskStartScheduler+0xa2>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	60fb      	str	r3, [r7, #12]
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	e7fd      	b.n	8004042 <vTaskStartScheduler+0x9e>
}
 8004046:	bf00      	nop
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08005f40 	.word	0x08005f40
 8004054:	080045b5 	.word	0x080045b5
 8004058:	200006d0 	.word	0x200006d0
 800405c:	200006cc 	.word	0x200006cc
 8004060:	200006b8 	.word	0x200006b8
 8004064:	200006b0 	.word	0x200006b0

08004068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <vTaskSuspendAll+0x18>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	4a03      	ldr	r2, [pc, #12]	@ (8004080 <vTaskSuspendAll+0x18>)
 8004074:	6013      	str	r3, [r2, #0]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	200006d4 	.word	0x200006d4

08004084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004092:	4b3c      	ldr	r3, [pc, #240]	@ (8004184 <xTaskResumeAll+0x100>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	603b      	str	r3, [r7, #0]
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	e7fd      	b.n	80040ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040b2:	f000 ff0b 	bl	8004ecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040b6:	4b33      	ldr	r3, [pc, #204]	@ (8004184 <xTaskResumeAll+0x100>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	4a31      	ldr	r2, [pc, #196]	@ (8004184 <xTaskResumeAll+0x100>)
 80040be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c0:	4b30      	ldr	r3, [pc, #192]	@ (8004184 <xTaskResumeAll+0x100>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d155      	bne.n	8004174 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004188 <xTaskResumeAll+0x104>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d051      	beq.n	8004174 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040d0:	e02e      	b.n	8004130 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040d2:	4b2e      	ldr	r3, [pc, #184]	@ (800418c <xTaskResumeAll+0x108>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3318      	adds	r3, #24
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff f85a 	bl	8003198 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff f855 	bl	8003198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	2201      	movs	r2, #1
 80040f4:	409a      	lsls	r2, r3
 80040f6:	4b26      	ldr	r3, [pc, #152]	@ (8004190 <xTaskResumeAll+0x10c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	4a24      	ldr	r2, [pc, #144]	@ (8004190 <xTaskResumeAll+0x10c>)
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4a21      	ldr	r2, [pc, #132]	@ (8004194 <xTaskResumeAll+0x110>)
 800410e:	441a      	add	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fe ffe3 	bl	80030e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <xTaskResumeAll+0x114>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800412a:	4b1c      	ldr	r3, [pc, #112]	@ (800419c <xTaskResumeAll+0x118>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004130:	4b16      	ldr	r3, [pc, #88]	@ (800418c <xTaskResumeAll+0x108>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1cc      	bne.n	80040d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800413e:	f000 fae9 	bl	8004714 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004142:	4b17      	ldr	r3, [pc, #92]	@ (80041a0 <xTaskResumeAll+0x11c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d010      	beq.n	8004170 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800414e:	f000 f829 	bl	80041a4 <xTaskIncrementTick>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004158:	4b10      	ldr	r3, [pc, #64]	@ (800419c <xTaskResumeAll+0x118>)
 800415a:	2201      	movs	r2, #1
 800415c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	3b01      	subs	r3, #1
 8004162:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f1      	bne.n	800414e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800416a:	4b0d      	ldr	r3, [pc, #52]	@ (80041a0 <xTaskResumeAll+0x11c>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004170:	4b0a      	ldr	r3, [pc, #40]	@ (800419c <xTaskResumeAll+0x118>)
 8004172:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004174:	f000 feda 	bl	8004f2c <vPortExitCritical>

	return xAlreadyYielded;
 8004178:	687b      	ldr	r3, [r7, #4]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200006d4 	.word	0x200006d4
 8004188:	200006ac 	.word	0x200006ac
 800418c:	2000066c 	.word	0x2000066c
 8004190:	200006b4 	.word	0x200006b4
 8004194:	200005b0 	.word	0x200005b0
 8004198:	200005ac 	.word	0x200005ac
 800419c:	200006c0 	.word	0x200006c0
 80041a0:	200006bc 	.word	0x200006bc

080041a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ae:	4b42      	ldr	r3, [pc, #264]	@ (80042b8 <xTaskIncrementTick+0x114>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d175      	bne.n	80042a2 <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041b6:	4b41      	ldr	r3, [pc, #260]	@ (80042bc <xTaskIncrementTick+0x118>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041be:	4a3f      	ldr	r2, [pc, #252]	@ (80042bc <xTaskIncrementTick+0x118>)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d121      	bne.n	800420e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041ca:	4b3d      	ldr	r3, [pc, #244]	@ (80042c0 <xTaskIncrementTick+0x11c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <xTaskIncrementTick+0x48>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	603b      	str	r3, [r7, #0]
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <xTaskIncrementTick+0x44>
 80041ec:	4b34      	ldr	r3, [pc, #208]	@ (80042c0 <xTaskIncrementTick+0x11c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	4b34      	ldr	r3, [pc, #208]	@ (80042c4 <xTaskIncrementTick+0x120>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a32      	ldr	r2, [pc, #200]	@ (80042c0 <xTaskIncrementTick+0x11c>)
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4a32      	ldr	r2, [pc, #200]	@ (80042c4 <xTaskIncrementTick+0x120>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <xTaskIncrementTick+0x124>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	4a30      	ldr	r2, [pc, #192]	@ (80042c8 <xTaskIncrementTick+0x124>)
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	f000 fa83 	bl	8004714 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800420e:	4b2f      	ldr	r3, [pc, #188]	@ (80042cc <xTaskIncrementTick+0x128>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d349      	bcc.n	80042ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004218:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <xTaskIncrementTick+0x11c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <xTaskIncrementTick+0x82>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <xTaskIncrementTick+0x84>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422c:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <xTaskIncrementTick+0x128>)
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	601a      	str	r2, [r3, #0]
					break;
 8004234:	e03a      	b.n	80042ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004236:	4b22      	ldr	r3, [pc, #136]	@ (80042c0 <xTaskIncrementTick+0x11c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d203      	bcs.n	8004256 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800424e:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <xTaskIncrementTick+0x128>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6013      	str	r3, [r2, #0]
						break;
 8004254:	e02a      	b.n	80042ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3304      	adds	r3, #4
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe ff9c 	bl	8003198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3318      	adds	r3, #24
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe ff93 	bl	8003198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	2201      	movs	r2, #1
 8004278:	409a      	lsls	r2, r3
 800427a:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <xTaskIncrementTick+0x12c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	4a13      	ldr	r2, [pc, #76]	@ (80042d0 <xTaskIncrementTick+0x12c>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4a10      	ldr	r2, [pc, #64]	@ (80042d4 <xTaskIncrementTick+0x130>)
 8004292:	441a      	add	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7fe ff21 	bl	80030e2 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a0:	e7ba      	b.n	8004218 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042a2:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <xTaskIncrementTick+0x134>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	4a0b      	ldr	r2, [pc, #44]	@ (80042d8 <xTaskIncrementTick+0x134>)
 80042aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80042ac:	697b      	ldr	r3, [r7, #20]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200006d4 	.word	0x200006d4
 80042bc:	200006b0 	.word	0x200006b0
 80042c0:	20000664 	.word	0x20000664
 80042c4:	20000668 	.word	0x20000668
 80042c8:	200006c4 	.word	0x200006c4
 80042cc:	200006cc 	.word	0x200006cc
 80042d0:	200006b4 	.word	0x200006b4
 80042d4:	200005b0 	.word	0x200005b0
 80042d8:	200006bc 	.word	0x200006bc

080042dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042e2:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <vTaskSwitchContext+0xa4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042ea:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <vTaskSwitchContext+0xa8>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042f0:	e040      	b.n	8004374 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80042f2:	4b24      	ldr	r3, [pc, #144]	@ (8004384 <vTaskSwitchContext+0xa8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80042f8:	4b23      	ldr	r3, [pc, #140]	@ (8004388 <vTaskSwitchContext+0xac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004306:	7afb      	ldrb	r3, [r7, #11]
 8004308:	f1c3 031f 	rsb	r3, r3, #31
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	491f      	ldr	r1, [pc, #124]	@ (800438c <vTaskSwitchContext+0xb0>)
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	607b      	str	r3, [r7, #4]
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	e7fd      	b.n	8004336 <vTaskSwitchContext+0x5a>
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4a11      	ldr	r2, [pc, #68]	@ (800438c <vTaskSwitchContext+0xb0>)
 8004346:	4413      	add	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	3308      	adds	r3, #8
 800435c:	429a      	cmp	r2, r3
 800435e:	d104      	bne.n	800436a <vTaskSwitchContext+0x8e>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a07      	ldr	r2, [pc, #28]	@ (8004390 <vTaskSwitchContext+0xb4>)
 8004372:	6013      	str	r3, [r2, #0]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	200006d4 	.word	0x200006d4
 8004384:	200006c0 	.word	0x200006c0
 8004388:	200006b4 	.word	0x200006b4
 800438c:	200005b0 	.word	0x200005b0
 8004390:	200005ac 	.word	0x200005ac

08004394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	60fb      	str	r3, [r7, #12]
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043bc:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <vTaskPlaceOnEventList+0x48>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3318      	adds	r3, #24
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fe feaf 	bl	8003128 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043ca:	2101      	movs	r1, #1
 80043cc:	6838      	ldr	r0, [r7, #0]
 80043ce:	f000 fc27 	bl	8004c20 <prvAddCurrentTaskToDelayedList>
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	200005ac 	.word	0x200005ac

080043e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60fb      	str	r3, [r7, #12]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	3318      	adds	r3, #24
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fec0 	bl	8003198 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004418:	4b1d      	ldr	r3, [pc, #116]	@ (8004490 <xTaskRemoveFromEventList+0xb0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11c      	bne.n	800445a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	3304      	adds	r3, #4
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe feb7 	bl	8003198 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442e:	2201      	movs	r2, #1
 8004430:	409a      	lsls	r2, r3
 8004432:	4b18      	ldr	r3, [pc, #96]	@ (8004494 <xTaskRemoveFromEventList+0xb4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4313      	orrs	r3, r2
 8004438:	4a16      	ldr	r2, [pc, #88]	@ (8004494 <xTaskRemoveFromEventList+0xb4>)
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4a13      	ldr	r2, [pc, #76]	@ (8004498 <xTaskRemoveFromEventList+0xb8>)
 800444a:	441a      	add	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f7fe fe45 	bl	80030e2 <vListInsertEnd>
 8004458:	e005      	b.n	8004466 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3318      	adds	r3, #24
 800445e:	4619      	mov	r1, r3
 8004460:	480e      	ldr	r0, [pc, #56]	@ (800449c <xTaskRemoveFromEventList+0xbc>)
 8004462:	f7fe fe3e 	bl	80030e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446a:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <xTaskRemoveFromEventList+0xc0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	429a      	cmp	r2, r3
 8004472:	d905      	bls.n	8004480 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004478:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <xTaskRemoveFromEventList+0xc4>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e001      	b.n	8004484 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004484:	697b      	ldr	r3, [r7, #20]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200006d4 	.word	0x200006d4
 8004494:	200006b4 	.word	0x200006b4
 8004498:	200005b0 	.word	0x200005b0
 800449c:	2000066c 	.word	0x2000066c
 80044a0:	200005ac 	.word	0x200005ac
 80044a4:	200006c0 	.word	0x200006c0

080044a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <vTaskInternalSetTimeOutState+0x24>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044b8:	4b05      	ldr	r3, [pc, #20]	@ (80044d0 <vTaskInternalSetTimeOutState+0x28>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	605a      	str	r2, [r3, #4]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	200006c4 	.word	0x200006c4
 80044d0:	200006b0 	.word	0x200006b0

080044d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	613b      	str	r3, [r7, #16]
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	60fb      	str	r3, [r7, #12]
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800451a:	f000 fcd7 	bl	8004ecc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800451e:	4b1d      	ldr	r3, [pc, #116]	@ (8004594 <xTaskCheckForTimeOut+0xc0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d102      	bne.n	800453e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	e023      	b.n	8004586 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <xTaskCheckForTimeOut+0xc4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d007      	beq.n	800455a <xTaskCheckForTimeOut+0x86>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	e015      	b.n	8004586 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	d20b      	bcs.n	800457c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff99 	bl	80044a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e004      	b.n	8004586 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004586:	f000 fcd1 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 800458a:	69fb      	ldr	r3, [r7, #28]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200006b0 	.word	0x200006b0
 8004598:	200006c4 	.word	0x200006c4

0800459c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045a0:	4b03      	ldr	r3, [pc, #12]	@ (80045b0 <vTaskMissedYield+0x14>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	200006c0 	.word	0x200006c0

080045b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045bc:	f000 f84c 	bl	8004658 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80045c0:	4b04      	ldr	r3, [pc, #16]	@ (80045d4 <prvIdleTask+0x20>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045d0:	bf00      	nop
 80045d2:	e7f3      	b.n	80045bc <prvIdleTask+0x8>
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	e00c      	b.n	80045fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4a12      	ldr	r2, [pc, #72]	@ (8004638 <prvInitialiseTaskLists+0x60>)
 80045f0:	4413      	add	r3, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fd4a 	bl	800308c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3301      	adds	r3, #1
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b06      	cmp	r3, #6
 8004602:	d9ef      	bls.n	80045e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004604:	480d      	ldr	r0, [pc, #52]	@ (800463c <prvInitialiseTaskLists+0x64>)
 8004606:	f7fe fd41 	bl	800308c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800460a:	480d      	ldr	r0, [pc, #52]	@ (8004640 <prvInitialiseTaskLists+0x68>)
 800460c:	f7fe fd3e 	bl	800308c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004610:	480c      	ldr	r0, [pc, #48]	@ (8004644 <prvInitialiseTaskLists+0x6c>)
 8004612:	f7fe fd3b 	bl	800308c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004616:	480c      	ldr	r0, [pc, #48]	@ (8004648 <prvInitialiseTaskLists+0x70>)
 8004618:	f7fe fd38 	bl	800308c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800461c:	480b      	ldr	r0, [pc, #44]	@ (800464c <prvInitialiseTaskLists+0x74>)
 800461e:	f7fe fd35 	bl	800308c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004622:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <prvInitialiseTaskLists+0x78>)
 8004624:	4a05      	ldr	r2, [pc, #20]	@ (800463c <prvInitialiseTaskLists+0x64>)
 8004626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004628:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <prvInitialiseTaskLists+0x7c>)
 800462a:	4a05      	ldr	r2, [pc, #20]	@ (8004640 <prvInitialiseTaskLists+0x68>)
 800462c:	601a      	str	r2, [r3, #0]
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	200005b0 	.word	0x200005b0
 800463c:	2000063c 	.word	0x2000063c
 8004640:	20000650 	.word	0x20000650
 8004644:	2000066c 	.word	0x2000066c
 8004648:	20000680 	.word	0x20000680
 800464c:	20000698 	.word	0x20000698
 8004650:	20000664 	.word	0x20000664
 8004654:	20000668 	.word	0x20000668

08004658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800465e:	e019      	b.n	8004694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004660:	f000 fc34 	bl	8004ecc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004664:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <prvCheckTasksWaitingTermination+0x50>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe fd91 	bl	8003198 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <prvCheckTasksWaitingTermination+0x54>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	4a0b      	ldr	r2, [pc, #44]	@ (80046ac <prvCheckTasksWaitingTermination+0x54>)
 800467e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004680:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <prvCheckTasksWaitingTermination+0x58>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3b01      	subs	r3, #1
 8004686:	4a0a      	ldr	r2, [pc, #40]	@ (80046b0 <prvCheckTasksWaitingTermination+0x58>)
 8004688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800468a:	f000 fc4f 	bl	8004f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f810 	bl	80046b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004694:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <prvCheckTasksWaitingTermination+0x58>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e1      	bne.n	8004660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000680 	.word	0x20000680
 80046ac:	200006ac 	.word	0x200006ac
 80046b0:	20000694 	.word	0x20000694

080046b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d108      	bne.n	80046d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fdc8 	bl	8005260 <vPortFree>
				vPortFree( pxTCB );
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fdc5 	bl	8005260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046d6:	e019      	b.n	800470c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d103      	bne.n	80046ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fdbc 	bl	8005260 <vPortFree>
	}
 80046e8:	e010      	b.n	800470c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d00b      	beq.n	800470c <prvDeleteTCB+0x58>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <prvDeleteTCB+0x54>
	}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471a:	4b0e      	ldr	r3, [pc, #56]	@ (8004754 <prvResetNextTaskUnblockTime+0x40>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <prvResetNextTaskUnblockTime+0x14>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <prvResetNextTaskUnblockTime+0x16>
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800472e:	4b0a      	ldr	r3, [pc, #40]	@ (8004758 <prvResetNextTaskUnblockTime+0x44>)
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004736:	e008      	b.n	800474a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004738:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <prvResetNextTaskUnblockTime+0x40>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4a04      	ldr	r2, [pc, #16]	@ (8004758 <prvResetNextTaskUnblockTime+0x44>)
 8004748:	6013      	str	r3, [r2, #0]
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr
 8004754:	20000664 	.word	0x20000664
 8004758:	200006cc 	.word	0x200006cc

0800475c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <xTaskGetSchedulerState+0x34>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800476a:	2301      	movs	r3, #1
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	e008      	b.n	8004782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004770:	4b08      	ldr	r3, [pc, #32]	@ (8004794 <xTaskGetSchedulerState+0x38>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004778:	2302      	movs	r3, #2
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	e001      	b.n	8004782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004782:	687b      	ldr	r3, [r7, #4]
	}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	200006b8 	.word	0x200006b8
 8004794:	200006d4 	.word	0x200006d4

08004798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d070      	beq.n	8004890 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047ae:	4b3b      	ldr	r3, [pc, #236]	@ (800489c <xTaskPriorityDisinherit+0x104>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d00b      	beq.n	80047d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60bb      	str	r3, [r7, #8]
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	429a      	cmp	r2, r3
 8004804:	d044      	beq.n	8004890 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480a:	2b00      	cmp	r3, #0
 800480c:	d140      	bne.n	8004890 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fcc0 	bl	8003198 <uxListRemove>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d115      	bne.n	800484a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004822:	491f      	ldr	r1, [pc, #124]	@ (80048a0 <xTaskPriorityDisinherit+0x108>)
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xTaskPriorityDisinherit+0xb2>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	2201      	movs	r2, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43da      	mvns	r2, r3
 8004840:	4b18      	ldr	r3, [pc, #96]	@ (80048a4 <xTaskPriorityDisinherit+0x10c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4013      	ands	r3, r2
 8004846:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <xTaskPriorityDisinherit+0x10c>)
 8004848:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004856:	f1c3 0207 	rsb	r2, r3, #7
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	2201      	movs	r2, #1
 8004864:	409a      	lsls	r2, r3
 8004866:	4b0f      	ldr	r3, [pc, #60]	@ (80048a4 <xTaskPriorityDisinherit+0x10c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	4a0d      	ldr	r2, [pc, #52]	@ (80048a4 <xTaskPriorityDisinherit+0x10c>)
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4a08      	ldr	r2, [pc, #32]	@ (80048a0 <xTaskPriorityDisinherit+0x108>)
 800487e:	441a      	add	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f7fe fc2b 	bl	80030e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004890:	697b      	ldr	r3, [r7, #20]
	}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	200005ac 	.word	0x200005ac
 80048a0:	200005b0 	.word	0x200005b0
 80048a4:	200006b4 	.word	0x200006b4

080048a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80048b6:	f000 fb09 	bl	8004ecc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80048ba:	4b26      	ldr	r3, [pc, #152]	@ (8004954 <xTaskNotifyWait+0xac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d01a      	beq.n	80048fe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80048c8:	4b22      	ldr	r3, [pc, #136]	@ (8004954 <xTaskNotifyWait+0xac>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	43d2      	mvns	r2, r2
 80048d2:	400a      	ands	r2, r1
 80048d4:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80048d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004954 <xTaskNotifyWait+0xac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048e6:	2101      	movs	r1, #1
 80048e8:	6838      	ldr	r0, [r7, #0]
 80048ea:	f000 f999 	bl	8004c20 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80048ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004958 <xTaskNotifyWait+0xb0>)
 80048f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80048fe:	f000 fb15 	bl	8004f2c <vPortExitCritical>

		taskENTER_CRITICAL();
 8004902:	f000 fae3 	bl	8004ecc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800490c:	4b11      	ldr	r3, [pc, #68]	@ (8004954 <xTaskNotifyWait+0xac>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004916:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <xTaskNotifyWait+0xac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d002      	beq.n	800492a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e008      	b.n	800493c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800492a:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <xTaskNotifyWait+0xac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	43d2      	mvns	r2, r2
 8004934:	400a      	ands	r2, r1
 8004936:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800493c:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <xTaskNotifyWait+0xac>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8004946:	f000 faf1 	bl	8004f2c <vPortExitCritical>

		return xReturn;
 800494a:	697b      	ldr	r3, [r7, #20]
	}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200005ac 	.word	0x200005ac
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800496c:	2301      	movs	r3, #1
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <xTaskGenericNotify+0x32>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	61bb      	str	r3, [r7, #24]
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	e7fd      	b.n	800498a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004992:	f000 fa9b 	bl	8004ecc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049aa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d827      	bhi.n	8004a0a <xTaskGenericNotify+0xae>
 80049ba:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <xTaskGenericNotify+0x64>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	08004a0b 	.word	0x08004a0b
 80049c4:	080049d5 	.word	0x080049d5
 80049c8:	080049e3 	.word	0x080049e3
 80049cc:	080049ef 	.word	0x080049ef
 80049d0:	080049f7 	.word	0x080049f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	431a      	orrs	r2, r3
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80049e0:	e013      	b.n	8004a0a <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80049ec:	e00d      	b.n	8004a0a <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80049f4:	e009      	b.n	8004a0a <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80049f6:	7ffb      	ldrb	r3, [r7, #31]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d003      	beq.n	8004a04 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004a02:	e001      	b.n	8004a08 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8004a08:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004a0a:	7ffb      	ldrb	r3, [r7, #31]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d12d      	bne.n	8004a6c <xTaskGenericNotify+0x110>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fe fbbf 	bl	8003198 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	2201      	movs	r2, #1
 8004a20:	409a      	lsls	r2, r3
 8004a22:	4b16      	ldr	r3, [pc, #88]	@ (8004a7c <xTaskGenericNotify+0x120>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	4a14      	ldr	r2, [pc, #80]	@ (8004a7c <xTaskGenericNotify+0x120>)
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4a11      	ldr	r2, [pc, #68]	@ (8004a80 <xTaskGenericNotify+0x124>)
 8004a3a:	441a      	add	r2, r3
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f7fe fb4d 	bl	80030e2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <xTaskGenericNotify+0x10c>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	617b      	str	r3, [r7, #20]
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <xTaskGenericNotify+0x128>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004a6c:	f000 fa5e 	bl	8004f2c <vPortExitCritical>

		return xReturn;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3728      	adds	r7, #40	@ 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	200006b4 	.word	0x200006b4
 8004a80:	200005b0 	.word	0x200005b0
 8004a84:	200005ac 	.word	0x200005ac

08004a88 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08e      	sub	sp, #56	@ 0x38
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aba:	f000 fac9 	bl	8005050 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8004ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	623a      	str	r2, [r7, #32]
 8004ad8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004ada:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d829      	bhi.n	8004b58 <xTaskGenericNotifyFromISR+0xd0>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <xTaskGenericNotifyFromISR+0x84>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b59 	.word	0x08004b59
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b2f 	.word	0x08004b2f
 8004b18:	08004b3b 	.word	0x08004b3b
 8004b1c:	08004b43 	.word	0x08004b43
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004b2c:	e014      	b.n	8004b58 <xTaskGenericNotifyFromISR+0xd0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004b38:	e00e      	b.n	8004b58 <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004b40:	e00a      	b.n	8004b58 <xTaskGenericNotifyFromISR+0xd0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004b42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d003      	beq.n	8004b52 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004b50:	e001      	b.n	8004b56 <xTaskGenericNotifyFromISR+0xce>
						xReturn = pdFAIL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8004b56:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004b58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d147      	bne.n	8004bf0 <xTaskGenericNotifyFromISR+0x168>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <xTaskGenericNotifyFromISR+0xf8>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	61bb      	str	r3, [r7, #24]
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <xTaskGenericNotifyFromISR+0xf4>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b80:	4b21      	ldr	r3, [pc, #132]	@ (8004c08 <xTaskGenericNotifyFromISR+0x180>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d11c      	bne.n	8004bc2 <xTaskGenericNotifyFromISR+0x13a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fb03 	bl	8003198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	2201      	movs	r2, #1
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c0c <xTaskGenericNotifyFromISR+0x184>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c0c <xTaskGenericNotifyFromISR+0x184>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <xTaskGenericNotifyFromISR+0x188>)
 8004bb2:	441a      	add	r2, r3
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7fe fa91 	bl	80030e2 <vListInsertEnd>
 8004bc0:	e005      	b.n	8004bce <xTaskGenericNotifyFromISR+0x146>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4812      	ldr	r0, [pc, #72]	@ (8004c14 <xTaskGenericNotifyFromISR+0x18c>)
 8004bca:	f7fe fa8a 	bl	80030e2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd2:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <xTaskGenericNotifyFromISR+0x190>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d909      	bls.n	8004bf0 <xTaskGenericNotifyFromISR+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <xTaskGenericNotifyFromISR+0x162>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e002      	b.n	8004bf0 <xTaskGenericNotifyFromISR+0x168>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8004bea:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <xTaskGenericNotifyFromISR+0x194>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f383 8811 	msr	BASEPRI, r3
}
 8004bfa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3738      	adds	r7, #56	@ 0x38
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200006d4 	.word	0x200006d4
 8004c0c:	200006b4 	.word	0x200006b4
 8004c10:	200005b0 	.word	0x200005b0
 8004c14:	2000066c 	.word	0x2000066c
 8004c18:	200005ac 	.word	0x200005ac
 8004c1c:	200006c0 	.word	0x200006c0

08004c20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c2a:	4b29      	ldr	r3, [pc, #164]	@ (8004cd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c30:	4b28      	ldr	r3, [pc, #160]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe faae 	bl	8003198 <uxListRemove>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c42:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	2201      	movs	r2, #1
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	4b21      	ldr	r3, [pc, #132]	@ (8004cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4013      	ands	r3, r2
 8004c56:	4a20      	ldr	r2, [pc, #128]	@ (8004cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d10a      	bne.n	8004c78 <prvAddCurrentTaskToDelayedList+0x58>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c68:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	481a      	ldr	r0, [pc, #104]	@ (8004cdc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c72:	f7fe fa36 	bl	80030e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c76:	e026      	b.n	8004cc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c80:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d209      	bcs.n	8004ca4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c90:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7fe fa43 	bl	8003128 <vListInsert>
}
 8004ca2:	e010      	b.n	8004cc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f7fe fa39 	bl	8003128 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d202      	bcs.n	8004cc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cc0:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6013      	str	r3, [r2, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	200006b0 	.word	0x200006b0
 8004cd4:	200005ac 	.word	0x200005ac
 8004cd8:	200006b4 	.word	0x200006b4
 8004cdc:	20000698 	.word	0x20000698
 8004ce0:	20000668 	.word	0x20000668
 8004ce4:	20000664 	.word	0x20000664
 8004ce8:	200006cc 	.word	0x200006cc

08004cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d1c:	4a08      	ldr	r2, [pc, #32]	@ (8004d40 <pxPortInitialiseStack+0x54>)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b14      	subs	r3, #20
 8004d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b20      	subs	r3, #32
 8004d32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	08004d45 	.word	0x08004d45

08004d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d4e:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <prvTaskExitError+0x54>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d00b      	beq.n	8004d70 <prvTaskExitError+0x2c>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60fb      	str	r3, [r7, #12]
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <prvTaskExitError+0x28>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60bb      	str	r3, [r7, #8]
}
 8004d82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d84:	bf00      	nop
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0fc      	beq.n	8004d86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr
 8004d98:	20000018 	.word	0x20000018
 8004d9c:	00000000 	.word	0x00000000

08004da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004da0:	4b07      	ldr	r3, [pc, #28]	@ (8004dc0 <pxCurrentTCBConst2>)
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	6808      	ldr	r0, [r1, #0]
 8004da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004daa:	f380 8809 	msr	PSP, r0
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8811 	msr	BASEPRI, r0
 8004dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8004dbe:	4770      	bx	lr

08004dc0 <pxCurrentTCBConst2>:
 8004dc0:	200005ac 	.word	0x200005ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop

08004dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004dc8:	4806      	ldr	r0, [pc, #24]	@ (8004de4 <prvPortStartFirstTask+0x1c>)
 8004dca:	6800      	ldr	r0, [r0, #0]
 8004dcc:	6800      	ldr	r0, [r0, #0]
 8004dce:	f380 8808 	msr	MSP, r0
 8004dd2:	b662      	cpsie	i
 8004dd4:	b661      	cpsie	f
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	df00      	svc	0
 8004de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004de2:	bf00      	nop
 8004de4:	e000ed08 	.word	0xe000ed08

08004de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dee:	4b32      	ldr	r3, [pc, #200]	@ (8004eb8 <xPortStartScheduler+0xd0>)
 8004df0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	22ff      	movs	r2, #255	@ 0xff
 8004dfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <xPortStartScheduler+0xd4>)
 8004e14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e16:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <xPortStartScheduler+0xd8>)
 8004e18:	2207      	movs	r2, #7
 8004e1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e1c:	e009      	b.n	8004e32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e1e:	4b28      	ldr	r3, [pc, #160]	@ (8004ec0 <xPortStartScheduler+0xd8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <xPortStartScheduler+0xd8>)
 8004e26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3a:	2b80      	cmp	r3, #128	@ 0x80
 8004e3c:	d0ef      	beq.n	8004e1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ec0 <xPortStartScheduler+0xd8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1c3 0307 	rsb	r3, r3, #7
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d00b      	beq.n	8004e62 <xPortStartScheduler+0x7a>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60bb      	str	r3, [r7, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e62:	4b17      	ldr	r3, [pc, #92]	@ (8004ec0 <xPortStartScheduler+0xd8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <xPortStartScheduler+0xd8>)
 8004e6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ec0 <xPortStartScheduler+0xd8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e74:	4a12      	ldr	r2, [pc, #72]	@ (8004ec0 <xPortStartScheduler+0xd8>)
 8004e76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e80:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <xPortStartScheduler+0xdc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec4 <xPortStartScheduler+0xdc>)
 8004e86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <xPortStartScheduler+0xdc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec4 <xPortStartScheduler+0xdc>)
 8004e92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e98:	f000 f8b8 	bl	800500c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <xPortStartScheduler+0xe0>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ea2:	f7ff ff91 	bl	8004dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ea6:	f7ff fa19 	bl	80042dc <vTaskSwitchContext>
	prvTaskExitError();
 8004eaa:	f7ff ff4b 	bl	8004d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000e400 	.word	0xe000e400
 8004ebc:	200006d8 	.word	0x200006d8
 8004ec0:	200006dc 	.word	0x200006dc
 8004ec4:	e000ed20 	.word	0xe000ed20
 8004ec8:	20000018 	.word	0x20000018

08004ecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	607b      	str	r3, [r7, #4]
}
 8004ee4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <vPortEnterCritical+0x58>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3301      	adds	r3, #1
 8004eec:	4a0d      	ldr	r2, [pc, #52]	@ (8004f24 <vPortEnterCritical+0x58>)
 8004eee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <vPortEnterCritical+0x58>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d110      	bne.n	8004f1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <vPortEnterCritical+0x5c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <vPortEnterCritical+0x4e>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	603b      	str	r3, [r7, #0]
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	e7fd      	b.n	8004f16 <vPortEnterCritical+0x4a>
	}
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	20000018 	.word	0x20000018
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f32:	4b12      	ldr	r3, [pc, #72]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <vPortExitCritical+0x26>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	607b      	str	r3, [r7, #4]
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f52:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	4a08      	ldr	r2, [pc, #32]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f5c:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <vPortExitCritical+0x44>
 8004f64:	2300      	movs	r3, #0
 8004f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f383 8811 	msr	BASEPRI, r3
}
 8004f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000018 	.word	0x20000018

08004f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f80:	f3ef 8009 	mrs	r0, PSP
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <pxCurrentTCBConst>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f90:	6010      	str	r0, [r2, #0]
 8004f92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f9a:	f380 8811 	msr	BASEPRI, r0
 8004f9e:	f7ff f99d 	bl	80042dc <vTaskSwitchContext>
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8811 	msr	BASEPRI, r0
 8004faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	6808      	ldr	r0, [r1, #0]
 8004fb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fb6:	f380 8809 	msr	PSP, r0
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	4770      	bx	lr

08004fc0 <pxCurrentTCBConst>:
 8004fc0:	200005ac 	.word	0x200005ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
}
 8004fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fe2:	f7ff f8df 	bl	80041a4 <xTaskIncrementTick>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fec:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <SysTick_Handler+0x40>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f383 8811 	msr	BASEPRI, r3
}
 8004ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	e000ed04 	.word	0xe000ed04

0800500c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005010:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <vPortSetupTimerInterrupt+0x30>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005016:	4b0a      	ldr	r3, [pc, #40]	@ (8005040 <vPortSetupTimerInterrupt+0x34>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800501c:	4b09      	ldr	r3, [pc, #36]	@ (8005044 <vPortSetupTimerInterrupt+0x38>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <vPortSetupTimerInterrupt+0x3c>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	4a08      	ldr	r2, [pc, #32]	@ (800504c <vPortSetupTimerInterrupt+0x40>)
 800502a:	3b01      	subs	r3, #1
 800502c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800502e:	4b03      	ldr	r3, [pc, #12]	@ (800503c <vPortSetupTimerInterrupt+0x30>)
 8005030:	2207      	movs	r2, #7
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	e000e010 	.word	0xe000e010
 8005040:	e000e018 	.word	0xe000e018
 8005044:	2000000c 	.word	0x2000000c
 8005048:	10624dd3 	.word	0x10624dd3
 800504c:	e000e014 	.word	0xe000e014

08005050 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005056:	f3ef 8305 	mrs	r3, IPSR
 800505a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b0f      	cmp	r3, #15
 8005060:	d915      	bls.n	800508e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005062:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <vPortValidateInterruptPriority+0x70>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800506c:	4b15      	ldr	r3, [pc, #84]	@ (80050c4 <vPortValidateInterruptPriority+0x74>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	7afa      	ldrb	r2, [r7, #11]
 8005072:	429a      	cmp	r2, r3
 8005074:	d20b      	bcs.n	800508e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	607b      	str	r3, [r7, #4]
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	e7fd      	b.n	800508a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800508e:	4b0e      	ldr	r3, [pc, #56]	@ (80050c8 <vPortValidateInterruptPriority+0x78>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005096:	4b0d      	ldr	r3, [pc, #52]	@ (80050cc <vPortValidateInterruptPriority+0x7c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d90b      	bls.n	80050b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	603b      	str	r3, [r7, #0]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <vPortValidateInterruptPriority+0x62>
	}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	e000e3f0 	.word	0xe000e3f0
 80050c4:	200006d8 	.word	0x200006d8
 80050c8:	e000ed0c 	.word	0xe000ed0c
 80050cc:	200006dc 	.word	0x200006dc

080050d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	@ 0x28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050dc:	f7fe ffc4 	bl	8004068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050e0:	4b5a      	ldr	r3, [pc, #360]	@ (800524c <pvPortMalloc+0x17c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050e8:	f000 f916 	bl	8005318 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050ec:	4b58      	ldr	r3, [pc, #352]	@ (8005250 <pvPortMalloc+0x180>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 8090 	bne.w	800521a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01e      	beq.n	800513e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005100:	2208      	movs	r2, #8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	2b00      	cmp	r3, #0
 8005110:	d015      	beq.n	800513e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f023 0307 	bic.w	r3, r3, #7
 8005118:	3308      	adds	r3, #8
 800511a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <pvPortMalloc+0x6e>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	617b      	str	r3, [r7, #20]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d06a      	beq.n	800521a <pvPortMalloc+0x14a>
 8005144:	4b43      	ldr	r3, [pc, #268]	@ (8005254 <pvPortMalloc+0x184>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	429a      	cmp	r2, r3
 800514c:	d865      	bhi.n	800521a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800514e:	4b42      	ldr	r3, [pc, #264]	@ (8005258 <pvPortMalloc+0x188>)
 8005150:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005152:	4b41      	ldr	r3, [pc, #260]	@ (8005258 <pvPortMalloc+0x188>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005158:	e004      	b.n	8005164 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d903      	bls.n	8005176 <pvPortMalloc+0xa6>
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f1      	bne.n	800515a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005176:	4b35      	ldr	r3, [pc, #212]	@ (800524c <pvPortMalloc+0x17c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517c:	429a      	cmp	r2, r3
 800517e:	d04c      	beq.n	800521a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2208      	movs	r2, #8
 8005186:	4413      	add	r3, r2
 8005188:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1ad2      	subs	r2, r2, r3
 800519a:	2308      	movs	r3, #8
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	429a      	cmp	r2, r3
 80051a0:	d920      	bls.n	80051e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4413      	add	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <pvPortMalloc+0xfc>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	613b      	str	r3, [r7, #16]
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	1ad2      	subs	r2, r2, r3
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051de:	69b8      	ldr	r0, [r7, #24]
 80051e0:	f000 f8fc 	bl	80053dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <pvPortMalloc+0x184>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <pvPortMalloc+0x184>)
 80051f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051f2:	4b18      	ldr	r3, [pc, #96]	@ (8005254 <pvPortMalloc+0x184>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b19      	ldr	r3, [pc, #100]	@ (800525c <pvPortMalloc+0x18c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d203      	bcs.n	8005206 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051fe:	4b15      	ldr	r3, [pc, #84]	@ (8005254 <pvPortMalloc+0x184>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a16      	ldr	r2, [pc, #88]	@ (800525c <pvPortMalloc+0x18c>)
 8005204:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	4b11      	ldr	r3, [pc, #68]	@ (8005250 <pvPortMalloc+0x180>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	431a      	orrs	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800521a:	f7fe ff33 	bl	8004084 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <pvPortMalloc+0x170>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	60fb      	str	r3, [r7, #12]
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	e7fd      	b.n	800523c <pvPortMalloc+0x16c>
	return pvReturn;
 8005240:	69fb      	ldr	r3, [r7, #28]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3728      	adds	r7, #40	@ 0x28
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	200026e8 	.word	0x200026e8
 8005250:	200026f4 	.word	0x200026f4
 8005254:	200026ec 	.word	0x200026ec
 8005258:	200026e0 	.word	0x200026e0
 800525c:	200026f0 	.word	0x200026f0

08005260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04a      	beq.n	8005308 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005272:	2308      	movs	r3, #8
 8005274:	425b      	negs	r3, r3
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4413      	add	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4b22      	ldr	r3, [pc, #136]	@ (8005310 <vPortFree+0xb0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <vPortFree+0x46>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	60fb      	str	r3, [r7, #12]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <vPortFree+0x66>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	60bb      	str	r3, [r7, #8]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <vPortFree+0xb0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d019      	beq.n	8005308 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d115      	bne.n	8005308 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <vPortFree+0xb0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052ec:	f7fe febc 	bl	8004068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	4b07      	ldr	r3, [pc, #28]	@ (8005314 <vPortFree+0xb4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4413      	add	r3, r2
 80052fa:	4a06      	ldr	r2, [pc, #24]	@ (8005314 <vPortFree+0xb4>)
 80052fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052fe:	6938      	ldr	r0, [r7, #16]
 8005300:	f000 f86c 	bl	80053dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005304:	f7fe febe 	bl	8004084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005308:	bf00      	nop
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	200026f4 	.word	0x200026f4
 8005314:	200026ec 	.word	0x200026ec

08005318 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800531e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005322:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005324:	4b27      	ldr	r3, [pc, #156]	@ (80053c4 <prvHeapInit+0xac>)
 8005326:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00c      	beq.n	800534c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3307      	adds	r3, #7
 8005336:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0307 	bic.w	r3, r3, #7
 800533e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	4a1f      	ldr	r2, [pc, #124]	@ (80053c4 <prvHeapInit+0xac>)
 8005348:	4413      	add	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005350:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <prvHeapInit+0xb0>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005356:	4b1c      	ldr	r3, [pc, #112]	@ (80053c8 <prvHeapInit+0xb0>)
 8005358:	2200      	movs	r2, #0
 800535a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4413      	add	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005364:	2208      	movs	r2, #8
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0307 	bic.w	r3, r3, #7
 8005372:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a15      	ldr	r2, [pc, #84]	@ (80053cc <prvHeapInit+0xb4>)
 8005378:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800537a:	4b14      	ldr	r3, [pc, #80]	@ (80053cc <prvHeapInit+0xb4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005382:	4b12      	ldr	r3, [pc, #72]	@ (80053cc <prvHeapInit+0xb4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005398:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <prvHeapInit+0xb4>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a0a      	ldr	r2, [pc, #40]	@ (80053d0 <prvHeapInit+0xb8>)
 80053a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a09      	ldr	r2, [pc, #36]	@ (80053d4 <prvHeapInit+0xbc>)
 80053ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053b0:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <prvHeapInit+0xc0>)
 80053b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053b6:	601a      	str	r2, [r3, #0]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	200006e0 	.word	0x200006e0
 80053c8:	200026e0 	.word	0x200026e0
 80053cc:	200026e8 	.word	0x200026e8
 80053d0:	200026f0 	.word	0x200026f0
 80053d4:	200026ec 	.word	0x200026ec
 80053d8:	200026f4 	.word	0x200026f4

080053dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053e4:	4b27      	ldr	r3, [pc, #156]	@ (8005484 <prvInsertBlockIntoFreeList+0xa8>)
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e002      	b.n	80053f0 <prvInsertBlockIntoFreeList+0x14>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d8f7      	bhi.n	80053ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	4413      	add	r3, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d108      	bne.n	800541e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	441a      	add	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d118      	bne.n	8005464 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <prvInsertBlockIntoFreeList+0xac>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d00d      	beq.n	800545a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	441a      	add	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e008      	b.n	800546c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800545a:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <prvInsertBlockIntoFreeList+0xac>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e003      	b.n	800546c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d002      	beq.n	800547a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	200026e0 	.word	0x200026e0
 8005488:	200026e8 	.word	0x200026e8

0800548c <siprintf>:
 800548c:	b40e      	push	{r1, r2, r3}
 800548e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005492:	b500      	push	{lr}
 8005494:	b09c      	sub	sp, #112	@ 0x70
 8005496:	ab1d      	add	r3, sp, #116	@ 0x74
 8005498:	9002      	str	r0, [sp, #8]
 800549a:	9006      	str	r0, [sp, #24]
 800549c:	9107      	str	r1, [sp, #28]
 800549e:	9104      	str	r1, [sp, #16]
 80054a0:	4808      	ldr	r0, [pc, #32]	@ (80054c4 <siprintf+0x38>)
 80054a2:	4909      	ldr	r1, [pc, #36]	@ (80054c8 <siprintf+0x3c>)
 80054a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a8:	9105      	str	r1, [sp, #20]
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	a902      	add	r1, sp, #8
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	f000 f9a0 	bl	80057f4 <_svfiprintf_r>
 80054b4:	2200      	movs	r2, #0
 80054b6:	9b02      	ldr	r3, [sp, #8]
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	b01c      	add	sp, #112	@ 0x70
 80054bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c0:	b003      	add	sp, #12
 80054c2:	4770      	bx	lr
 80054c4:	2000001c 	.word	0x2000001c
 80054c8:	ffff0208 	.word	0xffff0208

080054cc <memset>:
 80054cc:	4603      	mov	r3, r0
 80054ce:	4402      	add	r2, r0
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d100      	bne.n	80054d6 <memset+0xa>
 80054d4:	4770      	bx	lr
 80054d6:	f803 1b01 	strb.w	r1, [r3], #1
 80054da:	e7f9      	b.n	80054d0 <memset+0x4>

080054dc <__errno>:
 80054dc:	4b01      	ldr	r3, [pc, #4]	@ (80054e4 <__errno+0x8>)
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	2000001c 	.word	0x2000001c

080054e8 <__libc_init_array>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	2600      	movs	r6, #0
 80054ec:	4d0c      	ldr	r5, [pc, #48]	@ (8005520 <__libc_init_array+0x38>)
 80054ee:	4c0d      	ldr	r4, [pc, #52]	@ (8005524 <__libc_init_array+0x3c>)
 80054f0:	1b64      	subs	r4, r4, r5
 80054f2:	10a4      	asrs	r4, r4, #2
 80054f4:	42a6      	cmp	r6, r4
 80054f6:	d109      	bne.n	800550c <__libc_init_array+0x24>
 80054f8:	f000 fc78 	bl	8005dec <_init>
 80054fc:	2600      	movs	r6, #0
 80054fe:	4d0a      	ldr	r5, [pc, #40]	@ (8005528 <__libc_init_array+0x40>)
 8005500:	4c0a      	ldr	r4, [pc, #40]	@ (800552c <__libc_init_array+0x44>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	42a6      	cmp	r6, r4
 8005508:	d105      	bne.n	8005516 <__libc_init_array+0x2e>
 800550a:	bd70      	pop	{r4, r5, r6, pc}
 800550c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005510:	4798      	blx	r3
 8005512:	3601      	adds	r6, #1
 8005514:	e7ee      	b.n	80054f4 <__libc_init_array+0xc>
 8005516:	f855 3b04 	ldr.w	r3, [r5], #4
 800551a:	4798      	blx	r3
 800551c:	3601      	adds	r6, #1
 800551e:	e7f2      	b.n	8005506 <__libc_init_array+0x1e>
 8005520:	08005fcc 	.word	0x08005fcc
 8005524:	08005fcc 	.word	0x08005fcc
 8005528:	08005fcc 	.word	0x08005fcc
 800552c:	08005fd0 	.word	0x08005fd0

08005530 <__retarget_lock_acquire_recursive>:
 8005530:	4770      	bx	lr

08005532 <__retarget_lock_release_recursive>:
 8005532:	4770      	bx	lr

08005534 <memcpy>:
 8005534:	440a      	add	r2, r1
 8005536:	4291      	cmp	r1, r2
 8005538:	f100 33ff 	add.w	r3, r0, #4294967295
 800553c:	d100      	bne.n	8005540 <memcpy+0xc>
 800553e:	4770      	bx	lr
 8005540:	b510      	push	{r4, lr}
 8005542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005546:	4291      	cmp	r1, r2
 8005548:	f803 4f01 	strb.w	r4, [r3, #1]!
 800554c:	d1f9      	bne.n	8005542 <memcpy+0xe>
 800554e:	bd10      	pop	{r4, pc}

08005550 <_free_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4605      	mov	r5, r0
 8005554:	2900      	cmp	r1, #0
 8005556:	d040      	beq.n	80055da <_free_r+0x8a>
 8005558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800555c:	1f0c      	subs	r4, r1, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	bfb8      	it	lt
 8005562:	18e4      	addlt	r4, r4, r3
 8005564:	f000 f8de 	bl	8005724 <__malloc_lock>
 8005568:	4a1c      	ldr	r2, [pc, #112]	@ (80055dc <_free_r+0x8c>)
 800556a:	6813      	ldr	r3, [r2, #0]
 800556c:	b933      	cbnz	r3, 800557c <_free_r+0x2c>
 800556e:	6063      	str	r3, [r4, #4]
 8005570:	6014      	str	r4, [r2, #0]
 8005572:	4628      	mov	r0, r5
 8005574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005578:	f000 b8da 	b.w	8005730 <__malloc_unlock>
 800557c:	42a3      	cmp	r3, r4
 800557e:	d908      	bls.n	8005592 <_free_r+0x42>
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	1821      	adds	r1, r4, r0
 8005584:	428b      	cmp	r3, r1
 8005586:	bf01      	itttt	eq
 8005588:	6819      	ldreq	r1, [r3, #0]
 800558a:	685b      	ldreq	r3, [r3, #4]
 800558c:	1809      	addeq	r1, r1, r0
 800558e:	6021      	streq	r1, [r4, #0]
 8005590:	e7ed      	b.n	800556e <_free_r+0x1e>
 8005592:	461a      	mov	r2, r3
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	b10b      	cbz	r3, 800559c <_free_r+0x4c>
 8005598:	42a3      	cmp	r3, r4
 800559a:	d9fa      	bls.n	8005592 <_free_r+0x42>
 800559c:	6811      	ldr	r1, [r2, #0]
 800559e:	1850      	adds	r0, r2, r1
 80055a0:	42a0      	cmp	r0, r4
 80055a2:	d10b      	bne.n	80055bc <_free_r+0x6c>
 80055a4:	6820      	ldr	r0, [r4, #0]
 80055a6:	4401      	add	r1, r0
 80055a8:	1850      	adds	r0, r2, r1
 80055aa:	4283      	cmp	r3, r0
 80055ac:	6011      	str	r1, [r2, #0]
 80055ae:	d1e0      	bne.n	8005572 <_free_r+0x22>
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4408      	add	r0, r1
 80055b6:	6010      	str	r0, [r2, #0]
 80055b8:	6053      	str	r3, [r2, #4]
 80055ba:	e7da      	b.n	8005572 <_free_r+0x22>
 80055bc:	d902      	bls.n	80055c4 <_free_r+0x74>
 80055be:	230c      	movs	r3, #12
 80055c0:	602b      	str	r3, [r5, #0]
 80055c2:	e7d6      	b.n	8005572 <_free_r+0x22>
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	1821      	adds	r1, r4, r0
 80055c8:	428b      	cmp	r3, r1
 80055ca:	bf01      	itttt	eq
 80055cc:	6819      	ldreq	r1, [r3, #0]
 80055ce:	685b      	ldreq	r3, [r3, #4]
 80055d0:	1809      	addeq	r1, r1, r0
 80055d2:	6021      	streq	r1, [r4, #0]
 80055d4:	6063      	str	r3, [r4, #4]
 80055d6:	6054      	str	r4, [r2, #4]
 80055d8:	e7cb      	b.n	8005572 <_free_r+0x22>
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	2000283c 	.word	0x2000283c

080055e0 <sbrk_aligned>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	4e0f      	ldr	r6, [pc, #60]	@ (8005620 <sbrk_aligned+0x40>)
 80055e4:	460c      	mov	r4, r1
 80055e6:	6831      	ldr	r1, [r6, #0]
 80055e8:	4605      	mov	r5, r0
 80055ea:	b911      	cbnz	r1, 80055f2 <sbrk_aligned+0x12>
 80055ec:	f000 fbaa 	bl	8005d44 <_sbrk_r>
 80055f0:	6030      	str	r0, [r6, #0]
 80055f2:	4621      	mov	r1, r4
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 fba5 	bl	8005d44 <_sbrk_r>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d103      	bne.n	8005606 <sbrk_aligned+0x26>
 80055fe:	f04f 34ff 	mov.w	r4, #4294967295
 8005602:	4620      	mov	r0, r4
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	1cc4      	adds	r4, r0, #3
 8005608:	f024 0403 	bic.w	r4, r4, #3
 800560c:	42a0      	cmp	r0, r4
 800560e:	d0f8      	beq.n	8005602 <sbrk_aligned+0x22>
 8005610:	1a21      	subs	r1, r4, r0
 8005612:	4628      	mov	r0, r5
 8005614:	f000 fb96 	bl	8005d44 <_sbrk_r>
 8005618:	3001      	adds	r0, #1
 800561a:	d1f2      	bne.n	8005602 <sbrk_aligned+0x22>
 800561c:	e7ef      	b.n	80055fe <sbrk_aligned+0x1e>
 800561e:	bf00      	nop
 8005620:	20002838 	.word	0x20002838

08005624 <_malloc_r>:
 8005624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005628:	1ccd      	adds	r5, r1, #3
 800562a:	f025 0503 	bic.w	r5, r5, #3
 800562e:	3508      	adds	r5, #8
 8005630:	2d0c      	cmp	r5, #12
 8005632:	bf38      	it	cc
 8005634:	250c      	movcc	r5, #12
 8005636:	2d00      	cmp	r5, #0
 8005638:	4606      	mov	r6, r0
 800563a:	db01      	blt.n	8005640 <_malloc_r+0x1c>
 800563c:	42a9      	cmp	r1, r5
 800563e:	d904      	bls.n	800564a <_malloc_r+0x26>
 8005640:	230c      	movs	r3, #12
 8005642:	6033      	str	r3, [r6, #0]
 8005644:	2000      	movs	r0, #0
 8005646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800564a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005720 <_malloc_r+0xfc>
 800564e:	f000 f869 	bl	8005724 <__malloc_lock>
 8005652:	f8d8 3000 	ldr.w	r3, [r8]
 8005656:	461c      	mov	r4, r3
 8005658:	bb44      	cbnz	r4, 80056ac <_malloc_r+0x88>
 800565a:	4629      	mov	r1, r5
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff ffbf 	bl	80055e0 <sbrk_aligned>
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	4604      	mov	r4, r0
 8005666:	d158      	bne.n	800571a <_malloc_r+0xf6>
 8005668:	f8d8 4000 	ldr.w	r4, [r8]
 800566c:	4627      	mov	r7, r4
 800566e:	2f00      	cmp	r7, #0
 8005670:	d143      	bne.n	80056fa <_malloc_r+0xd6>
 8005672:	2c00      	cmp	r4, #0
 8005674:	d04b      	beq.n	800570e <_malloc_r+0xea>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	4639      	mov	r1, r7
 800567a:	4630      	mov	r0, r6
 800567c:	eb04 0903 	add.w	r9, r4, r3
 8005680:	f000 fb60 	bl	8005d44 <_sbrk_r>
 8005684:	4581      	cmp	r9, r0
 8005686:	d142      	bne.n	800570e <_malloc_r+0xea>
 8005688:	6821      	ldr	r1, [r4, #0]
 800568a:	4630      	mov	r0, r6
 800568c:	1a6d      	subs	r5, r5, r1
 800568e:	4629      	mov	r1, r5
 8005690:	f7ff ffa6 	bl	80055e0 <sbrk_aligned>
 8005694:	3001      	adds	r0, #1
 8005696:	d03a      	beq.n	800570e <_malloc_r+0xea>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	442b      	add	r3, r5
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	f8d8 3000 	ldr.w	r3, [r8]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	bb62      	cbnz	r2, 8005700 <_malloc_r+0xdc>
 80056a6:	f8c8 7000 	str.w	r7, [r8]
 80056aa:	e00f      	b.n	80056cc <_malloc_r+0xa8>
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	1b52      	subs	r2, r2, r5
 80056b0:	d420      	bmi.n	80056f4 <_malloc_r+0xd0>
 80056b2:	2a0b      	cmp	r2, #11
 80056b4:	d917      	bls.n	80056e6 <_malloc_r+0xc2>
 80056b6:	1961      	adds	r1, r4, r5
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	6025      	str	r5, [r4, #0]
 80056bc:	bf18      	it	ne
 80056be:	6059      	strne	r1, [r3, #4]
 80056c0:	6863      	ldr	r3, [r4, #4]
 80056c2:	bf08      	it	eq
 80056c4:	f8c8 1000 	streq.w	r1, [r8]
 80056c8:	5162      	str	r2, [r4, r5]
 80056ca:	604b      	str	r3, [r1, #4]
 80056cc:	4630      	mov	r0, r6
 80056ce:	f000 f82f 	bl	8005730 <__malloc_unlock>
 80056d2:	f104 000b 	add.w	r0, r4, #11
 80056d6:	1d23      	adds	r3, r4, #4
 80056d8:	f020 0007 	bic.w	r0, r0, #7
 80056dc:	1ac2      	subs	r2, r0, r3
 80056de:	bf1c      	itt	ne
 80056e0:	1a1b      	subne	r3, r3, r0
 80056e2:	50a3      	strne	r3, [r4, r2]
 80056e4:	e7af      	b.n	8005646 <_malloc_r+0x22>
 80056e6:	6862      	ldr	r2, [r4, #4]
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	bf0c      	ite	eq
 80056ec:	f8c8 2000 	streq.w	r2, [r8]
 80056f0:	605a      	strne	r2, [r3, #4]
 80056f2:	e7eb      	b.n	80056cc <_malloc_r+0xa8>
 80056f4:	4623      	mov	r3, r4
 80056f6:	6864      	ldr	r4, [r4, #4]
 80056f8:	e7ae      	b.n	8005658 <_malloc_r+0x34>
 80056fa:	463c      	mov	r4, r7
 80056fc:	687f      	ldr	r7, [r7, #4]
 80056fe:	e7b6      	b.n	800566e <_malloc_r+0x4a>
 8005700:	461a      	mov	r2, r3
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	42a3      	cmp	r3, r4
 8005706:	d1fb      	bne.n	8005700 <_malloc_r+0xdc>
 8005708:	2300      	movs	r3, #0
 800570a:	6053      	str	r3, [r2, #4]
 800570c:	e7de      	b.n	80056cc <_malloc_r+0xa8>
 800570e:	230c      	movs	r3, #12
 8005710:	4630      	mov	r0, r6
 8005712:	6033      	str	r3, [r6, #0]
 8005714:	f000 f80c 	bl	8005730 <__malloc_unlock>
 8005718:	e794      	b.n	8005644 <_malloc_r+0x20>
 800571a:	6005      	str	r5, [r0, #0]
 800571c:	e7d6      	b.n	80056cc <_malloc_r+0xa8>
 800571e:	bf00      	nop
 8005720:	2000283c 	.word	0x2000283c

08005724 <__malloc_lock>:
 8005724:	4801      	ldr	r0, [pc, #4]	@ (800572c <__malloc_lock+0x8>)
 8005726:	f7ff bf03 	b.w	8005530 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	20002834 	.word	0x20002834

08005730 <__malloc_unlock>:
 8005730:	4801      	ldr	r0, [pc, #4]	@ (8005738 <__malloc_unlock+0x8>)
 8005732:	f7ff befe 	b.w	8005532 <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	20002834 	.word	0x20002834

0800573c <__ssputs_r>:
 800573c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	461f      	mov	r7, r3
 8005742:	688e      	ldr	r6, [r1, #8]
 8005744:	4682      	mov	sl, r0
 8005746:	42be      	cmp	r6, r7
 8005748:	460c      	mov	r4, r1
 800574a:	4690      	mov	r8, r2
 800574c:	680b      	ldr	r3, [r1, #0]
 800574e:	d82d      	bhi.n	80057ac <__ssputs_r+0x70>
 8005750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005754:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005758:	d026      	beq.n	80057a8 <__ssputs_r+0x6c>
 800575a:	6965      	ldr	r5, [r4, #20]
 800575c:	6909      	ldr	r1, [r1, #16]
 800575e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005762:	eba3 0901 	sub.w	r9, r3, r1
 8005766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800576a:	1c7b      	adds	r3, r7, #1
 800576c:	444b      	add	r3, r9
 800576e:	106d      	asrs	r5, r5, #1
 8005770:	429d      	cmp	r5, r3
 8005772:	bf38      	it	cc
 8005774:	461d      	movcc	r5, r3
 8005776:	0553      	lsls	r3, r2, #21
 8005778:	d527      	bpl.n	80057ca <__ssputs_r+0x8e>
 800577a:	4629      	mov	r1, r5
 800577c:	f7ff ff52 	bl	8005624 <_malloc_r>
 8005780:	4606      	mov	r6, r0
 8005782:	b360      	cbz	r0, 80057de <__ssputs_r+0xa2>
 8005784:	464a      	mov	r2, r9
 8005786:	6921      	ldr	r1, [r4, #16]
 8005788:	f7ff fed4 	bl	8005534 <memcpy>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	6126      	str	r6, [r4, #16]
 800579a:	444e      	add	r6, r9
 800579c:	6026      	str	r6, [r4, #0]
 800579e:	463e      	mov	r6, r7
 80057a0:	6165      	str	r5, [r4, #20]
 80057a2:	eba5 0509 	sub.w	r5, r5, r9
 80057a6:	60a5      	str	r5, [r4, #8]
 80057a8:	42be      	cmp	r6, r7
 80057aa:	d900      	bls.n	80057ae <__ssputs_r+0x72>
 80057ac:	463e      	mov	r6, r7
 80057ae:	4632      	mov	r2, r6
 80057b0:	4641      	mov	r1, r8
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	f000 faac 	bl	8005d10 <memmove>
 80057b8:	2000      	movs	r0, #0
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	1b9b      	subs	r3, r3, r6
 80057be:	60a3      	str	r3, [r4, #8]
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	4433      	add	r3, r6
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ca:	462a      	mov	r2, r5
 80057cc:	f000 fad8 	bl	8005d80 <_realloc_r>
 80057d0:	4606      	mov	r6, r0
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d1e0      	bne.n	8005798 <__ssputs_r+0x5c>
 80057d6:	4650      	mov	r0, sl
 80057d8:	6921      	ldr	r1, [r4, #16]
 80057da:	f7ff feb9 	bl	8005550 <_free_r>
 80057de:	230c      	movs	r3, #12
 80057e0:	f8ca 3000 	str.w	r3, [sl]
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	e7e9      	b.n	80057c6 <__ssputs_r+0x8a>
	...

080057f4 <_svfiprintf_r>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	4698      	mov	r8, r3
 80057fa:	898b      	ldrh	r3, [r1, #12]
 80057fc:	4607      	mov	r7, r0
 80057fe:	061b      	lsls	r3, r3, #24
 8005800:	460d      	mov	r5, r1
 8005802:	4614      	mov	r4, r2
 8005804:	b09d      	sub	sp, #116	@ 0x74
 8005806:	d510      	bpl.n	800582a <_svfiprintf_r+0x36>
 8005808:	690b      	ldr	r3, [r1, #16]
 800580a:	b973      	cbnz	r3, 800582a <_svfiprintf_r+0x36>
 800580c:	2140      	movs	r1, #64	@ 0x40
 800580e:	f7ff ff09 	bl	8005624 <_malloc_r>
 8005812:	6028      	str	r0, [r5, #0]
 8005814:	6128      	str	r0, [r5, #16]
 8005816:	b930      	cbnz	r0, 8005826 <_svfiprintf_r+0x32>
 8005818:	230c      	movs	r3, #12
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	b01d      	add	sp, #116	@ 0x74
 8005822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005826:	2340      	movs	r3, #64	@ 0x40
 8005828:	616b      	str	r3, [r5, #20]
 800582a:	2300      	movs	r3, #0
 800582c:	9309      	str	r3, [sp, #36]	@ 0x24
 800582e:	2320      	movs	r3, #32
 8005830:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005834:	2330      	movs	r3, #48	@ 0x30
 8005836:	f04f 0901 	mov.w	r9, #1
 800583a:	f8cd 800c 	str.w	r8, [sp, #12]
 800583e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80059d8 <_svfiprintf_r+0x1e4>
 8005842:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005846:	4623      	mov	r3, r4
 8005848:	469a      	mov	sl, r3
 800584a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800584e:	b10a      	cbz	r2, 8005854 <_svfiprintf_r+0x60>
 8005850:	2a25      	cmp	r2, #37	@ 0x25
 8005852:	d1f9      	bne.n	8005848 <_svfiprintf_r+0x54>
 8005854:	ebba 0b04 	subs.w	fp, sl, r4
 8005858:	d00b      	beq.n	8005872 <_svfiprintf_r+0x7e>
 800585a:	465b      	mov	r3, fp
 800585c:	4622      	mov	r2, r4
 800585e:	4629      	mov	r1, r5
 8005860:	4638      	mov	r0, r7
 8005862:	f7ff ff6b 	bl	800573c <__ssputs_r>
 8005866:	3001      	adds	r0, #1
 8005868:	f000 80a7 	beq.w	80059ba <_svfiprintf_r+0x1c6>
 800586c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800586e:	445a      	add	r2, fp
 8005870:	9209      	str	r2, [sp, #36]	@ 0x24
 8005872:	f89a 3000 	ldrb.w	r3, [sl]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 809f 	beq.w	80059ba <_svfiprintf_r+0x1c6>
 800587c:	2300      	movs	r3, #0
 800587e:	f04f 32ff 	mov.w	r2, #4294967295
 8005882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005886:	f10a 0a01 	add.w	sl, sl, #1
 800588a:	9304      	str	r3, [sp, #16]
 800588c:	9307      	str	r3, [sp, #28]
 800588e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005892:	931a      	str	r3, [sp, #104]	@ 0x68
 8005894:	4654      	mov	r4, sl
 8005896:	2205      	movs	r2, #5
 8005898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800589c:	484e      	ldr	r0, [pc, #312]	@ (80059d8 <_svfiprintf_r+0x1e4>)
 800589e:	f000 fa61 	bl	8005d64 <memchr>
 80058a2:	9a04      	ldr	r2, [sp, #16]
 80058a4:	b9d8      	cbnz	r0, 80058de <_svfiprintf_r+0xea>
 80058a6:	06d0      	lsls	r0, r2, #27
 80058a8:	bf44      	itt	mi
 80058aa:	2320      	movmi	r3, #32
 80058ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058b0:	0711      	lsls	r1, r2, #28
 80058b2:	bf44      	itt	mi
 80058b4:	232b      	movmi	r3, #43	@ 0x2b
 80058b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058ba:	f89a 3000 	ldrb.w	r3, [sl]
 80058be:	2b2a      	cmp	r3, #42	@ 0x2a
 80058c0:	d015      	beq.n	80058ee <_svfiprintf_r+0xfa>
 80058c2:	4654      	mov	r4, sl
 80058c4:	2000      	movs	r0, #0
 80058c6:	f04f 0c0a 	mov.w	ip, #10
 80058ca:	9a07      	ldr	r2, [sp, #28]
 80058cc:	4621      	mov	r1, r4
 80058ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058d2:	3b30      	subs	r3, #48	@ 0x30
 80058d4:	2b09      	cmp	r3, #9
 80058d6:	d94b      	bls.n	8005970 <_svfiprintf_r+0x17c>
 80058d8:	b1b0      	cbz	r0, 8005908 <_svfiprintf_r+0x114>
 80058da:	9207      	str	r2, [sp, #28]
 80058dc:	e014      	b.n	8005908 <_svfiprintf_r+0x114>
 80058de:	eba0 0308 	sub.w	r3, r0, r8
 80058e2:	fa09 f303 	lsl.w	r3, r9, r3
 80058e6:	4313      	orrs	r3, r2
 80058e8:	46a2      	mov	sl, r4
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	e7d2      	b.n	8005894 <_svfiprintf_r+0xa0>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	1d19      	adds	r1, r3, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	9103      	str	r1, [sp, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bfbb      	ittet	lt
 80058fa:	425b      	neglt	r3, r3
 80058fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005900:	9307      	strge	r3, [sp, #28]
 8005902:	9307      	strlt	r3, [sp, #28]
 8005904:	bfb8      	it	lt
 8005906:	9204      	strlt	r2, [sp, #16]
 8005908:	7823      	ldrb	r3, [r4, #0]
 800590a:	2b2e      	cmp	r3, #46	@ 0x2e
 800590c:	d10a      	bne.n	8005924 <_svfiprintf_r+0x130>
 800590e:	7863      	ldrb	r3, [r4, #1]
 8005910:	2b2a      	cmp	r3, #42	@ 0x2a
 8005912:	d132      	bne.n	800597a <_svfiprintf_r+0x186>
 8005914:	9b03      	ldr	r3, [sp, #12]
 8005916:	3402      	adds	r4, #2
 8005918:	1d1a      	adds	r2, r3, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	9203      	str	r2, [sp, #12]
 800591e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80059dc <_svfiprintf_r+0x1e8>
 8005928:	2203      	movs	r2, #3
 800592a:	4650      	mov	r0, sl
 800592c:	7821      	ldrb	r1, [r4, #0]
 800592e:	f000 fa19 	bl	8005d64 <memchr>
 8005932:	b138      	cbz	r0, 8005944 <_svfiprintf_r+0x150>
 8005934:	2240      	movs	r2, #64	@ 0x40
 8005936:	9b04      	ldr	r3, [sp, #16]
 8005938:	eba0 000a 	sub.w	r0, r0, sl
 800593c:	4082      	lsls	r2, r0
 800593e:	4313      	orrs	r3, r2
 8005940:	3401      	adds	r4, #1
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005948:	2206      	movs	r2, #6
 800594a:	4825      	ldr	r0, [pc, #148]	@ (80059e0 <_svfiprintf_r+0x1ec>)
 800594c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005950:	f000 fa08 	bl	8005d64 <memchr>
 8005954:	2800      	cmp	r0, #0
 8005956:	d036      	beq.n	80059c6 <_svfiprintf_r+0x1d2>
 8005958:	4b22      	ldr	r3, [pc, #136]	@ (80059e4 <_svfiprintf_r+0x1f0>)
 800595a:	bb1b      	cbnz	r3, 80059a4 <_svfiprintf_r+0x1b0>
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	3307      	adds	r3, #7
 8005960:	f023 0307 	bic.w	r3, r3, #7
 8005964:	3308      	adds	r3, #8
 8005966:	9303      	str	r3, [sp, #12]
 8005968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800596a:	4433      	add	r3, r6
 800596c:	9309      	str	r3, [sp, #36]	@ 0x24
 800596e:	e76a      	b.n	8005846 <_svfiprintf_r+0x52>
 8005970:	460c      	mov	r4, r1
 8005972:	2001      	movs	r0, #1
 8005974:	fb0c 3202 	mla	r2, ip, r2, r3
 8005978:	e7a8      	b.n	80058cc <_svfiprintf_r+0xd8>
 800597a:	2300      	movs	r3, #0
 800597c:	f04f 0c0a 	mov.w	ip, #10
 8005980:	4619      	mov	r1, r3
 8005982:	3401      	adds	r4, #1
 8005984:	9305      	str	r3, [sp, #20]
 8005986:	4620      	mov	r0, r4
 8005988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800598c:	3a30      	subs	r2, #48	@ 0x30
 800598e:	2a09      	cmp	r2, #9
 8005990:	d903      	bls.n	800599a <_svfiprintf_r+0x1a6>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0c6      	beq.n	8005924 <_svfiprintf_r+0x130>
 8005996:	9105      	str	r1, [sp, #20]
 8005998:	e7c4      	b.n	8005924 <_svfiprintf_r+0x130>
 800599a:	4604      	mov	r4, r0
 800599c:	2301      	movs	r3, #1
 800599e:	fb0c 2101 	mla	r1, ip, r1, r2
 80059a2:	e7f0      	b.n	8005986 <_svfiprintf_r+0x192>
 80059a4:	ab03      	add	r3, sp, #12
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	462a      	mov	r2, r5
 80059aa:	4638      	mov	r0, r7
 80059ac:	4b0e      	ldr	r3, [pc, #56]	@ (80059e8 <_svfiprintf_r+0x1f4>)
 80059ae:	a904      	add	r1, sp, #16
 80059b0:	f3af 8000 	nop.w
 80059b4:	1c42      	adds	r2, r0, #1
 80059b6:	4606      	mov	r6, r0
 80059b8:	d1d6      	bne.n	8005968 <_svfiprintf_r+0x174>
 80059ba:	89ab      	ldrh	r3, [r5, #12]
 80059bc:	065b      	lsls	r3, r3, #25
 80059be:	f53f af2d 	bmi.w	800581c <_svfiprintf_r+0x28>
 80059c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059c4:	e72c      	b.n	8005820 <_svfiprintf_r+0x2c>
 80059c6:	ab03      	add	r3, sp, #12
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	462a      	mov	r2, r5
 80059cc:	4638      	mov	r0, r7
 80059ce:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <_svfiprintf_r+0x1f4>)
 80059d0:	a904      	add	r1, sp, #16
 80059d2:	f000 f87d 	bl	8005ad0 <_printf_i>
 80059d6:	e7ed      	b.n	80059b4 <_svfiprintf_r+0x1c0>
 80059d8:	08005f8e 	.word	0x08005f8e
 80059dc:	08005f94 	.word	0x08005f94
 80059e0:	08005f98 	.word	0x08005f98
 80059e4:	00000000 	.word	0x00000000
 80059e8:	0800573d 	.word	0x0800573d

080059ec <_printf_common>:
 80059ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f0:	4616      	mov	r6, r2
 80059f2:	4698      	mov	r8, r3
 80059f4:	688a      	ldr	r2, [r1, #8]
 80059f6:	690b      	ldr	r3, [r1, #16]
 80059f8:	4607      	mov	r7, r0
 80059fa:	4293      	cmp	r3, r2
 80059fc:	bfb8      	it	lt
 80059fe:	4613      	movlt	r3, r2
 8005a00:	6033      	str	r3, [r6, #0]
 8005a02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a06:	460c      	mov	r4, r1
 8005a08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a0c:	b10a      	cbz	r2, 8005a12 <_printf_common+0x26>
 8005a0e:	3301      	adds	r3, #1
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	0699      	lsls	r1, r3, #26
 8005a16:	bf42      	ittt	mi
 8005a18:	6833      	ldrmi	r3, [r6, #0]
 8005a1a:	3302      	addmi	r3, #2
 8005a1c:	6033      	strmi	r3, [r6, #0]
 8005a1e:	6825      	ldr	r5, [r4, #0]
 8005a20:	f015 0506 	ands.w	r5, r5, #6
 8005a24:	d106      	bne.n	8005a34 <_printf_common+0x48>
 8005a26:	f104 0a19 	add.w	sl, r4, #25
 8005a2a:	68e3      	ldr	r3, [r4, #12]
 8005a2c:	6832      	ldr	r2, [r6, #0]
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	42ab      	cmp	r3, r5
 8005a32:	dc2b      	bgt.n	8005a8c <_printf_common+0xa0>
 8005a34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a38:	6822      	ldr	r2, [r4, #0]
 8005a3a:	3b00      	subs	r3, #0
 8005a3c:	bf18      	it	ne
 8005a3e:	2301      	movne	r3, #1
 8005a40:	0692      	lsls	r2, r2, #26
 8005a42:	d430      	bmi.n	8005aa6 <_printf_common+0xba>
 8005a44:	4641      	mov	r1, r8
 8005a46:	4638      	mov	r0, r7
 8005a48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a4c:	47c8      	blx	r9
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d023      	beq.n	8005a9a <_printf_common+0xae>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	6922      	ldr	r2, [r4, #16]
 8005a56:	f003 0306 	and.w	r3, r3, #6
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	bf14      	ite	ne
 8005a5e:	2500      	movne	r5, #0
 8005a60:	6833      	ldreq	r3, [r6, #0]
 8005a62:	f04f 0600 	mov.w	r6, #0
 8005a66:	bf08      	it	eq
 8005a68:	68e5      	ldreq	r5, [r4, #12]
 8005a6a:	f104 041a 	add.w	r4, r4, #26
 8005a6e:	bf08      	it	eq
 8005a70:	1aed      	subeq	r5, r5, r3
 8005a72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a76:	bf08      	it	eq
 8005a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	bfc4      	itt	gt
 8005a80:	1a9b      	subgt	r3, r3, r2
 8005a82:	18ed      	addgt	r5, r5, r3
 8005a84:	42b5      	cmp	r5, r6
 8005a86:	d11a      	bne.n	8005abe <_printf_common+0xd2>
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e008      	b.n	8005a9e <_printf_common+0xb2>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4652      	mov	r2, sl
 8005a90:	4641      	mov	r1, r8
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c8      	blx	r9
 8005a96:	3001      	adds	r0, #1
 8005a98:	d103      	bne.n	8005aa2 <_printf_common+0xb6>
 8005a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa2:	3501      	adds	r5, #1
 8005aa4:	e7c1      	b.n	8005a2a <_printf_common+0x3e>
 8005aa6:	2030      	movs	r0, #48	@ 0x30
 8005aa8:	18e1      	adds	r1, r4, r3
 8005aaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ab4:	4422      	add	r2, r4
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005abc:	e7c2      	b.n	8005a44 <_printf_common+0x58>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	47c8      	blx	r9
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d0e6      	beq.n	8005a9a <_printf_common+0xae>
 8005acc:	3601      	adds	r6, #1
 8005ace:	e7d9      	b.n	8005a84 <_printf_common+0x98>

08005ad0 <_printf_i>:
 8005ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	7e0f      	ldrb	r7, [r1, #24]
 8005ad6:	4691      	mov	r9, r2
 8005ad8:	2f78      	cmp	r7, #120	@ 0x78
 8005ada:	4680      	mov	r8, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	469a      	mov	sl, r3
 8005ae0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ae2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ae6:	d807      	bhi.n	8005af8 <_printf_i+0x28>
 8005ae8:	2f62      	cmp	r7, #98	@ 0x62
 8005aea:	d80a      	bhi.n	8005b02 <_printf_i+0x32>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f000 80d3 	beq.w	8005c98 <_printf_i+0x1c8>
 8005af2:	2f58      	cmp	r7, #88	@ 0x58
 8005af4:	f000 80ba 	beq.w	8005c6c <_printf_i+0x19c>
 8005af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005afc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b00:	e03a      	b.n	8005b78 <_printf_i+0xa8>
 8005b02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b06:	2b15      	cmp	r3, #21
 8005b08:	d8f6      	bhi.n	8005af8 <_printf_i+0x28>
 8005b0a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b10 <_printf_i+0x40>)
 8005b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005af9 	.word	0x08005af9
 8005b1c:	08005af9 	.word	0x08005af9
 8005b20:	08005af9 	.word	0x08005af9
 8005b24:	08005af9 	.word	0x08005af9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005af9 	.word	0x08005af9
 8005b30:	08005af9 	.word	0x08005af9
 8005b34:	08005af9 	.word	0x08005af9
 8005b38:	08005af9 	.word	0x08005af9
 8005b3c:	08005c7f 	.word	0x08005c7f
 8005b40:	08005ba7 	.word	0x08005ba7
 8005b44:	08005c39 	.word	0x08005c39
 8005b48:	08005af9 	.word	0x08005af9
 8005b4c:	08005af9 	.word	0x08005af9
 8005b50:	08005ca1 	.word	0x08005ca1
 8005b54:	08005af9 	.word	0x08005af9
 8005b58:	08005ba7 	.word	0x08005ba7
 8005b5c:	08005af9 	.word	0x08005af9
 8005b60:	08005af9 	.word	0x08005af9
 8005b64:	08005c41 	.word	0x08005c41
 8005b68:	6833      	ldr	r3, [r6, #0]
 8005b6a:	1d1a      	adds	r2, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6032      	str	r2, [r6, #0]
 8005b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e09e      	b.n	8005cba <_printf_i+0x1ea>
 8005b7c:	6833      	ldr	r3, [r6, #0]
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	6031      	str	r1, [r6, #0]
 8005b84:	0606      	lsls	r6, r0, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0xbc>
 8005b88:	681d      	ldr	r5, [r3, #0]
 8005b8a:	e003      	b.n	8005b94 <_printf_i+0xc4>
 8005b8c:	0645      	lsls	r5, r0, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0xb8>
 8005b90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b94:	2d00      	cmp	r5, #0
 8005b96:	da03      	bge.n	8005ba0 <_printf_i+0xd0>
 8005b98:	232d      	movs	r3, #45	@ 0x2d
 8005b9a:	426d      	negs	r5, r5
 8005b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba0:	230a      	movs	r3, #10
 8005ba2:	4859      	ldr	r0, [pc, #356]	@ (8005d08 <_printf_i+0x238>)
 8005ba4:	e011      	b.n	8005bca <_printf_i+0xfa>
 8005ba6:	6821      	ldr	r1, [r4, #0]
 8005ba8:	6833      	ldr	r3, [r6, #0]
 8005baa:	0608      	lsls	r0, r1, #24
 8005bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bb0:	d402      	bmi.n	8005bb8 <_printf_i+0xe8>
 8005bb2:	0649      	lsls	r1, r1, #25
 8005bb4:	bf48      	it	mi
 8005bb6:	b2ad      	uxthmi	r5, r5
 8005bb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bba:	6033      	str	r3, [r6, #0]
 8005bbc:	bf14      	ite	ne
 8005bbe:	230a      	movne	r3, #10
 8005bc0:	2308      	moveq	r3, #8
 8005bc2:	4851      	ldr	r0, [pc, #324]	@ (8005d08 <_printf_i+0x238>)
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bca:	6866      	ldr	r6, [r4, #4]
 8005bcc:	2e00      	cmp	r6, #0
 8005bce:	bfa8      	it	ge
 8005bd0:	6821      	ldrge	r1, [r4, #0]
 8005bd2:	60a6      	str	r6, [r4, #8]
 8005bd4:	bfa4      	itt	ge
 8005bd6:	f021 0104 	bicge.w	r1, r1, #4
 8005bda:	6021      	strge	r1, [r4, #0]
 8005bdc:	b90d      	cbnz	r5, 8005be2 <_printf_i+0x112>
 8005bde:	2e00      	cmp	r6, #0
 8005be0:	d04b      	beq.n	8005c7a <_printf_i+0x1aa>
 8005be2:	4616      	mov	r6, r2
 8005be4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005be8:	fb03 5711 	mls	r7, r3, r1, r5
 8005bec:	5dc7      	ldrb	r7, [r0, r7]
 8005bee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bf2:	462f      	mov	r7, r5
 8005bf4:	42bb      	cmp	r3, r7
 8005bf6:	460d      	mov	r5, r1
 8005bf8:	d9f4      	bls.n	8005be4 <_printf_i+0x114>
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d10b      	bne.n	8005c16 <_printf_i+0x146>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	07df      	lsls	r7, r3, #31
 8005c02:	d508      	bpl.n	8005c16 <_printf_i+0x146>
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	6861      	ldr	r1, [r4, #4]
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	bfde      	ittt	le
 8005c0c:	2330      	movle	r3, #48	@ 0x30
 8005c0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c16:	1b92      	subs	r2, r2, r6
 8005c18:	6122      	str	r2, [r4, #16]
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f8cd a000 	str.w	sl, [sp]
 8005c24:	aa03      	add	r2, sp, #12
 8005c26:	f7ff fee1 	bl	80059ec <_printf_common>
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d14a      	bne.n	8005cc4 <_printf_i+0x1f4>
 8005c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c32:	b004      	add	sp, #16
 8005c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	f043 0320 	orr.w	r3, r3, #32
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	2778      	movs	r7, #120	@ 0x78
 8005c42:	4832      	ldr	r0, [pc, #200]	@ (8005d0c <_printf_i+0x23c>)
 8005c44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	6831      	ldr	r1, [r6, #0]
 8005c4c:	061f      	lsls	r7, r3, #24
 8005c4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c52:	d402      	bmi.n	8005c5a <_printf_i+0x18a>
 8005c54:	065f      	lsls	r7, r3, #25
 8005c56:	bf48      	it	mi
 8005c58:	b2ad      	uxthmi	r5, r5
 8005c5a:	6031      	str	r1, [r6, #0]
 8005c5c:	07d9      	lsls	r1, r3, #31
 8005c5e:	bf44      	itt	mi
 8005c60:	f043 0320 	orrmi.w	r3, r3, #32
 8005c64:	6023      	strmi	r3, [r4, #0]
 8005c66:	b11d      	cbz	r5, 8005c70 <_printf_i+0x1a0>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	e7ab      	b.n	8005bc4 <_printf_i+0xf4>
 8005c6c:	4826      	ldr	r0, [pc, #152]	@ (8005d08 <_printf_i+0x238>)
 8005c6e:	e7e9      	b.n	8005c44 <_printf_i+0x174>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	f023 0320 	bic.w	r3, r3, #32
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	e7f6      	b.n	8005c68 <_printf_i+0x198>
 8005c7a:	4616      	mov	r6, r2
 8005c7c:	e7bd      	b.n	8005bfa <_printf_i+0x12a>
 8005c7e:	6833      	ldr	r3, [r6, #0]
 8005c80:	6825      	ldr	r5, [r4, #0]
 8005c82:	1d18      	adds	r0, r3, #4
 8005c84:	6961      	ldr	r1, [r4, #20]
 8005c86:	6030      	str	r0, [r6, #0]
 8005c88:	062e      	lsls	r6, r5, #24
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	d501      	bpl.n	8005c92 <_printf_i+0x1c2>
 8005c8e:	6019      	str	r1, [r3, #0]
 8005c90:	e002      	b.n	8005c98 <_printf_i+0x1c8>
 8005c92:	0668      	lsls	r0, r5, #25
 8005c94:	d5fb      	bpl.n	8005c8e <_printf_i+0x1be>
 8005c96:	8019      	strh	r1, [r3, #0]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4616      	mov	r6, r2
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	e7bc      	b.n	8005c1a <_printf_i+0x14a>
 8005ca0:	6833      	ldr	r3, [r6, #0]
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	1d1a      	adds	r2, r3, #4
 8005ca6:	6032      	str	r2, [r6, #0]
 8005ca8:	681e      	ldr	r6, [r3, #0]
 8005caa:	6862      	ldr	r2, [r4, #4]
 8005cac:	4630      	mov	r0, r6
 8005cae:	f000 f859 	bl	8005d64 <memchr>
 8005cb2:	b108      	cbz	r0, 8005cb8 <_printf_i+0x1e8>
 8005cb4:	1b80      	subs	r0, r0, r6
 8005cb6:	6060      	str	r0, [r4, #4]
 8005cb8:	6863      	ldr	r3, [r4, #4]
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cc2:	e7aa      	b.n	8005c1a <_printf_i+0x14a>
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	47d0      	blx	sl
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0ad      	beq.n	8005c2e <_printf_i+0x15e>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	079b      	lsls	r3, r3, #30
 8005cd6:	d413      	bmi.n	8005d00 <_printf_i+0x230>
 8005cd8:	68e0      	ldr	r0, [r4, #12]
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	4298      	cmp	r0, r3
 8005cde:	bfb8      	it	lt
 8005ce0:	4618      	movlt	r0, r3
 8005ce2:	e7a6      	b.n	8005c32 <_printf_i+0x162>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4640      	mov	r0, r8
 8005cec:	47d0      	blx	sl
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d09d      	beq.n	8005c2e <_printf_i+0x15e>
 8005cf2:	3501      	adds	r5, #1
 8005cf4:	68e3      	ldr	r3, [r4, #12]
 8005cf6:	9903      	ldr	r1, [sp, #12]
 8005cf8:	1a5b      	subs	r3, r3, r1
 8005cfa:	42ab      	cmp	r3, r5
 8005cfc:	dcf2      	bgt.n	8005ce4 <_printf_i+0x214>
 8005cfe:	e7eb      	b.n	8005cd8 <_printf_i+0x208>
 8005d00:	2500      	movs	r5, #0
 8005d02:	f104 0619 	add.w	r6, r4, #25
 8005d06:	e7f5      	b.n	8005cf4 <_printf_i+0x224>
 8005d08:	08005f9f 	.word	0x08005f9f
 8005d0c:	08005fb0 	.word	0x08005fb0

08005d10 <memmove>:
 8005d10:	4288      	cmp	r0, r1
 8005d12:	b510      	push	{r4, lr}
 8005d14:	eb01 0402 	add.w	r4, r1, r2
 8005d18:	d902      	bls.n	8005d20 <memmove+0x10>
 8005d1a:	4284      	cmp	r4, r0
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	d807      	bhi.n	8005d30 <memmove+0x20>
 8005d20:	1e43      	subs	r3, r0, #1
 8005d22:	42a1      	cmp	r1, r4
 8005d24:	d008      	beq.n	8005d38 <memmove+0x28>
 8005d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d2e:	e7f8      	b.n	8005d22 <memmove+0x12>
 8005d30:	4601      	mov	r1, r0
 8005d32:	4402      	add	r2, r0
 8005d34:	428a      	cmp	r2, r1
 8005d36:	d100      	bne.n	8005d3a <memmove+0x2a>
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d42:	e7f7      	b.n	8005d34 <memmove+0x24>

08005d44 <_sbrk_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	2300      	movs	r3, #0
 8005d48:	4d05      	ldr	r5, [pc, #20]	@ (8005d60 <_sbrk_r+0x1c>)
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	602b      	str	r3, [r5, #0]
 8005d50:	f7fa fd96 	bl	8000880 <_sbrk>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_sbrk_r+0x1a>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_sbrk_r+0x1a>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	20002830 	.word	0x20002830

08005d64 <memchr>:
 8005d64:	4603      	mov	r3, r0
 8005d66:	b510      	push	{r4, lr}
 8005d68:	b2c9      	uxtb	r1, r1
 8005d6a:	4402      	add	r2, r0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	d101      	bne.n	8005d76 <memchr+0x12>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e003      	b.n	8005d7e <memchr+0x1a>
 8005d76:	7804      	ldrb	r4, [r0, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	428c      	cmp	r4, r1
 8005d7c:	d1f6      	bne.n	8005d6c <memchr+0x8>
 8005d7e:	bd10      	pop	{r4, pc}

08005d80 <_realloc_r>:
 8005d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d84:	4680      	mov	r8, r0
 8005d86:	4615      	mov	r5, r2
 8005d88:	460c      	mov	r4, r1
 8005d8a:	b921      	cbnz	r1, 8005d96 <_realloc_r+0x16>
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d92:	f7ff bc47 	b.w	8005624 <_malloc_r>
 8005d96:	b92a      	cbnz	r2, 8005da4 <_realloc_r+0x24>
 8005d98:	f7ff fbda 	bl	8005550 <_free_r>
 8005d9c:	2400      	movs	r4, #0
 8005d9e:	4620      	mov	r0, r4
 8005da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da4:	f000 f81a 	bl	8005ddc <_malloc_usable_size_r>
 8005da8:	4285      	cmp	r5, r0
 8005daa:	4606      	mov	r6, r0
 8005dac:	d802      	bhi.n	8005db4 <_realloc_r+0x34>
 8005dae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005db2:	d8f4      	bhi.n	8005d9e <_realloc_r+0x1e>
 8005db4:	4629      	mov	r1, r5
 8005db6:	4640      	mov	r0, r8
 8005db8:	f7ff fc34 	bl	8005624 <_malloc_r>
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0ec      	beq.n	8005d9c <_realloc_r+0x1c>
 8005dc2:	42b5      	cmp	r5, r6
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	bf28      	it	cs
 8005dca:	4632      	movcs	r2, r6
 8005dcc:	f7ff fbb2 	bl	8005534 <memcpy>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	f7ff fbbc 	bl	8005550 <_free_r>
 8005dd8:	463c      	mov	r4, r7
 8005dda:	e7e0      	b.n	8005d9e <_realloc_r+0x1e>

08005ddc <_malloc_usable_size_r>:
 8005ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de0:	1f18      	subs	r0, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfbc      	itt	lt
 8005de6:	580b      	ldrlt	r3, [r1, r0]
 8005de8:	18c0      	addlt	r0, r0, r3
 8005dea:	4770      	bx	lr

08005dec <_init>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	bf00      	nop
 8005df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df2:	bc08      	pop	{r3}
 8005df4:	469e      	mov	lr, r3
 8005df6:	4770      	bx	lr

08005df8 <_fini>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr
